게임수학 13주차


ShootingGame

게임 개발 준비  - Main Camera  설정

Clear Flags -> Solid Color
Background -> 하늘색 계열열
Projection -> Orthographic
Size -> 6

Camera Clear Flags
Camera를 렌더링 할 때 어떤 것을 지울지(나머지 화면을 채울지)를 결정
Skybox : 스카이 박스로 화면의 나머지 부분을 채운다. 
SolidColor : 배경색(Background Color)로 화면의 나머지 부분을 채운다. @
Depth : 깊이 버퍼만 지운다. 
Nothing : 화면에서 아무것도 지우지 않는다.  


게임 개발 준비  - Cursor 아이콘 변경

Cursor 이미지 선택 후 Texture Type을 [Cursor]로 변경한 다음 [Apply]클릭
[Edit] -> [Project Settings] -> [Player]에 들어간 후 Default Cursor에 이전에 봤던 Cursor 이미지를 드래그한다.

커서 아이콘 변경하기 재밌다


Player 만들기 - Player 게임 오브젝트 

빈 오브젝트를 생성 후 이름을 Player로 바꾼다.
SpriteRenderer 컴포넌트를 추가한 후 [Assets] -> [Images] 경로에 있는 Player이미지를 Sprite속성에 드래그 앤 드랍한다.
Transform의 Scale 값을 (2, 2, 2) 로 변경한다.

Player 게임 오브젝트에 Box Collider 2D / Rigidbody 2D 를 추가
Gravity Scale : 0 으로 설정


Player 만들기  - 회전 처리

플레이어는 마우스 지점으로 회전 시켜야 함 (마우스를 바라보게끔 함) 
회전 원리 : 탄젠트의 역함수를 통해 회전 각도를 알아내는 것
구현 방법 
	각도 구하기
		특정 오브젝트가 타 오브젝트를 바라 보도록  할 경우가 있다. -> 삼각 함수가 필요하다.
		Mathf.Atan2(y, x) : 아크 탄젠트 함수 (탄젠트의 역함수) 
		들어온 x, y의 값을 가지고 아크 탄젠트 함수를 이용해 결과값을 라디안 값으로 반환
	플레이어를 회전 
		오일러 각 : x, y, z축이 정해져 있고, x축은 a도, y축은 b도, z축은 c도 만큼 돌리는 방법
		쿼터니언에서 회전 함수 (오일러 회전을 쿼터니온으로 변환)
	Quaternion.Euler(float x, float y, float z)
	Quaternion.Euler(Vector3 euler)

뭐든지 target에 대한 transform.position에 대한 값을 가져올 줄 알아야한다
그리고 target을 받는 거의 transform.position에 대한 값도 가져올 줄 알아야 한다.
자신의 위치@



Bullet 만들기  - Bullet 오브젝트 만들기

하이어라키 뷰에 빈 오브젝트를 하나 생성하고 이름을 Bullet으로 변경한다.
Transform컴포넌트의 Position 값은 (0, 0, 0)으로 변경한다.
Bullet오브젝트에 Sprite Renderer 컴포넌트를 추가한 후 Sprite 속성에 [Assets] -> [Images] 경로에 있는 Bullet이미지를 넣어준다.


Enemy 만들기  - Enemy 게임 오브젝트 만들기

하이어라키뷰에 빈오브젝트를 하나 생성 후 이름을 Enemy1으로 변경한다.
Sprite Renderer, Box Collider 2D, Rigidbody 2D 컴포넌트를 추가한다.
Sprite Renderer 컴포넌트의 Sprite 속성에 [Assets] -> [Images] 경로에 있는 Enemy이미지를 넣는다


적군 이펙트  - 파티클 시스템 컴포넌트 설정 
 
파티클 속성 설명

Duration : 0.2
	파티클 재생 시간
Looping : UnCheck
	계속 돌릴것인가? (체크-> 계속 반복)
Start Life Time : 0.6
	파티클 입자의 생명 주기
Start Speed : 0
	파티클 입자들의 속도
Start Size : 콤보박스에서 Random Between Two Constants로 변경 후 값을 (5, 6) 로 변경
	파티클 입자들의 크기
Max Particles : 1
	동시에 보여 줄수 있는 최대 입자 수
Stop Action : Destroy
	파티클 정지지


    Transform playerTr;     //Transform 객체
    Player player;          //Player 객체 - Player.cs 를 활용하려고 하는 것 -> public method를 사용

이 두개의 차이점 중요@@ 시험@
그리고 Player player를 하는 이유는 player.cs 의 코드중 public 메소드를 사용하려고 쓰는 것 이다.

Lerp 함수도 시험에 나옴@@











