게임엔진 10주차


드럼통은 y축으로만 돌아야하니까 X,Z 축은 고정시켜준다
- 난 싫다 뭔가 자연스럽지 않음

    //하위에 있는 mesh Renderer 컴포넌트를 저장할 변수
    private new MeshRenderer renderer;
오버라이드 대신에 new를 사용해서 기존에 있던 아버지것도 무시하고
자신의것을 새로운 메소드를 적용하고 싶을때 new를 사용한다.
기존에 있던것들 무시

 GetComponent
- 단일객체 하나만 가져온다

 GetComponents
- MeshRenderers 를 쓰는데
배열화 되어있으면 s를 붙여서 쓴다

2개의 차이점 알아두기

Renderer를 사용해서 material 을 바꿔줄수있는것을 잘 알아두기@@

    //하위에 있는 mesh Renderer 컴포넌트를 저장할 변수
    private new MeshRenderer renderer;
Stert

        //하위에 있는 MeshRenderer 컴포넌트를 추출
        renderer = GetComponentInChildren<MeshRenderer>();

        //텍스처 저장
        renderer.material.mainTexture = textures[idx];

이 코드 잘 알아두기@@


IndirectDamage(tr.position);        //tr.position은 부딛힌곧의 위치


        //주변에 있는 드럼통을 모두 추출		@@@
        Collider[] colls = Physics.OverlapSphere(pos, radius, 1 << 7);  //7번 레이어에있는 반지름이 10이니까
            //드럼통이 어디에있는지 알려고 하는것   이런 레이어를 가진
            //주변의 collider 정보를 가져와라

Collider로 가져온다 - 빠르니까 - 객체를 가져올때

        foreach(var coll in colls)
        {
            //폭발 범위에 포함된 드럼통의 rigidbody 컴포넌트 추출
            rb = coll.GetComponent<Rigidbody>();    //드럼통을 하나하나씩 가져와서
            //드럼통의 무게를 가볍게 함
            rb.mass = 1.0f;
            //freezeRotation 제한 값을 해제
            rb.constraints = RigidbodyConstraints.None;      //X,Z 를 Frezz 시킨거를 해제하겠다 라는 뜻
            //폭발력 전달
            rb.AddExplosionForce(1500.0f, pos, radius, 1200.0f);    //폭발력인데 1500은 위로 솟구치는 힘, 1200은 폭발반경
        }


        //FirePos 하위에 있는 MuzzleFlash의 material 컴포넌트를 추출	@@
        muzzleFlash = firePos.GetComponentInChildren<MeshRenderer>();   //자식객체가 하나밖에 없다 firePos의
                                                                        //그래서 s를 쓰지않았다
                                                                        //여러개라면 GetComponentsInChildren
시험에 나올가능성 높음 GetComponentInChildren, GetComponentsInChildren 	2개 중요@


        StartCoroutine(ShowMuzzleFlash());  //StartCoroutine @@ 잘 알아두기
        //ShowMuzzleFlash       - 함수 포인터
        //ShowMuzzleFlash()       - 함수

		
    IEnumerator ShowMuzzleFlash()   //반환자 IEnumerator  함수를 몇초 간격으로 호출하겠다	@@
                                    //IEnumerator는 인터페이스다 , 배열의 다음번에 있는 값을 가져온다
                                        //foreach 문의 무브넥스트 느낌 값을 넘겨주는 느낌
                                    //IEnumerable 도 있다
2개 알아두기

Ex)
namespace test
{
	interface MyInter
	{
		public void Attack();
		public void MoveNextk();
	}
	class Zerg:MyInter
	{


쓰레드는 Update와 같다 속도가
하지만 그냥 쓰레드는 부하가 많이 걸려서 멀티쓰레드가 좋다 (그냥 알고있자)

        //오프셋 좌푯값을 랜덤 함수로 사용
        Vector2 offset = new Vector2(Random.Range(0, 2), Random.Range(0, 2)) * 0.5f;
        //텍스처의 오프셋 값 설정
        muzzleFlash.material.mainTextureOffset = offset;    //효과적인것이 많이 나온다@

        //MuzzleFlash의 회전 반경
        float angle = Random.Range(0, 360); //0~360
        muzzleFlash.transform.localRotation = Quaternion.Euler(0, 0, angle);    //z값을 바꿔주는것 
                                                                                //Euler z축 기준으로 몇도를 회전시키다
                                                                                //내부적으로 Quaternion이 바뀐다
        //MuzzleFlash의 크기 조절
        float scale = Random.Range(0.2f, 0.5f);     //0.2~0.5
        muzzleFlash.transform.localScale = Vector3.one * scale;     //크기를 조절


사운드 mono로 바꿔주는것 총알 소리 @








