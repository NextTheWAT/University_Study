<JSP 파일의 변환(시험출제), 동작단계>

(1) URL을 입력하고 엔터를 치는 순간 서버에다가 요청을 먼저함
(2) 서버에서는 JSP컨테이너에 클라이언트가 요청한 페이지가 있는지 검색함
    없으면 에러페이지 출력한다(404)
(3) 해당하는 JSP 페이지를 서블릿(.JAVA)으로 변환합니다.
   [TEST2.JSP면 --> TEST_JSP.java로 변환된다.]
(4) 자바에서 또 클래스파일(기계가 이해할 수 있는 파일)로 변환됩니다. 그래서 메모리에 적재하고
(5) 실행결과를 html로 변환해서 결과를 출력합니다.

===================================================================
<생명주기>

init() 메서드 - 초기화 작업
service() 메서드 - 요청에 대한 필요한 처리
destroy() 메서드 - 사용된 자원을 해제하고 서블릿 종료

===================================================================

<public static void main(String[] args)>

static을 사용하는 이유는 이미 메모리에 할당이 되어 있는 것이고 JVM이 접근하기 위해서 STATIC을 사용한다.
static을 사용하지 않는 것들은 메모리 공간에 할당이 되어 있지 않은 상태인 것을 알 수 있다.
public static사용하는 이유는 jvm 접근하기 위해서

<int a =3>
- 데이터를 메모리 공간에 할당하고 접근하기 위한 방법을 제공, 변수처리하기 위해
- year라고 메모리 공간에 이름을 설정한다.

<String name = "js">
- 참조변수라고 한다. 
- 메모리 공간이 name, 안에 주소값이 들어가있음(js라고 적혀진 메모리공간의 주소값)
==================================================================
<연산자>
비트연산자: &, |
논리연산자: &&, || , !

<switch>
- 정수형반환메서드, 정수, 문자열, 정수형 변수가 전달인자에 올 수 있다.

<continue>
- 조건에 맞으면 아래로 안가고 식으로 다시 돌아가라
==================================================================

<클래스>
 - 접근할 수 있느냐 없느냐, 메모리 공간이 할당이 되야 접근이 가능하다.

<객체>
 - 메모리에 임시적으로 저장되는 프로그램의 구성요소

==================================================================
<static>
- static이 붙어져있음 멤버 변수, 멤버 메서드가 해당이 안된다.

<final>
 - 클래스, 메소드, 변수 특징 제대로 알아보기

<import>
 - 다른 패키지에 속한 클래스를 참조하기 위한 예약어
==================================================================
1. 스크립트 요소
  - 선언문
  - 스크립트릿
  - 표현식
  - 주석

2. 선언문
 <%=  : 결과값 출력
 <%-- : jsp주석
 <%! : 선언문이다. 

- jsp 코드 -> java 코드 (자바클래스로 변환)
- 클래스는 멤버변수, 멤버 메서드로 정의 된다.
- 클래스명은 파일명_jsp 
- 멤버변수, 멤버 메서드로 바뀜

- HTML 코드를 생성하는데 사용된다
- 선언문 문법은 <%! ---- %>
- 선언문은 멤버변수!

- <% 는 지역변수로 들어간다.
- <% 은 안에 메서드가 정의되어 있다
- 그래서 지역 변수로 들어가게 된다.


- <%! 가 먼저오고 <% 가 오면 들어가지를 못함
- 이유는 선언이 되어 있지 않고 소멸된 변수를 호출하는 것은 불가능하다
- <%! 클래스 전체 구간에 존재! 하지만 반대는 호출할때만 존재하기 때문에 소멸된다

==================================================================
<메서드 선언>
- <%! private String name> 이라고 원래 설정되어 있음 
- 그래서 getName()을 이용해서 값을 가져옴
- 멤버변수는 클래스 내에 선언되어 있음
- 지역변수는 jspServelt 메서드안에 존재함, 그래서 지역변수임
- <% 안에는 자바코드 다 쓸수 있음 --메서드 선언이 안된다 대신-- 
       why? -메서드안에 메서드를 선언이 불가하기 때문이다. 
==================================================================
<표현식>
- 실행결과를 표시하기 위해 사용된다.
- <%= 안에 변수, 메소드 선언이 가능하다 %>
- 세미콜론은 따로 붙이지 않음
==================================================================
<스크립트릿>
- if, while같은 반복문들이 완벽하게 끝나지 않을 수도 있다. 
- 스크립트릿은 자바코드라 <html>코드를 넣으면 오류가 뜨니 안에 있는 자바 코드가 반복해서 실행되는 것을 알 수 있다.
==================================================================
<주석>
 - 주석의 종류 확인하기
 - html 주석요소는 소스보기를 하면 그대로 남아있음
 - 실행결과에는 안나오지만 소스보기 하면은 나옴
 - 주석에서 동적인 변수를 사용이 가능하다.
==================================================================
<그 외 중요한 내용>
 - 표현식은 out이랑 연관되어 있다.
 ==================================================================



[6장]

<page 지시자>
 - 텍스트 스크립트 언어
 - 가장 많이 쓰이는 지시자는 import이다.
 - 버퍼: 유튜브에서 버퍼가 땡겨지는 것이 예시이다.
 - page: 어느 소속에 있는 애를 쓸건지
 - info: 정보 제공
 - contentType: 처리하고자하는 데이터 타입 정의할 때
 - autoflush: 버퍼 비운다.
 - session: 서버쪽에 정보를 남겨놓는데 계속 유지할건지 안할건지 //쿠키는 컴퓨터에 정보가 저장된다.
 - isThreadSafe: 
 - trim~~: 공백을 제거한다.
 - errrorpage: 에러가 일어났을 때 어디서 처리해줄거냐
 - isErrorPage: 에러 페이지라고 명시를 해줌! errorpage로 지정을 해주면 지정한 파일에서 작성하고 true라고 하면 된다. 
 - pageEncoding: 인코딩값 무엇으로 할건지.(글꼴)

========================================================================
 
<include 지시자>
- 각각 따로 여러개의 페이지를 include지시자를 사용해 하나의 페이지로 만들 수 있다.
- <%@ include file="로컬 url" %> //file인걸을 기억하자 
========================================================================

<액션태그>
- include 태그는 지시자와 다르게 <%@ include page="로컬 url">
   --> 지시자와 다르게 해당되는 페이지해서 실행결과를 가져온다.
   --> 제출을 받을 page에서 작성한다. 
   --> 이름을 받아도 include page할 때 jsp:param name="siteName" value="JSPStudy.co.kr"
         (이렇게 해버리면 원래 갖고있던 값이 아닌 value로 정의해논 사이트가 넘어가게 된다.)
         ( 지역변수를 하나 선언했다고 생각 지역변수는 전역변수를 가리니까)
         ( int a=4  abc( ) { int a=3}  //하면 출력은 3이 나옴
   
========================================================================   

<forward 액션 태그>
- ex) a라는 사람이 나에게 메일을 보냈는데 내가 아닌 c에게 처리를 해야된다. c로 넘기는 것
      -->나랑 전혀 상관없는 업무라 c로 보낼때 그것을 포워딩이라고 한다.

- 아예 넘겨버리고 이전페이지의 결과는 필요가 없음(시험출제)
- forward한 페이지의 결과는 나오지 않음
======================================================================

<스크립트 요소를 대체하는 액션태그>
- jsp:useBean
- jsp:setProperty
- jsp:getProperty

<자바 빈즈>
 - 멤버 변수를 선언(Private) 형태로 - 클래스 외부에서 접근 불가
 - void set~~()를 이용하여 세터를 설정한다. (값을 설정하는 것)
 - void get~~()를 이용하여 게터를 설정한다. (값을 불러오는 것)
 - getter,setter는 public으로 설정해주어야한다. 외부에서 값을 설정하기 때문에  
 - class를 정의하는 것이다. //멤버변수 form태그에서 받는 것을 멤버변수 설정하고 설정할때 getter,setter를 사용
 - 회원가입은 완벽하게 할 거임

 - 빈즈 예시를 냉장고에 비유 (동작원리를 알 필요가 없음)
 - 그냥 제공해주는 방법으로 값 저장하고 다시 사용하게 하는 것.
 - 부품처럼 만들어서 사용할 때 사용하는 것이 좋다.

<자바 빈 태그>
<jsp:useBean id="변수명" class="클래스" scope="page"(빈이 적용될 수 있는 범위) />
  - 클래스의 변수명과 id 명을 같이 설정해야함  
  - id는 인스턴스를 가리키는 이름을 id로 하겠다!
  - SB test = new SB() 랑 같은 말이다.   


<jsp:setProperty name="---" property="---" value="---" /> 
   - useBean에서 클래스 딱 하는 순간 인스턴스가 생성됨, 메모리에는 id,pw,name(즉 세터, 겟터를 사용하는 애들) 할당되어 있음
   - setter들을 호출하는거임 (property는 보통 '*' (all)사용해서 진행한다.
   - name은 인스턴스 이름이랑 같이 해야함
   - test.message("빈을 쉽게 정복하자!"); //세터 호출하는거임


<jsp:getProperty ~ >
   - 게터가 호출이 된다.
   - 예제에서는 이름을 불러온다.


