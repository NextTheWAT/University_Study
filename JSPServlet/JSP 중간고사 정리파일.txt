<JSP 무엇인가?>
- 객체지향적(자바)
- 플랫폼독립적(웹 사이트 생각하자)
- 뛰어난 보안성(post)
- 멀티스레드 기능
- 친근한 코드(자바)

<jsp 특징>
- jstl 같은 라이브러리 사용가능
- 자바의 모든 기능 사용가능
- 빈즈 컴포넌트를 사용가능하다.
- 서블릿 간의 간편한 데이터 공유

<jsp 파일 실행단계>
- URL를 입력하고 엔터를 누르면 서버에 요청이 들어간다.
- 서버에서 JSP컨테이너에 사용자가 요청한 페이지가 있는지 검색후 없으면 에러페이지 출력(404)
- 해당하는 JSP 페이지 파싱 후 JSP 페이지 서블릿 파일로 변환
- 그다음에 클래스파일이 생성되어(기계가 이해할 수 있는 언어)
- 메모리에 적재 후 실행한다.
- HTML로 변환하여 결과를 출력한다.


<JSP의 생명주기> -- 자원이라고 생각을 우선 하자
- init(): 처리에 필요한 자원에 대한 초기화 작업
- service(): 요청에 대한 처리 작업을 실시한다.
- destroy(): 자원을 해제 후에 서블릿을 종료시키는 메서드이다.

<서블릿이란?>
- jsp 이전의 동적 웹페이지 생성언어
- servelpt + applet의 합성어다
- 브라우저에서 호출하면 WAS에서 웹 페이지를 동적으로 생성한다.

<생성자>
- 클래스가 메모리상에 객체를 생성시켰을 때 가장 먼저 수행할 작업을 기술하는 메소드

<변수 차이!>
- <%!  %>에서 선언된 JSP 페이지 서블릿

<선언문>
- 메소드, 멤버 변수는 선언문에서만 가능
- 지역변수, 자바 문법 실행가능, jsp_service() 메서드


< include 지시자 >
<%@ include file = “a.jsp” %> //a.jsp에 간다.
- 여러개의 페이지를 하나로 통합하여 그 합쳐진 하나의 페이지가 컴파일이 되어 출력한다.

<include 액션태그>
<jsp:include page=“b.jsp” flush = “true” / >

< forward 액션태그 >
- 브라우저에서 요청을 하면 forward를 넘길 페이지가 존재하고 여기서 포워딩을 진행하면 
포워딩을 받은 페이지에서 처리후에 브라우저로 바로 응답해주는 방식

< include지시자 vs include 액션태그의 차이점 >
< include 액션태그 vs forward 액션태그의 차이점 >

<내부객체>
- jsp 페이지를 작성할 때 특별한 기능을 제공하는 JSP 컨테이너가 제공하는 특별한 객체
- JSP에서 선언하지 않고 사용할 수 있는 객체

< 내부 객체의 종류 >
- request
- response
- out
- session
- pageContext
- page
- config
- exception
- aplication

< 내부 객체의 생성 공통 메소드 >
- setAttribute(key,value): 킷값에 대한 속성값을 연결
- getAttributeNames() : 모든 속성의 이름

< response 내부 객체 >
- void sendRedirect(url): 지정된 url로 요청을 재전송한다.
- void setHeader(name,value): 응답에 포함될 Header를 설정한다.

< session 내부 객체 >
-정의: 클라이언트 요청에 대한 context 정보의 세션과 관련된 정보를 저장하고 관리

- String getId(); //해당 세션의 id를 불러온다
- void setMaxInactiveInterval(time) // 세션을 유지할 시간을 초단위로 설정한다.
- void invalidate() : 해당 세션을 종료시킨다 // 로그아웃을 진행한다.

< out 내부 객체 >
- JSP 페이지의 결과를 클라이언트에 전송해 주는 출력 스트림을 나타내며 JSP 페이지가 
  클라이언트에게 보내는 모든 정보는 out 객체를 통해서 전달됩니다.

- int getBufforSize() : 출력 버퍼의 전체 크기를 바이트 단위로 반환
- int getRemaining() : 출력 버퍼의 남은양을 바이트 단위로 반환

<jsp 생명주기 메서드를 서술하시오>
- init(): 처리에 필요한 초기화 작업
- service(): 요청에 대한 처리작업
- destory(): 자원을 해제하고 서블릿 종료

< Servlet 생명주기 메서드를 서술하시오 >
- init(): 처리에 필요한 초기화 작업
- service(): 요청에 대한 처리 작업
- destory(): 자원 해제후 서블릿 종료
- doGet(): 클라이언트가 요청할 때 form태그의 method속성이 get일 때 호출되는 메소드 
- doPost(): 클라이언트가 요청할 때 form 태그의 method 속성이 post일 때 호출되는 메소드

< 자바 빈즈 만드는 법 >
1. 정보를 저장하는 변수는 private로 선언된다.
2. setter() 제작
3. getter() 제작
4. 두 메소드를 public선언을 해준다 (접근한정자)

