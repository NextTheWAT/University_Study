JSP 기말시험


12장

세션이란?
세션 사용 목적 및 이해
 상태가 없는 프로토콜인 HTTP에서 상태에 대한 보전을 위해서 사용
 온라인 쇼핑몰에서 사용하는 장바구니에 사용되는 기술
 사용자의 브라우저와 서버 간의 논리적인 연결
 서버가 자신에게 접속한 클라이언트의 정보를 갖고 있는 상태
세션은 서버단에 있고

쿠키란?
쿠키 사용 목적 및 이해
 상태가 없는 프로토콜을 위해 상태를 지속시키기 위한 방법
 세션과는 달리 클라이언트 자신들에게 그 정보를 저장
 쿠키를 읽어서 새로운 클라이언트인지 이전에 요청을 했던 클라이언트 인지를 판단
 클라이언트에 대한 정보가 과자 부스러기처럼 남는다고 해서 쿠키라 불림
쿠키는 클라이언트단에 있다


HTTP 프로토콜에서 상태를 지속시키기 위한 방법
상태 미제공시
 로그인한 후 그 사이트 내에서 로그인한 상태를 계속 가지고 갈 필요 요망
 매번 페이지를 이동할 때마다 사용자의 정보를 계속 물어야 


HTTP 프로토콜에서 상태를 지속시키기 위한 방법
 URL 새로쓰기(URL Rewriting, URL 재작성)
<a href="/ApplicationName/***------>메뉴</a>

 숨겨진 필드(Hidden Form Variable)
<from name="~~
</form>


쿠키를 구현할 수 있는 쿠키 클래스
쿠키 생성(꼬리표 만들기)
Cookie myCookie = new Cookie("CookieName", "What a Delicious Cookie it is!");

쿠키 셋팅(꼬리표에 정보 기록하기)
myCookie.setValuew("Wow!");

쿠키 전달(꼬리표 붙이기)
response.addCookie(myCookie);

쿠키 읽기(꼬리표 읽기)
request.getCookies();
- 이 메소드는 서버단에서 작용
- 쿠키를 확인하기전까지는 처음 들어왔는지 처음이 아닌지 식별 가능

쿠키 수명죽;
cookie.setMaxAge(int expiry);


쿠키를 구현할 수 있는 쿠키 클래스
쿠키생성 과정에 대한 절차
1. 먼저 쿠키를 생성
2. 쿠키에 필요한 설정 예를 들면 쿠키의 유효시간(즉 쿠키의 유통기한을 말하는 것),
	쿠키에 대한 설명 등을 적용, 도메인, 패스, 보안, 새로운 값 설정
3. 클라이언트에 생성된 쿠키를 전송

Cookie 생성 과정
쿠키 생성 				Cookie myCookie = new Cookie(String, String)
생성된 쿠키에 대한 설정 	myCookie.setValue(String)
설정이 완료된 쿠키 전송 	response.addCookie(myCookie)

Cookie 사용 과정
요청에 포함된 쿠키 가져오기 	Cookie[] cookies = request.getCookies()
쿠키 이름을 읽기 			cookies[i].getName()
얻어진 이름을 통해 정보 사용 	cookies[i].getValue()


세션 인터페이스

세션 생성
session.setAttribute("mySession", "Session value");

세션의 유지시간 설정
session.setMaxInactiveInterval(60*5);

세션 속성 삭제
session.removeAttribute("mySession");

세션 삭제
session.invalidata();


preparedstatment 중요함 꼭 알아두기@@@



session을 사용할때는 항상 형변환을 해주자
ex) String id = (String)session.getAttribute("idkey");

session.invalidate - 세션끊기


ch13
파일 업로드

파일 업로드의 기본적인 폼
- 파일을 전송해서 업로드 하기 위해서 필요한 fome 태그와 input 태그

form 태그
<form name = "frmName" method = "post" enctype="multipart/form-data">
input 태그
<input type = "file" name = "selectFile">

input 태그 페이지 구성
<html>
<body>
<form name="frmName" method="post" 
enctype="multipart/form-data">
<input type="text" name="title">
<input type="file" name="selectFile">
<input type="submit" name="OK">
</form>
</body>
</html>


MultipartRequest의 생성자
public MultipartRequest(javax.servlet.http.HttpServletRequest request,
java.lang.String saveDirectory,
int maxPostSize, - 사이즈
java.lang.String encoding, FileRenamePolicy policy) - 같은 파일이름일때 다르게 지정해주는것


MultipartRequest의 대표 메소드

java.lang.String
getContentType(java.lang.String name) - 업로드 된 파일의 컨텐트
타입을 반환하고 업로드된 파일이 없으면 null을 반환합니다.

java.io.File
getFile(java.lang.String name) - 서버 상에 업로드된 파일의 객체를
반환하고 업로드 된 파일 없으면 null을 반환합니다. - 실제로 파일을 가져오는것

java.util.Enumeration
getFileNames() - 폼 요소 중 input 태그 속성이 file로 된 파라미터의
이름들을 반환하고 업로드된 파일이 없으면 비어있는 Enumeration
객체를 반환합니다. - 인풋 태그중에 태그 이름이 파일인 놈들

java.lang.String
getFilesystemName(java.lang.String name) - 사용자가 지정해서 서
버에 실제로 업로드된 파일명을 반환합니다 - 실제 파일 이름을 가져오는것
같은 이름의 변경된 파일 이름도 알아서 가져온다 - 실제 서버에 저장된 파일
이름을 가져올때

java.lang.String
getOriginalFileName(java.lang.String name) - 사용자가 지정해서 서
버에 업로드된 파일명을 반환하고 이때의 파일명은 파일 중복을 고려
한 파일명 변경 전의 이름을 반환합니다. - 이름이 바꼈으면 원래이름, 안바꼈다면 그대로 가져온다

java.lang.String
getParameter(java.lang.String name) - 스트링으로 주어진 이름에 대
한 값을 반환하고 값 없이 파라미터가 전송되었거나 해당되는 이름의
파라미터가 전송이 안 되었을 경우 null 값을 반환합니다.
requestgetparameter랑 같은것

java.util.Enumeration
getParameterNames() - 모든 파라미터의 이름을 Enumeration 객체
로 반환합니다.

java.lang.String[]
getParameterValues(java.lang.String name) - 주어진 이름에 대한 값
을 스트링 배열로 반환하고 파라미터가 전송되지 않았을 때는 null 값
을 반환합니다


form 태그도 이름을 붙일수있다 그래서 각각 구분 가능
스크립트릿은 JSPService 메소드에 있는것 이기 때문에 페이지가 사용되면서 안에있는것들은 무조건 사용
선언문에 있는것은 호출할때만 사용되기때문에 안사용할수도있음

fileSelectPage의 코드중
<td><input type="text" name="user" onkeyup="inputValue(this.form,user,frmName2,0)" value="<%=getParam(request, "user")%>"></td>
이 코드에서 
value="<%=getParam(request, "user")%>
자기자신을 다시 호출? 값을 다시 위에서 내려오면서
값을 그대로 다시 가져옴


15번째줄 
	int filecounter = 0;
	if(request.getParameter("addcnt")!=null){
		filecounter = Integer.parseInt(request.getParameter("addcnt"));
	}

onkeyup - 키를 눌렀다 땔때 (키보드의 입력을 받으면 바로 사용되는?)


64번째줄
    <td><input type="text" name="user" onkeyup="inputValue(this.form,user,frmName2,0)" value="<%=getParam(request, "user")%>"></td>
코드중 
"inputValue(this.form,user,frmName2,0)" 
자기자신의 form태그, 왼쪽에 있는 user, 값을 frmName2 값의 인덱스번호 0 으로 설정

23번째줄의 이 코드를 보면 알수있다
function inputValue(form1, param, form2, idx){



31번쨰줄
		formName.addcnt.focus();						 
값을 입력하지 않았을때 focus 가 입력되지 않은 addcnt 칸에 깜빡깜빡 거리고있음


92번째 줄
	<%	for(int i=0; i<filecounter; i++){%>
	<input type="File" size="50" name="selectFile<%=i%>"><br/>	 	
	<%	}%>
3을 선택했다면
파라미터 이름이 selectFile0~2가 되는거다


39번째 줄
   for(idx=0; idx<formName.elements.length; idx++){
파일 갯수가 3개면
저거의 값은 6이다
인덱스 0,1,2는 이미 들어가있고 3을 입력했으니까




fileInfoView 코드중

13번째줄
ArrayList saveFiles = new ArrayList();
같은 이름의 파일들이 들어온다면 다른 이름으로 바꿔서 저장

14번째 줄
ArrayList origFiles = new ArrayList();
원래 이름의 파일들


29번째 줄
	   String name = (String)files.nextElement();
오브젝트 이기때문에 스트링으로 형변환



14장

회원가입에서
칸을 입력하지않거나 비밀번호가 달랐을때 체크해주는게
input 체크이다@


PreparedStatement - DB랑 연동할때 값이 어떤게 들어올지 몰라서 prepared로 사용
Statement
차이

<td><input type="text" name="zipcode" size="7" readonly>
여기서 readonly는 읽기 전용이다 쓰기는 불가



데이터베이스에서 취미가 5개가 있는데
글자수를 5개를 넘어간다
그래서 체크가 되어있으면 1로 표시 안되어있으면 0으로 처리해서
5글자로 사용 가능하다






















