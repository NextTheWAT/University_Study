JSP란 무엇인가?
- 자바언어를 기반
- 플랫폼 독립적-
- 멀티스레드 기능-
- 뛰어난 보안성
- 객체 지향적

선언문에서 선언한 변수는 서블릿 클래스의 멤버변수로 들어간다
스크립트릿의 변수는 메소드의 지역변수로 들어간다(JSPService 메소드)

선언문
- 클래스의 멤버변수와 메소드를 선언할수있다

스크립트릿
- JSPService 메소드 안에있는 지역변수와 조건문을 선언
- 메소드를 불러올수있지만 메소드 생성불가능

표현식
- 자바 문법을 HTML로 보기위해 만들어진 식이다

GET 방식 특징
- URL에 쿼리 스트링(데이터)을 붙여서 서버에 전송
- 데이터를 Header(헤더)에 포함하여 전송
- URL에 정보들이 그대로 노출되기 때문에 POST 방식보다 상대적으로 보안에 취약
- 캐싱이 가능
- POST 방식보다 상대적으로 전송 속도가 빠름
- 전송하는 데이터양에 한계가 있음 (브라우저마다 GET 요청 길이 제한 존재)
- 브라우저 히스토리에 기록이 남음

POST 방식 특징
- 데이터들을 URL뒤에 붙여서 서버로 보내는 것이 아닌 Body에 담아서 전송
- 요청 헤더의 Content-Type에 콘텐츠 타입을 명시
- 데이터들이 URL에 노출되지 않기 때문에 GET 방식보다 상대적으로 보안적
- 데이터들을 Body에 담기 때문에 서버로 보내는 데이터의 양은 제한 없음
- URL에 데이터가 노출되지 않으므로 캐싱 불가
- 클라이언트에서 인코딩, 서버에서 디코딩
- 요청받는 시간제한 존재
- 브라우저 히스토리에 기록이 남지 않음

정적 페이지, 동적 페이지

정적 페이지 : 변하지 않는 성격을 가진 페이지
동적 페이지 : 자동으로 생성된 페이지, 기존의 웹 서버에새로운 기능을
	           가진 프로그램을 탑재하여 동적으로 HTML을 생성


JSP 파일의 동작단계@@@
1. JSP 페이지 요청
2. JSP 컨테이너로 전송
3. JSP 파일 파싱
4. 서블릿으로 변환
5. 클래스 파일 생성
6. 메모리에 적재되어 실행됨
7. HTML 전송
8. HTML 표시(실행)

init() 메서드
- 처리에 필요한 자원에 대한 초기화 작업

service() 메서드-
- 요청에 대해서 필요한 처리
- 시렞 요청에 대한 처리를 담당하는 메서드

destroy() 메서드
- 사용된 자원을 해제한 뒤, 서블릿을 종료

서블릿이란?
- JSP 이전 세대의 -동적 웹페이지 생성 언어--

JSP 파일 동작구조@
- 
서블릿이 무엇인지@ 
- JSP 이전 세대의 동적 웹페이지 언어
- 서블릿과 applet의 합성어다
- 웹서버에서 동적 웹페이지를 생성한다


생성자
- 클래스가 메모리상에 객체(인스턴스 생성)를 생성시켰을 때 가장 먼저 수행할 작업을 기술하는 메소드


선언문의 출력1 : <%=declaration%> <p/>
선언문의 출력2 : <%=decMethod%> <p/>
스크립트릿의 출력 : <%scriptlet%> <p/>

1. html 주석은 소스코드에 보임
2. JSP주석은 소스코드에 안보임
<! -->
<% -->  안보임

 선언문이란?
 JSP에서 사용될 변수나 메소드를 선언할 수 있는 영역들의 요소
 JSP 페이지 내에서 변수 및 메소드를 선언 후 변수나 메소드를
  이용하여 필요한 동적으로 HTML코드를 생성하는데 사용
 멤버 변수 : 선언문에 선언된 변수
 선언문에서 선언된 변수로 호칭하는 것은 자바에서
  변수의 종류가 여러 가지 있다는 의미
 선언문 문법
	<%!  멤버변수 및 메소드를 선언하는 영역 %>

멤버변수의 선언
- 선언문에서 선언된 변수는 JSP페이지가 서블릿 코드로 변환이 되면
	서블릿 클래스의 멤버변수로 반환됨@

<%! 멤버변수, 메소드 선언 가능%>
<% 조건문, 반복문 등등 만 가능 메소드 선언이 안된다 %>
메소드 안에 메소드는 불가능하기때문 일반 자바 코드만

ex)
	<%!
		String name = "JSPStudy";
		int year = 2013;
	%>

스크립트릿이란?		<% 		%>
- 만약 선언을 하게 되면 -메소드 안에 메소드를 선언-한 것이기 때문에 만들 수가 없음.@@
<% 이곳에 필요한 자바코드를 삽입(지역 변수 선언, for, while, if등) %> - 메소드선언으로 들어가기 때문
<%! 멤버변수 %> - 선언문
<% 지역변수 %> - 스크립트릿
라고 생각하면된다

 표현식이란?
 동적인 JSP 페이지를 브라우저로 표현을 하기 위한 요소.
 변수를 출력하거나 메소드의 결과값을 브라우저에 출력 할 수 있음.
 스크립트릿 코드 내에서 out이라는 내장객체를 통해 브라우저에 출
  력 가능.
 스크립트릿과 달리 변수나 메소드를 출력하고 할 때 세미콜론(;)은
  표기하지 않음.
  (서블릿 코드로 변환될 때 자동적으로 세미콜론은 붙여짐)
 표현식 문법
<%= 변수 혹은 메소드%>

 주석이란?
 프로그램에 직접적인 영향을 미치지는 않지만 개발자들이 소스
분석 내용 및 파일 설명 처리를 위해서 없어서는 안 될 꼭 필요한
요소

HTML 형식의 주석
<!-- -->
JSP 형식의 주석
<%-- --%>
스크립트 요소의 주석
<% /* 주석 */ %>
<% // 주석 %>
<%=   /*주석*/%>
<%= /* 주석 */%>

HTML주석은 소스코드에 보인다
JSP주석은 소스코드에 안보인다
포워드@@@


errorPage 속성
<%@Page errorPage="Error.jsp"%>

isErrorPage 속성	- 에러페이지에 작성하면된다(넘김을 받은 Page)
<%@Page isErrorPage="true"%>

pageEncoding 속성
<%@Page pageEncoding="EUC-KR"%>
<%@Page contentType="text/html"; charset="EUC-KR"%>
<%@Page contentType="text/html"; charset="UTF-8" pageEncoding="EUC-KR"%>

액션 태그 6가지 종류 중 3개
include
forward
plug-in
getProperty
setProperty
useBean

include 사용 예
<jsp:include page="로컬URL" flush="true"/>

forward 사용 예
<jsp:forward page="로컬URL"/>
<jsp:forward page="로컬URL"></jsp:forward>
<jsp:forward page='<%expression%>'/>

plug-in 속성
<jsp:plugin> 액션은 자바 플로그인을 사용하여
자바 애플릿을 JSP페이지에서 실행할 때 사용하는 액션 태그

useBean 속성
<jsp:useBean id=".." class=".." scope=".."/>
<jsp:setProperty name=".." property=".." value=".."/>
<jsp:getProperty name=".." property=".."/>


내부객체란?
- JSP에서 선언하지 않고 사용할 수 있는 객체 // 동일한 명으로 객체 생성이x
- JSP페이지를 작성할 때 특별한 기능을 제공하는 JSP컨테이너가 제공하는 특별한 객체
- 사용되는 범주에 따라 4가지 형태로 분류
	- JSP페이지 입출력 관련 내부 객체 ex) response, request등등

내부객체 9가지 종류
request		- 파라미터를 포함한 요청을 담고 있는 객체
response		- 
out
session
application
pageContext
page
config
exception
중
request랑 response를 많이 사용
session까지는 사용


내부객체의 공통 메소드
setAttribute (key, value)@	- 주어진 key(이름 등)에 속성값을 연결한다.
getAttribute(key)@			- 주어진 ket에 연결된 속성값을 얻어낸다.
두 개를 많이 사용		
getAttributeNames()			- 모든 속성의 이름을 얻어낸다.
removeAttribute(key)		- 주어진 key에 연결된 속성값을 제거합니다.
이 메소스들은 해당 클래스에 정의되어있다
멤버 메소드의 정의?


request 내부객체@@
ex)
request.getParameter
request는 주소값을 가지고있고 그 주소값은 인스턴스를 가르킨다
대표적인게 getParameter 메소드등
다른 메소드들이 정의되어있다

<from method="post" action="request1.jsp">

성명 : <input name="name">
성명 : <input type="text" name="name">
이처럼 type="text" 가 디폴트 값으로 들어가서 안써도 무방하다


response 내부객체@@
 response 내부객체는 요청을 시도한 클라이언트로 전송할 응답을 나타내는 데이터의 묶음입니다.
페이지를 업데이트하거나 리다이렉트 사용을해서 다른 페이지로 넘기는것
response1 페이지를 들어갈려했는데 response1_1 페이지로 response를 하면 response1_1페이지로 넘어간다
ex)
response.sendRedirect("response1_1.jsp");


session 내부객체@
 session 내부객체는 클라이언트 요청에 대한 context 정보의 세
션과 관련된 정보(데이터)를 저장하고 관리하는 객체입니다.

세션이 아이디를 부여해서 해당되는 클라이언트의 아이디를 확인?


exeception 내부객체@
 execption 내부객체는 개발자가 JSP 페이지에서 발생한 예외를 처리하는 페이지를 지정한 경우 
에러 페이지에 전달되는 예외객체입니다.
 page 지시자의 isErrorPage 속성을 true로 지정한 JSP 페이지만 사용 가능한 객체이고 
예외처리를 설정한 JSP 페이지에는 errorPage 속성에 예외처리 페이지를 설정해야 합니다.
- 나름 많이 사용

exeception은 에러페이지 내부 안에서 사용할수 있는것
ex)
exeception.getMes


서블릿이란?
 JSP 이전에 동적인 웹페이지 콘텐츠를 생성하는 기술로 제공
 서블릿의 자바의 많은 장점 사용가능
 HTML, CSS 및 자바스크립트 그리고 웹디자인과 연동하기에는 많은 단점
 단점이 많지만 서블릿의 존재 이유
- JSP에는 없는 서버 측 프로그램의 기능
- 대규모 프로젝트에 사용되는 프레임워크의 기술을 사용


서블릿의 주요 클래스
 HttpServlet : 서블릿을 만들기 위해 반드시 상속해야 할 필수 클래스
 HttpServletRequest : 클라이언트가 데이터를 입력하거나 또는 정보
에 대한 요청 값을 가지고 있는 클래스
 HttpServletResponse : 클라이언트가 요청한 정보를 처리하고 다시
응답하기 위한 정보를 담고 있는 클래스
 HttpSession : 클라이언트가 세션을 정보를 저장하고 세션 기능을 유
지 하지 위해서 제공되는 클래스


get방식은 url에 정보가 노출되어서 잘 사용하지 않는다
post방식을 많이 사용


서블릿의 요청 방식 - get
 get 방식 : 일반적으로 검색이나 조건을 다른 페이지로 전
송할 때 사용하는 방식

8-12
서블릿의 요청 방식 - post
 post 방식 : 게시판에 글을 입력하거나 또는 회원가입을
하는 기능으로 다른 페이지로 전송할 때 사용하는 방식

8-13
서블릿의 세션
 세션(session) : 클라이언트(브라우저)와 서버(톰켓)와
통신의 연속성을 유지하기 위해 사용 되는 기술


자바빈즈 만들기
1. 정보를 저장하는 변수는 모드 private로 선언
2. private로 선언된 변수의 값을 저장하는 메소드를 만듬
	메소드의 이름은 setxxx() 형식으로 만든다
	Xxx는 변수의 이름과 같으며 첫 글자는 대문자
3. private로 선언된 변수의 값을 가져오는 메소드를 만듬
	메소드의 이름은 getxxx() 형식으로 만든다
	Xxx는 변수의 이름과 같으며 첫 글자는 대문자
4. setXxx() 메소드와 getXxx() 메소드를 public으로 선언


빈 관련 태그
<jsp:useBean id="변수명" class="클래스명" scope="..."/>
<jsp:setProperty name="..." property="..." value="..."/>
<jsp:getProperty name="..." property="..."/>


<jsp:useBean id="test" class="09.SimpleBean"/>
<jsp:setProperty name="test" property=massage" value="빈을 쉽게 정복하자!"/>
<jsp:getProperty name="test" property="message"/>



