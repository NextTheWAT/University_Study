8주차것


2. 선형 리스트의 연산과 알고리즘  시험에는 안나옴 너무 복잡해서@

선형 리스트에서 원소 삭제와 알고리즘
선형리스트 중간에서 원소가 삭제되면, 그 이후의 원소들은 한 자리씩 자리를 앞으로 이동하여 물리적 순서를 논리적 순서와 일치시킴

원소 삭제 방법
 1. 원소 삭제하기  
 2. 삭제한 빈 자리 채우기
☞ 삭제한 자리 이후의 원소들을 한자리씩 앞으로 자리 이동 
   - 자리 이동하면서 원소가 덮어쓰기 되지 않도록, 앞에서부터 자리 이동(①~④)
배열

행렬의 선형 리스트 표현
- 행렬matrix의 개념
   - 행과 열로 구성된 자료구조
   - m×n 행렬 : 행 개수가 m개, 열 개수가 n개인 행렬
   - 정방행렬 : 행렬 중에서 m과 n이 같은 행렬
   - 전치행렬 : 행렬의 행과 열을 서로 바꿔 구성한 행렬

희소 행렬에 대한 2차원 배열 표현
- 희소 행렬 B는 배열의 원소 56개 중 실제 사용하는 것은 0이 아닌 원소를 저장하는 10개뿐이므로 46개의 메모리 공간 낭비
   1. 0이 아닌 원소만 추출하여 <행번호, 열번호, 원소> 쌍으로 배열에 저장
   2. 추출한 순서쌍을 2차원 배열에 행으로 저장
   3. 원래의 행렬에 대한 정보를 순서쌍으로 작성하여 0번 행에 저장


8주차도 나오긴하지만 용어 몇개 나옴

자료구조 9주차 정리@
용어를 명확히 알아야함

기말은 4,5,6 챕터
기말에는 용어정리 10문제

순차 자료구조의 문제점@@@
- 삽입 연산이나 삭제 연산 후에 연속적인 물리 주소를 유지하기 위해서 원소들을 이동시키는 추가 작업과 시간 소요 
  - 원소들의 이동 작업으로 인한 오버헤드로 원소의 개수가 많고 삽입・삭제 연산이 많이 발생하는 경우에 성능상의 문제 발생

- 순차 자료구조는 배열을 이용해 구현하기 때문에 배열이 갖고 있는 메모리 사용의 비효율성 문제를 그대로 가짐 


연결 자료구조Linked Data Structure  @@@
- 자료의 논리적인 순서와 물리적인 순서가 불일치
  - 각 원소에 저장되어 있는 다음 원소의 -주소-에 의해 순서가 연결되는 방식
    - 물리적인 순서를 맞추기 위한 오버헤드가 발생하지 않음 --
  - 여러 개의 작은 공간을 연결하여 하나의 전체 자료구조를 표현
    - 크기 변경이 유연하고 더 효율적으로 메모리를 사용 --

- 연결 리스트
  - 리스트의 연결 자료구조로 표현
  - 연결하는 방식에 따라 단순 연결 리스트와 원형 연결 리스트, 이중 연결 
    리스트, 이중 원형 연결 리스트


연결 리스트의 @@@노드@@@
- 연결 자료구조에서 -하나의 원소-를 표현하기 위한 -단위 구조-
배열은 데이터만 저장하지만 연결 리스트는 데이터와 주소(링크) 가 있다

- 데이터 필드data field
   - 원소의 값을 저장
   - 저장할 원소의 형태에 따라서 하나 이상의 필드로 구성
 - 링크 필드link field  
   - 다음 노드의 주소를 저장
   - 포인터 변수를 사용하여 주소값을 저장


순차 자료구조는 배열이다@
연결 자료구조는 포인터@

메모리 저장 방식
순차 자료구조 - 빈자리 없이 자료를 순서대로 연속하여 저장한다.
연결 자료구조 - 저장 위치의 순서와 상관업싱 노드의 링크 필드에 다음 자료의 주소를 저장한다.

프로그램 기법
순차 자료구조 - 배열을 이용한 구현@
연결 자료구조 - 포인터를 이용한 구현@


연결 리스트의 이해
- 기차놀이와 연결 리스트
   - 기차놀이 하는 아이들 : 연결 리스트의 노드
   - 이름표 : 노드의 link 필드


선형 리스트 week의  순차 리스트 표현 (배열)@@
리스트 week=(월, 화, 수, 목, 금, 토, 일) 
0   1  2  3   4  5  6 
월 화 수 목 금 토 일

선형 리스트 week의 연결 리스트 표현 4-10p
week는 포인터 변수이다 데이터가 시작한다는것을 알려주는@@
배열처럼 논리적인구조와 순서적인구조가 순서와 상관없이 번지만 알면 됨


선형 리스트와 연결 리스트의 비교 4-11p
- 리스트 이름 week : 연결 리스트의 시작을 가리키는 포인터 변수 @@(노드랑 헷갈리지 않게 외워두기)
   - week는 연결 리스트의 첫 번째 노드를 가리킴과 동시에 연결된 리스트 전체 의미@
그냥 첫 번째 노드를 가리킨다 라고 알면됨@
- 연결 리스트의 마지막 노드의 링크 필드 : -노드 끝-을 표시하기 위해 NULL(널) 저장

- 공백 연결 리스트 : 포인터 변수 week에 NULL 저장(널 포인터)
empty(엠티) - 공백
- 각 노드의 필드에 저장한 값은 -점 연산자-(구조체)를 사용해 액세스
   - week.data(데이터)  : 포인터 week가 가리키는 노드 데이터 필드 값 ‘월‘
   - week.link(링크)      : 포인터 week가 가리키는 노드 링크 필드에 저장된 주소값 ‘120‘
ex) week.link.data
	week.link.link.data
	week.link.link.link.data


리스트 week의 노드에 대한 구조체 정의 4-12p@
ex) 재귀호출, 재귀함수, 팩토리얼 등등


연결 리스트의 노드와 점 연산자 표현 4-13p 좋은 예는 아니다.
(a)의 대화에 담긴 진호와 상원이의 관계를 
(b)의 연결 리스트의 노드로 표현하고, 
(c)와 같이 점 연산자(.)를 사용하여 액세스


2. 단순 연결 리스트


단순 연결 리스트singly linked list의 개념 4-14p
- 노드가 하나의 링크 필드에 의해서 다음 노드와 연결되는 구조를 가짐
- 연결 리스트, 선형 연결 리스트linear linked list, 
  단순 연결 선형 리스트singly linked linear list


단순 연결 리스트에 삽입하는 방법@ (알고리즘)
1. 삽입할 노드를 준비한다.
2. 새 노드의 데이터 필드에 값을 저장한다.
3. 새 노드의 링크값을 지정한다.
4. 리스트의 앞 노드에 새 노드를 연결한다.

단순 연결 리스트의 알고리즘 @@@
첫 번째 노드로 삽입하기

이런식으로 시험에 나옴 빈칸@@@@ 4-23p
insertFirstNode(L,x)
1 new <- herNode();
2 new.data <- x;
3 new.link <- L;
4 L <- new;

1. new ← getNode(); 
2. new.data ← x;
3. new.link ← L; 
삽입할 노드를 연결하기 위해서 리스트의 첫 번째 노드 주소(L)를 삽입할 새 노드 new의 링크 @필드(new.link)에@ 저장하여, 
새 노드 new가 리스트의 첫 번째 노드를 가리키게 한다. 
4. L ← new;
리스트의 첫 번째 노드 주소를 저장하고 있는 @포인터 L에@, 새 노드의 주소 new를 저장하여, 
포인터 L이 새 노드를 첫 번째 노드로 가리키도록 지정

중간 노드로 삽입하기 @@@@ 4-26p
1. new ← getNode(); 
2. new.data ← x; 
3. 공백 리스트인 경우
3-1 a L ← new; 
     리스트 포인터 L에 새 노드 new의 주소를 저장하여, 새 노드 new가 리스트의 첫 번째 노드가 되도록 함
3-2 b new.link ← NULL; 
     리스트의 마지막 노드인 new의 링크 필드에 NULL을 저장해 마지막 노드임을 표시 
4. 공백 리스트가 아닌 경우
4-1 a new.link ← pre.link;
     노드 pre의 링크 필드 값을 노드 new의 링크 필드에 저장하여, 새 노드 new가 노드 pre의 다음 노드를 가리키도록 함 
4-2 b pre.link ← new;
     포인터 new의 값을 노드 pre의 링크 필드에 저장하여, 노드 pre가 새 노드 new를 다음 노드로 가리키도록 함 


단순 연결 리스트 week2=(월, 금, 일)에서 ‘월’과 ‘금’ 사이에 ‘수’ 삽입 과정
초기상태 4-17p

1. 삽입할 노드 준비 : 공백 노드를 가져와 포인터 변수 new가 가리키게 함
2. 새 노드의 데이터 필드값 저장 : new의 데이터 필드에 ‘수‘를 저장
3.  노드의 링크 필드값 지정 : new의 앞 노드, 즉 ‘월‘ 노드의 링크 필드 값을 -new 노드의 링크 필드-에 저장
4. 리스트의 앞 노드에 새 노드 연결 : new의 값을 -‘월‘ 노드의 링크 필드에- 저장


단순 연결 리스트에서의 삭제 연산 4-19p

- 단순 연결 리스트에서 노드를 삭제하는 방법
1. 삭제할 노드의 앞 노드를 찾는다,
2. 앞 노드에 삭제할 노드의 링크 필드값을 저장한다.
3. 삭제한 노드의 앞 노드와 삭제한 노드의 다음 노드를 연결한다.
실제적으로 2개만해도 된다 3번째는 2개의 내용을 서술한것

단순 연결 리스트 week2=(월, 수, 금, 일)에서 원소 ‘수’ 삭제 과정
초기 상태 4-21p
1. 앞 노드를 찾음 : 삭제할 원소의 앞 노드(선행자)를 찾음
2. 앞 노드에 삭제할 노드의 링크 필드값 저장 : 삭제할 원소 ‘수‘의 링크 필드 값을 -앞 노드의 링크 필드-에 저장
3. 삭제한 노드의 앞뒤 노드 연결 : 삭제한 노드의 앞 노드인 ‘월’ 노드를 삭제한 노드의 다음 노드인 ‘금‘ 노드에 연결




















