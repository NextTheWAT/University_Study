자료구조 6주차 정리

메모리 = 주소, 변수
(address, variavble)
값(value)

int a = 3;  @@
int *a = 3;  @@
int **a= 3;  @@


문자열String 자료
- 여러 문자로 이루어진 문자의 그룹을 하나의 자료로 취급하여 메모리에 
  연속적으로 저장하는 자료 형식
가장 좋은방법은 포인터 사용하는것

공간을 적게쓰고 속도가 빠른것을 사용 - 포인터가 가장 효율적


3. 자료의 추상화

- 뇌의 추상화 기능
   - 기억할 대상의 구별되는 특징만을 단순화하여 기억하는 기능
추상화 abstract
요약화,
일반화


컴퓨터를 이용한 문재해결에서의 추상화
- 크고 복잡한 문제를 단순화시켜 쉽게 해결하기 위한 방법
- 자료 추상화(Data Abstraction)
   - 처리할 자료, 연산, 자료형에 대한 추상화 표현
   - 자료 : 프로그램의 처리 대상이 되는 모든 것을 의미
- 연산
   - 어떤 일을 처리하는 과정. 연산자에 의해 수행
   - 예) 더하기 연산은 +연산자에 의해 수행
- 자료형
   - 처리할 자료의 집합과 자료에 대해 수행할 연산자의 집합
   - 예) 정수 자료형
          자료 : 정수의 집합. {…, -1, 0, 1, …}
          연산자 : 정수에 대한 연산자 집합. {+, -, x, ÷, mod}
자료형(data type) @@@
void, char, int, float, double

- 추상 자료형(ADT, Abstract Data Type)
   - 자료와 연산자의 특성을 논리적으로 추상화하여 정의한 자료형
- 추상화와 구체화
   - 추상화 – “무엇(what)인가?”를 논리적으로 정의
   - 구체화 – “어떻게(how) 할 것인가?”를 실제적으로 표현


4. 알고리즘의 이해

- 알고리즘  @@@ 
   - 문제해결 방법을 추상화하여 단계적 절차를 논리적으로 기술해 놓은 명세서


5. 알고리즘의 표현 방법

알고리즘의 표현 방법의 종류
- 자연어를 이용한 서술적 표현 방법
- 순서도Flow chart를 이용한 도식화 표현 방법
- 프로그래밍 언어를 이용한 구체화 방법
- 가상코드Pseudo-code를 이용한 추상화 방법

순서도를 이용한 도식화 @@@ 1-41p
- 순서도의 예) 1부터 5까지의 합을 구하는 알고리즘

순서도 flowchart @@@
(1) 1부터 100까지 더하는
(2) 구구단
(3) 3+5 더하는


조건문
- 조건에 따라 실행할 명령문이 결정되는 선택적 제어구조를 만든다.
- if 문의 형식과 제어흐름

다단계 조건문  1-45p
- 중첩 if 문의 형식과 제어 흐름
- 중첩 if문 사용 예) 평균 점수에 따른 등급 계산하기


case 문  1-47p
- 여러 조건식 중에서 해당 조건을 찾아서 그에 대한 명령문을 수행
- 중첩 if 문으로 표현 가능
- 형식과 제어흐름 
예) 평균 점수에 따른 등급 계산하기 (안나옴)

반복문    1-49p
- 일정한 명령을 반복 수행하는 루프(loop) 형태의 제어구조
- for 문
   - 형식과 제어흐름

while – do 문
형식과 제어흐름

do-while 문
형식과 제어흐름

함수문   1-52p
- 처리작업 별로 모듈화하여 만든 부프로그램
- 형식과 예 


6. 알고리즘의 성능분석

알고리즘 성능 분석 기준
- 기준에는 정확성, 명확성, 수행량, 메모리 사용량, 최적성 등 있음
   - 정확성 : 올바른 자료 입력 시 유한한 시간 내에 올바른 결과 출력 여부
   - 명확성 : 알고리즘이 얼마나 이해하기 쉽고 명확하게 작성되었는가
   - 수행량 : 일반적인 연산 제외, 알고리즘 특성 나타내는 중요 연산 모두 분석
   - 메모리 사용량 
   - 최적성 : 가장 중요

알고리즘 성능 분석 방법
- 공간 복잡도
   - 알고리즘을 프로그램으로 실행하여 완료하기까지 필요한 총 저장 공간의 양
   - 공간 복잡도 = 고정 공간 + 가변 공간 

- 시간 복잡도
   - 알고리즘을 프로그램으로 실행하여 완료하기까지의 총 소요시간 
   - 시간 복잡도 = 컴파일 시간 + 실행 시간
      - 컴파일 시간 : 프로그램마다 거의 고정적인 시간 소요
      - 실행 시간 : 컴퓨터의 성능에 따라 달라질 수 있으므로 실제 실행시간 보다는 명령문의 실행 빈도수에 따라 계산
   - 실행 빈도수의 계산
      - 지정문, 조건문, 반복문 내의 제어문과 반환문은 실행시간 차이가 거의 없으므로 하나의 단위시간을 갖는 기본 명령문으로 취급

복잡도 = complexity
시간(속도) + 공간(저장)
빠르냐?
적게쓰냐?

알고리즘 성능 분석 표기법 1-57p
빅-오 표기법 @
Big-O(n)
---> 다음학기 알고리즘 




