3주차
 - 자료구조의 개념
	- 자료를 효율적으로 표현하고 저장하고 처리할 수 있도록 정리하는 것

자료의 형태에 따른 분류
 - 단순 구조
	- 정수, 실수, 문자, 문자열, 등의 기본 자료형

 - 선형 구조   까지만 이번학기에 배움
	- 자료들 사이의 관계가 1:1 관계 
	- 순차 리스트, 연결 리스트, 스택, 큐, 데크 등 

 - 비선형 구조
	- 자료들 사이의 관계가 1:다, 또는 다:다 관계
	- 트리, 그래프 등

 - 파일 구조
	- 서로 관련 있는 필드로 구성된 레코드의 집합인 파일에 대한 구조
	- 순차 파일, 색인 파일, 직접 파일 등

1, '1'. ''1''  의 차이	 
1/숫자, '1'/문자, ''1''/문자열
1 : 8비트로하면 0000 0001 이다 / 숫자
'1' : 31h(ascii) = 0011 0001 / 문자   	h = hexa dicimal = 16진수
''1''= ''1\0'' : 이건 \0이 들어감 끝에(문자열)(null 값)  0011 0001 0000 0000  / 문자열
3개 다 다름

2^10 = 1024 = 1k
2^20 = 1024k = 1M
2^30 = 1024M = 1G
2^40 = 1024G = 1T

4주차

2. 자료의 표현 : 수치 자료의 표현
10진수의 표현 시험에 나옴
+312 zone
1111   0011   1111    0001  1100  0010
  f      3      f      1    c(+)   2
+5312 zone
1111   0101   1111   0011   1111   0001  1100  0010
  f      5      f      3      f      1    c(+)   2
+5312 zone
1111   0101   1111   0011   1111   0001   1101  0010
  f      5      f      3      f      1    d(-)   2

팩형식
+312 pack
0011   0001   0010  1100
  3      1     2    c(+)
+5312 pack
0101   0011   0001   0010  1100
  5     3      1     2     c(+)
-5312 pack
0101   0011   0001   0010  1101
  5     3      1     2     d(+)

10진->2진수
2진수-> 8,10,16진수 바꾸는거

2진수
(1) 부호절대값: 최상위 비트를 1로 바꿔주면 부호 절대값임
(2) 1's 보수
(3) 2's 보수  -- 가장 많이 사용

+32 --> 2진수 0010 0000(2)
+31 --> 2진수 0001 1111(2)
-31  --> 2진수 1001 1111(2)  (부호절댓값)
+31 --> 0001 1111 = -31 1110 0000 1의보수  --> 1110 0001 2의보수 (+1 해준것) 이게 -31 이다

1의보수와 2의보수가 있는데 왜 2의보수를 사용할까
+-0은 없음
4비트 - 0~15, -8~7 까지

2진수 8,16진수 바꾸는거 알아두기
8진수
+31 = 00/011/111(2) = +37(8)
-31 = 11/100/001(2) = 341(8)      뒤에 (2), (8), (16) 꼭 쓰기
16진수
+31 = 0001/1111(2) = +1F(16)
-31 = 1110/0001(2) = E1(16)

5주차

@2진수 표현
- 부호 절댓값: 맨 왼쪽에 1, 0 바꾸는것
 : sign bit = msb(most significant bit)

- 1's 보수
- 2's 보수 ( +0, -0이 없기떄문 )

@실수 표현
213. -> 실수
213 -> 정수

int a = 213; 정수
float b = 213.; 실수

213. = 0.213 x 10^3

1 = 정수 int a = 1; @ 
1. = 실수 float d = 1. ; @
            double f = 1. ;
'1' = 문자 char b = '1' ;
''1'' = 문자열 char c[2] = ''1\0'' ; @ 1이 아니라 2로 한거는
	뒤에 NULL 값이 있음 문자열의 끝을 알려주기 때문 @

Flops = 슈퍼컴퓨터 성능 단위

C언어 기본 5대 자료형
int, char, float, double, void   @@ 5점짜리
long, short, byte, bool 는 기본자료형이 아님 편의상 만든거

<BCD>(Binary coded decimal)
 = 다른말로 8421 코드라고 부름
6비트를 사용하며, 상위 2비트의 존비트와 하위 4비트의 숫자 비트로 구성된다.
이진수 네 자리를 묶어 십진수 한 자리로 사용하는 기수법이다

<EBCDIC> - IBM 회사에서 만들음
8비트를 사용하며, 상위 4비트의 존 비트와 하위 4비트의 숫자 비트로 구성

<ASCII 코드>
7비트를 사용하며 상위 3비트의 존 비트와 하위 4비트(2진수 비트)의 숫자 비트로 구성된다.

@ 'A' = 41h = 0100 0001;
	h = hexa decimal(16)
@ 'a' = 61h = 0110 0001;
'B' = 42h = 0100 0010;
'b' = 62h = 
@ '1' = 31h = 0011 0001;

논리자료
- 논리값을 표현하기 위한 자료 형식
- 논리값
	- 참(True)와 거짓(False), 1과 0
- 1바이트를 사용하여 논리자료를 표현하는 방법
	- 방법3) 이게 C언어가 사용하는 방법
참 : 하나 이상의 비트를 1로 표시	00000001 or 00000100 …… 
거짓 : 전체 비트를 0으로 표시. 	00000000

- 포인터 자료
	- 메모리의 주소를 표현하기 위한 자료 형식
	- 변수의 주소나 메모리의 특정 위치에 
	  대한 주소를 저장하고 
주소연산하기 위해 사용
PC메모리에 원하는 값,위치(주소)저장가능
변수, 주소, 메모리 -> 포인터에 대한 얘기 메모리에 대한 위치

	a = 변수(메모리,주소)
	3 = 값(value)
int a = 3;  
	aㅁ 안에 3
	a 라는 주소에 3을 넣는것
int *a = 3;  
	aㅁ - ㅁ3 
	a가 가르키는 주소에 3을 넣는것
int **a = 3;
	aㅁ - ㅁ - ㅁ3  
	a가 가르키는 주소의 주소에 3을 넣는것
그림그리고 설명할수 있어야함 시험에 나옴 @@

6주차

메모리 = 주소, 변수
(address, variavble)
값(value)

문자열String 자료
- 여러 문자로 이루어진 문자의 그룹을 하나의 자료로 취급하여 메모리에 
  연속적으로 저장하는 자료 형식
가장 좋은방법은 포인터 사용하는것
공간을 적게쓰고 속도가 빠른것을 사용 - 포인터가 가장 효율적

자료의 추상화
- 뇌의 추상화 기능
   - 기억할 대상의 구별되는 특징만을 단순화하여 기억하는 기능
추상화, 요약화, 일반화

- 자료 추상화(Data Abstraction)
   - 처리할 자료, 연산, 자료형에 대한 추상화 표현

- 추상 자료형(ADT, Abstract Data Type)
   - 자료와 연산자의 특성을 논리적으로 추상화하여 정의한 자료형
- 추상화와 구체화
   - 추상화 – “무엇(what)인가?”를 논리적으로 정의
   - 구체화 – “어떻게(how) 할 것인가?”를 실제적으로 표현

- 알고리즘  @@@ 
   - 문제해결 방법을 추상화하여 단계적 절차를 논리적으로 기술해 놓은 명세서

알고리즘의 표현 방법의 종류
- 자연어를 이용한 서술적 표현 방법
- 순서도Flow chart를 이용한 도식화 표현 방법
- 프로그래밍 언어를 이용한 구체화 방법
- 가상코드Pseudo-code를 이용한 추상화 방법

순서도를 이용한 도식화 @@@ 1-41p
- 순서도의 예) 1부터 5까지의 합을 구하는 알고리즘

순서도 flowchart @@@
(1) 1부터 100까지 더하는
(2) 구구단
(3) 3+5 더하는

조건문
- 조건에 따라 실행할 명령문이 결정되는 선택적 제어구조를 만든다.
- if 문의 형식과 제어흐름

case 문 
- 여러 조건식 중에서 해당 조건을 찾아서 그에 대한 명령문을 수행

반복문  
- 일정한 명령을 반복 수행하는 루프(loop) 형태의 제어구조

알고리즘 성능 분석 방법
- 공간 복잡도
   - 알고리즘을 프로그램으로 실행하여 완료하기까지 필요한 총 저장 공간의 양
   - 공간 복잡도 = 고정 공간 + 가변 공간 

빅-오 표기법 @
- 알고리즘의 시간 복잡도를 나타내는 표기법이며, O(f(n))으로 나타낸다.
(예, 2n²-2n+2 > O(n^2)로 표기)

7주차

구조체 개념@@@
- 구조체도 배열처럼 여러 개의 데이터를 그룹으로 묶어서 하나의 자료형으로 정의하고 사용하는 자료형
- 배열은 같은 자료형만을 그룹으로 묶을 수 있지만, 구조체는 서로 다른 
  자료형을 그룹으로 묶을 수 있으므로 복잡한 자료 형태를 정의하는데 유용하게 사용됨
- 여러 자료형의 필드를 가지고 있는 레코드를 만들 때 구조체 사용함
- 필드,레코드, 파일의 개념

구조체 선언
- 여러 자료형의 변수들을 그룹으로 묶어서 하나의 자료형으로 선언
- 구조체이름, 자료형, 데이터 항목으로 구성

순차 자료구조의 개념
구현할 자료들을 논리적 순서로 메모리에 연속 저장하는 구현 방식

선형 리스트Linear List@
- 순서 리스트Ordered List
- 자료들 간에 순서를 갖는 리스트

3차원 배열의 물리적 저장 방법
- 3차원의 논리적 순서를 1차원의 물리적 순서로 변환하는 방법 사용
- 면 우선 순서 방법@
  - 3차원 배열의 첫 번째 인덱스인 면 번호를 기준으로 사용하는 방법
  - 원소의 위치 계산 방법 : α + {(iⅹnjⅹnk) + (jⅹnk) + k}ⅹℓ 
      면의 개수가 ni이고 행의 개수가 nj이고, 열의 개수가 nk 인 3차원 배열 A[ni][nj][nk],
      시작주소가 α이고 원소의 길이가 ℓ 일 때, i면 j행 k열 원소 즉, A[i][j][k]의 위치 

열 우선 순서 방법
- 3차원 배열의 마지막 인덱스인 열 번호를 기준으로 사용하는 방법
- 원소의 위치 계산 방법 : α + {(kⅹnjⅹni) + (jⅹni) + i}ⅹℓ 





BinarySerch - 이진검색
이진 검색은 정렬되어 있는 리스트에서 탐색 범위를 절반씩 좁혀가며 데이터를
탐색하는 말

시간복잡도&공간복잡도
시간 복잡도는 알고리즘을 프로그램으로 실행하여 완료하기까지의 총 소요시간.
공간 복잡도는 프로그램을 실행시킨 후 완료하는데 필요로 하는 저장 공간의 양.

문자열의 맨 끝에는 어떤 표시가 들어가 있는가?
(\0) NULL 값이 들어간다.

플로우차트
플로우 차트는 기호와 도형을 이용하여 흐름을 표시하는 차트이다.

소스파일/목적파일/실행파일
소스파일 - 사람은 이해하지만 기계는 아직 이해하지 못하는 레벨
목적파일 - 기계가 계산순서를 이해하는 수준의 프로그램을 생성해주는 레벨
실행파일 - 링크작업까지 완료후 프로그램의 결과물을 출력 시켜주는 레벨

Byte/Bit/Word
Bit - 0과 1 두 가지 상태만 저장할 수 있기 때문에 매우 단순한 정보만 표현할 수 있다.
Byte - 비트가 8개 모인 것을 뜻하며, 영어 한 문자를 표현할 수 있다.
Word - 특정 CPU에서 취급하는 명령어나 데이터 길이에 해당하는 비트 수.

부호 절대값 표현
부호만 양0, 음1 으로 나타내고 뒷자리는 절대값 크기를 사용한다.

1의 보수
2진수 정수 표현 중 음수를 표현할 때 2진수를 1의 보수로 변환하여 표현하는 방법

2의 보수
2진수 정수 표현 중 음수를 표현할 때 2진수를 2의 보수로 변환하여 표현하는 방법

부동 소수점 표현
부동소수점은 부호,지수,가수로 나뉘고, 부호는 양수와 음수를 표시하고, 지수는
2의 지수를 표시하며, 가수는 소수 이하 부분을 표시한다.

함수의 호출
 - 값에 의한 전달

순차 자료구조
구현 할 자료들을 논리적인 순서대로 메모리에 연속하여 저장하는 구현 방식

선형리스트(순차리스트)
자료들을 논리적인 순서대로 메모리에 연속해서 저장한 구현 방식 선형(순차)리스트는
순차 자료구조방식으로 구현한다.

연결 자료구조
각 원소에 저장되어 있는 다음 원소의 주소에 의해 순서가 연결되는 구현 방식

배열
같은 자료형을 가진 자료들을 나열하여 메모리에 연속으로 저장하여 만든 자료들의 그룹

포인터
메모리의 주소값을 저장하는 변수이며, 포인터 변수라고도 부른다.

구조체
배열처럼 여러 개의 데이터를 그룹으로 묶어서 하나의 자료형으로 정의하고 사용하는 자료형

