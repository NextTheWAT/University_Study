UNIX 기말 명령어 정리


chmod - 체인지 모드 @@@
chmod 777 file111 - 111 111 111 rwx rwx rwx 로 바꿔짐
chmod 666 file111 -  110110110 rw-rw-rw- 로 바꿔짐 
chmod 644 file111 - 110100100 rw- r-- r-- 로 바꿔짐 (제일 무난)
chmod 000 file111 - 아무도 읽거나 쓰거나 실행할수없다. --- --- ---
chomd u-x sum.exe = 자신이 exe을 실행할수없음
숫자 모드, 이진모드

444 = r--r--r--
474 = r--rwxr--
475= r--rwxr-x
464 = r--rw-r--
575 = r-xrwxr-x
755 = rwxr-xr-x
700 = rwx------


chmod u+x aaa.txt = 
u+x = ex) rwxrw-r-- 맨앞이 u 이다 나 자신, 나 자신에 x를 플러스하는것(실행)
u-x = ex) rw-rw-r-- 나 자신에 x를 빼는것
g+x = ex) rw-rwx-r-- 그룹에 x를 더하는것
ug+x = 
ugo+x = a+x = 같은 의미
ex) u-x-r-w 도 가능
기호모드 심볼모드


file aaa.txt = 무슨 파일인지 설명해줌
ex) file aaa(디렉토리파일) = 디렉토리 파일


sudo groupadd unix02  = unix02 라는 그룹을 만들음
cat /etc/group = 그룹을 볼수있음
sudo useradd aaa  = aaa 라는 유저를 만들옴



umask - 0002  맨왼쪽의 0갚은 옥탈값 002가 맞다
umask 044 - 바꾸면 0044로 바뀜
umask는 파일과 디렉토리의 접근권한을 초기로 바꿔주는 것


-----------vi grep.data-----------

UNIX 12345
unix+ 123
system admin
Network 5
root other sh
root2 other sh
1root other sh
1rjot other sh
sjyoun prof ksh
jongwon prof KHS
ROOT other chs
cshck07555 student ksh
CK08777 student bash
------------------------------------
grep UNIX grep.data 를 치면
UNIX 12345 - 가 나옴

grep unix grep.data
unix+ 123 - 이 나옴

grep -i unix grep.data 를 치면
UNIX 12345
unix+ 123
-i 는 대소문자 구분없이 검색 하는것

grep -ni unix grep.data
-n 는 줄 수다

grep -ni sh grep.data 를 치면
5:root other sh
6:1root other sh
7:1rjot other sh
8:sjyoun prof ksh
11:cshck07555 student ksh
12:CK08777 student bash
이렇게 나옴

grep -l sh grep*.data
grep*.data 하면 grep 이름이 들어간 모든 grep파일이름을 전부 검색

grep -l sh grep.data
grep.data 파일 이름을 검색

grep -v UNIX grep.data
-v는 UNIX 행을 제외한 나머지 행 출력

grep -nv UNIX grep.data
하면 UNIX를 제외한 나머지 행과 번호를 출력

grep -c 123 grep.data
패턴을 포함한 행(줄) 수가 몇개인지
2가 나옴

grep은 파일의 내용을 검색하는 명령어다

@
grep '^root' grep.data
root(문자열)로 시작하는 모든 단어를 찾아라
^ - 이 문자열로 시작하는 모든 행을 찾아라

grep 'sh$' grep.data
sh로 끝나는 모든 단어를 찾아라
$ - 이 문자열로 끝나는 모든 행을 찾아라

grep 'r..t' grep.data
r로 시작하고 t로 끝나는 r . . t 두글자가 들어가는것 아무거나
모든 행 출력

grep '[Pp]attern' grep.data
괄호안의 글자중 하나
Pattern 또는 pattern이 나타나는 라인 검색

grep '[^a~m]att' grep.data
att앞에 a부터 m까지 나오지 않는 라인 검색

grep 'ab*' grep.data
a다음에 b가 없거나 반복적으로 나타나는 라인 검색

@
egrep  [ 옵션 ] 패턴  파일명들
확장된 패턴 표현식 특수 문자 12p

+ 앞의 글자가 하나 이상 나온다.
'[a-z]+ark' - airpark, dark, bark, shark

? 없거나 한번 반복
'unix[0-9]?' - unix1, unix2, unix, unix9

x|y x나y중 하나가 나온다
'apple|orange' - apple 또는 orange

( | ) 문자열 그룹
'(1|2)+' 'search(es|ing)+'
1또는 2가 하나이상 searches 또는 searching


egrep '[78]+' grep.data@
grep.data 에서 7과 8이 하나이상 등장하는 패턴을 검색하는것
시험에 나오면 이런식으로 써야한다

egrep 'csh|bash' grep.data
csh 또는 bash 가 나오는 패턴 (둘다나옴)


fgrep  [ 옵션 ] 문자열  파일명들 
문자열 내의 모든 문자를 일반 문자로 해석

fgrep 'csh|bash' grep.data
fgrep으로 검색하면 csh또는 bash가 나오는게 아니라 
csh|bash를 문자로 생각해서 저것을 검색하는것

fgrep '[78]+' grep.data
이것도 [78]+ 를 문자로 생각해서 검색한다 패턴이 아니라


루트 다른것도 알아두기
. 은 현재 디렉토리에서 찾기 시작
~ 는 홈 디렉토리에서 찾기 시작

fine - 검색 조건도 알아두기 

find . aaa*.txt
aaa로 시작하는 모든 디렉토리를 찾아라

find . -type f
현재 디렉토리에서 파일만

find . -type d
현재 디렉토리에서 디렉토리만

find ~ . -type f
홈 디렉토리에서 모든 파일

find ~ . -type d | more
홈 디렉토리에서 디렉토리를 찾는것

find . -perm 755 | more
755인 파일을 찾는것

find . -perm 664 | more
664인 파일을 찾는것


find . -type b
블록장치 특수파일 찾기

find . -type c
문자장치 특수파일 찾기

find . -type s
소켓파일 찾기

find / -type b
루트에서 타입이 b인 파일찾기

find . -name aaa.txt
현재 디렉토리에서 이름이 aaa.txt 파일 찾기

find ~ -name aaa.txt
홈 디렉토리에서 이름이 aaa.txt 파일 찾기

find / -name aaa.txt
루트 디렉토리에서 이름이 aaa.txt 파일 찾기


fine . -mtime 1

fine . -mtime -1

fine ~ -mtime -1
현재부터 24시간전에 만들어진 파일

fine ~ -mtime 1
24시간 전부터 48전시간까지 만들어진 파일

fine ~ -mtime +1
홈 디렉토리에서 48시간 전 이후로 만들어진 파일

fine / -mtime +1
루트 디렉토리에서 48시간 전 이후로 만들어진 파일

-5면 24x5를 하면 나옴
-5는 5일전까지
5는 5일전부터 10일전까지
+5는 10일전 이후로

fine ~ -mtime -1 -name grep.dat
뭔지 알아두기


-newer : gerp.dat 파일 보다 나중에 수정된 파일 찾기

find ~ -newer grep.dat
최근에 만들어진 grep.dat 찾기

find ~ -perm 755
파일의 접근권한이 rwx r-x r-x 인 파일 찾기

find ~ -perm 644
파일의 접근권한이 rw- r-- r-- 인 파일 찾기


find ~ -perm 755 -a -type d
커미션이 755고 타입은 디렉토리고 -a는 엔드 조건이다
a- = and  a이면서 b

find ~ -perm 755 -o -type d
커미션이 755고 타입은 디렉토리고 -o는 엔드 조건이다
-o = or  a또는b

find ~ -perm 755 -o -mtime 1


-exec
find ~ -user $LOGNAME -exec rm {} \;
find ~ -user $LOGNAME -exec rm -i {} \;

-i - 물어보는것
-exec {} \;- 실행시켜라
rm - 지워라
$LOGNAME - 나
@@@


ps -e | more

ps -e 
유닉스에 떠 있는 시스템 프로세스

ps -f

@ps -ef
프로세스를 자세하게 확장값으로 보여줌

ps -a 
                     
ps -u

ps -x


-ex
-aux
이 두개를 가장 많이 사용함


프로세스 종료 시키기
kill
pkill


sleep 100
100초간 자기

sleep 100 &
sleep 200 &

& 터미널

kill 숫자
PID 숫자를 쓰면 그 프로세스가 죽음
ps를 쓰면 PID가 보임

kill -9 숫자
자식 프로세스까지 동시에 다 죽이는것

PID(부모) 를 죽이면
자식들은 다 죽어버린다
ps -f 를 쳐서 보면 PID, PPID 가 있음
PID가 본래 ID인데 PPID가 PID를 가지고있는 아이들은 부모가 따로있다


ps -ef | more  시험에 나옴@@@
프로세스 상황을 자세하게, 시스템 상태까지
한 페이지씩

ps -ef | grep bash@@@
grep 문서를 bash라는 문자열 또는 패턴으로 찾는것


find / -name passwd@@
찾아라 현재에서 패스워드를


kill 을 하면
Terminated 는 일부러 죽인것, 종료
Done 은 자동적으로 종료된것


sleep 600을 하고 컨+z 를 하면 포그라운드 작업을 중지시킨다
			종료가 아닌 정지 상태@@@

bg %번호 - 직업 번호가 지시하는 작업을 백그라운드 작업으로 전환시킨다
이렇게하면 sleep 600이 멈춰있던게 sleep 600 & 로 변환되면서 백그라운드로 다시 전환되서 실행됨

bg - 최근의 백그라운드 1개를 보여줌

fg %번호 - 포그라운드로 돌아감 다시 슬립상태로

nohup fine / -name passwd &    @@
nohup - 시간이 오래걸리는 프로세스를 로그아웃해도 계속 백그라운드로 프로세스를 진행시켜라

users - 사용자명 출력

who - 사용자의 정보를 출력

w - 사용자 정보, 현재 작업 정보를 출력

whoami - 자신이 누군지 출력해줌


root - 최고 관리자

su root - root의 디렉토리로 가는것
su - root = 홈 디렉토리를 변경하는것

su - 그냥 su만 치면 root로 전환됨
	다른 사용자로 전환하기



tar - 아카이브- 저장소, 보관소 - 압축파일
	파일을 묶어 하나로 만든 것 @@@

tar cvf txt.tar *.txt - 모든 txt파일을 txt.tar로 압축(아카이브)(저장소)(관리소)

tar cvf txt.tar . - 현재 디렉토리까지도 파일압축

tar tvf txt.tar - t는 보는것 , txt.tar의 파일에 어떤게 압축되어있는지 보는것

tar xvf txt.tar - 압축을 다시 푸는것

tar uvf aaa2.txt - aaa2를 터치로 시간 업데이트를 한 뒤
			 aaa2가 과거와 최신것 2개가 들어가있음
			 아카이브 업데이트 하기

tar rvf txt. s.txt - rvf는 새로 넣는것 s.txt를 추가 느낌


tvf - 아카이브의 생성확인, 목록 보기
cvf - 아카이브 파일 생성 
xvf - 아카이브 파일 압축풀기

rm *.txt - 모든 txt 파일 지우기

c - tar 파일 생성
t - tar 파일 목록 보기
x - tar 파일 풀기
f - 아카이브 파일이나 tape 장치 등 지정
v - 표준 출력으로 실행 내용 출력

jar 가 압축효율이 좋다 - 나중에 나오기도함
jar도 시험에 나올수도있지만 tar보다는 덜 중요함

compress 1.txt - 1.txt.Z 로 압축  @@@ 어떤 압축 파일명인지@
uncompress 1.txt - 원래 1.txt 파일명으로 돌아오고 압축풀기

zcat aaa2.txt.Z - 파일 내용보기



tar - jar - compress - gzip - zip - bzip2
bzip2 - gzip, zip에 비해 압축률은 높지만 속도는 약간 느림

jar
tar c0vf - 아카이브만 생성하기

====================================

rw-rw-rw-
I   G    O
나 그룹 다른사람
나는 읽고 쓰고 실행할수없고
그룹도 읽고 쓰고 실행할수없고
다른사람도 읽고 쓰고 실행할수없다

I - 나
G - 나 포함 그룹
O - 나와 그룹을 뺀 다른


r - 읽기 @
w - 쓰기 @
x - 실행하다 @ exe 파일 실행 등


기호모드 심볼모드
u = 나 자신
g = 나 포함 그룹
o = 나, 그룹 외의 다른
a = 전부


파일 종류@
- = 일반 (정규)파일
d = 디렉토리 파일
b = 블럭 단위로 읽고 쓰는 블럭 장치 특수 파일
c = 문자 단위로 읽고 쓰는 문자 장치 특수 파일
| = 기호적 링크
p = 파이프
s = 소켓


umask 정의도 알아두기 @@@

기본 접근권한을 출력하거나 변경
마스크 값
- 파일이나 디렉토리 생성시 부여하지 않을 권한 지정
- 이 값을 지정하면 지정한 마스크를 이용하여 기본 접근권한 지정
- 지정하지 않으면 현재 설정된 마스크값 출력



유닉스는 파일과 프로세스로 구성되어있다
파일은 디스크에 저장된 단위
그 파일이 메모리에 올라온것이 프로세스
실행중인 프로그램이 프로세스 라고 한다


프로세스@@
실행중인 프로그램


프로세스의 종류
데몬 - 유닉스 커널에 의해 실행되는 프로레스로 특정 서비스 제공
부모 - 자식 프로세스를 만드는 프로세스
자식 - 부모에 의해 생성된 프로세스
	 실행이 끝나면 부모 프로세스에 결과를 돌려주고 종료
고아 - 실행도중에 부모 프로세스가 종료된 프로세스
	 고아프로세스는 1번 프로세스를 새로운 부모로 가진다
좀비 - 부모프로세스가 종료처리를 하지 않은 프로세스	
	 종료가 되었음에도 할당된 시스템 자원이 회수되지 않은 상태

ps - process satatus(상태)
	
PID - process ID(식별자)

PPID - parent(부모)



mesg [ n｜y ] @@@
옵션 
- y : 메시지 수신을 허용
- n : 메시지 수신을 거부
ex) mesg n or y

































