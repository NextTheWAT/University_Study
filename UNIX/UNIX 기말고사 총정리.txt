UNIX 9주차 정리


접근 권한 @@@
기말 25점짜리

rw-rw-rw-
I   G    O
나 그룹 다른사람
나는 읽고 쓰고 실행할수없고
그룹도 읽고 쓰고 실행할수없고
다른사람도 읽고 쓰고 실행할수없다

I - 나
G - 나 포함 그룹
O - 나와 그룹을 뺀 다른

chmod - 체인지 모드 @@@
chmod 777 file111 - 111 111 111 rwx rwx rwx 로 바꿔짐
chmod 666 file111 -  110110110 rw-rw-rw- 로 바꿔짐 
chmod 644 file111 - 110100100 rw- r-- r-- 로 바꿔짐 (제일 무난)
chmod 000 file111 - 아무도 읽거나 쓰거나 실행할수없다. --- --- ---
chomd u-x sum.exe = 자신이 exe을 실행할수없음
숫자 모드, 이진모드

r - 읽기 @
w - 쓰기 @
x - 실행하다 @ exe 파일 실행 등

groups - 사용자 그룹 확인

chmod u+x aaa.txt = 
u+x = ex) rwxrw-r-- 맨앞이 u 이다 나 자신, 나 자신에 x를 플러스하는것(실행)
u-x = ex) rw-rw-r-- 나 자신에 x를 빼는것
g+x = ex) rw-rwx-r-- 그룹에 x를 더하는것
ug+x = 
ugo+x = a+x = 같은 의미
ex) u-x-r-w 도 가능

기호모드 심볼모드
u = 나 자신
g = 나 포함 그룹
o = 나, 그룹 외의 다른
a = 전부

file aaa.txt = 무슨 파일인지 설명해줌
ex) file aaa(디렉토리파일) = 디렉토리 파일

sudo groupadd unix02  = unix02 라는 그룹을 만들음
cat /etc/group = 그룹을 볼수있음
sudo useradd aaa  = aaa 라는 유저를 만들음

01. 파일의 속성
다중 사용자 시스템의 특징
- 여러 사람이 하나의 시스템 사용
- 다른 사람이 내 파일을 읽거나 수정, 삭제 할 수 없도록 보안 필요 @
- 다른 사용자의 무단 접근으로부터 자신의 파일을 보호하는 기능으로 파일에 접근 권한을
  부여하여 권한 만큼만 파일을 사용

파일의 속성
- 유닉스에서 파일을 관리하기 위해 저장하는 정보들
- ls –l 명령으로 파일 속성을 확인할 수 있음
- = 파일 종류 (-: 일반파일, d : 디렉토리)
rw-r--r-- = 파일을 읽고, 쓰고, 실행할 수 있는 접근 권한 표시

파일 종류
- = 일반 (정규)파일
d = 디렉토리 파일
b = 블럭 단위로 읽고 쓰는 블럭 장치 특수 파일
c = 문자 단위로 읽고 쓰는 문자 장치 특수 파일
| = 기호적 링크
p = 파이프
s = 소켓


02. 파일의 접근 권한

유닉스의 사용자 카테고리
- 소유자 
   - 일반적으로 파일을 생성한 사용자. 명령을 통해 변경할 수도 있음
- 그룹 
   - 파일과 동일한 그룹에 속한 사용자들. 
   - 파일이 속한 그룹?
     - 일반적으로 파일을 생성한 사용자의 기본 그룹
     - 상위 디렉토리에 특수한 권한(setgid)이 부여된 경우 다른 그룹으로 지정
     - 명령을 이용하여 변경 가능
- 기타 사용자
- 소유자나 그룹 카테고리에 속하지 않은 모든 사용자들

기본 권한 
- 읽기(r), 쓰기(w), 실행(x)
- 파일의 종류에 따라 의미 다름

문자의 의미
- r: 읽기 허가, w: 쓰기 허가, x: 실행 허가, -: 허가 취소
rw- r-- r--
rw- = 소유자
r-- = 그룹사용자
r-- = 기타사용자

chmod [옵션] 모드 파일명
자신이 소유한 파일의 사용 권한을 변경
- 옵션 
-   -R : 하위 디렉토리까지 모두 변경
모드
- 변경할 사용 권한 표시 
- 종류 : 기호 모드, 8진수 모드(2진수 모드)

u+w, u-x
g+x, g-wx
o=rwx, go-wx
a=rwx
+ = 허가권 부여 
- = 허가권 제거
= = 특정 사용자에게 허가권 지정 X 시험에 안나옴

u = 소유자
g = 그룹
o = 기타사용자
a = 모든 사용자(u+g+o)

r = 읽기
w = 쓰기
x = 실행


04. 숫자를 이용한 파일 접근 권한 변경

숫자 모드
- 숫자를 이용하여 접근 권한 표현
- 모든 카테고리의 접근 권한을 동시에 조정할 때 기호모드보다 편리
- 각 카테고리 별로 접근 권한을 하나의 8진수로 표현
- 3개의 8진수(2진수)를 사용하여 전체 접근 권한 표기
사용권한 - rwx r-x r-x
2진수 - 111 101 101
8진수 -  7    5    5

진법?
- 수를 표시하는 방법 중 하나
- 수를 표현하는데 0 ~ p-1까지 p개의 기호를 사용하면 p진법이라 한다
- 위치에 따라 값을 다르게 보는 위치적 기수법을 사용함

444 = r--r--r--
474 = r--rwxr--
475= r--rwxr-x
464 = r--rw-r--
575 = r-xrwxr-x
755 = rwxr-xr-x
700 = rwx------





UNIX 10주차 정리

파일유형 다시 나올수있다@ 파일종류

rwx rwx rwx 시험에 나옴@

u+w 나 u-x , go-wx 등등 사용하지만
o=rwx 는 사용하지않음@

u+w, g-w 이런식으로도 이어서 사용 가능

---여기까지 9주차 정리---
ch6

umask - 0002  맨왼쪽의 0갚은 옥탈값 002가 맞다
umask 044 - 바꾸면 0044로 바뀜
umask는 파일과 디렉토리의 접근권한을 초기로 바꿔주는 것

	        파일					기본 접근 허가권
실행할 수 없는 일반 파일은 		666
디렉토리						777

umask 정의도 알아두기 @@@

기본 접근권한을 출력하거나 변경
마스크 값
- 파일이나 디렉토리 생성시 부여하지 않을 권한 지정
- 이 값을 지정하면 지정한 마스크를 이용하여 기본 접근권한 지정
- 지정하지 않으면 현재 설정된 마스크값 출력

마스크
- 가리다 
- 사용 권한에서 허용하지 않을 값을 지정

마스크를 이용한 접근 권한 생성
- 기본사용 권한 XOR 마스크@ 
00이면 0, 11이면 0, 10,01 이면 1
같으면 0, 다르면 1

마스크 값	일반 파일 적용 결과	디렉토리 적용결과
002 		644 				755
077		600				700
027		640				750


---여기까지 ch6---

vi grep.data - 치고 밑에꺼 쓰면

UNIX 12345
unix+ 123
system admin
Network 5
root other sh
root2 other sh
1root other sh
1rjot other sh
sjyoun prof ksh
jongwon prof KHS
ROOT other chs
cshck07555 student ksh
CK08777 student bash


grep UNIX grep.data 를 치면
UNIX 12345 - 가 나옴
grep unix grep.data
unix+ 123 - 이 나옴

grep -i unix grep.data 를 치면
UNIX 12345
unix+ 123
-i 는 대소문자 구분없이 검색 하는것

grep -ni unix grep.data 를 치면
-n 는 줄 수다

grep -i sh grep.data 를 치면
5:root other sh
6:1root other sh
7:1rjot other sh
8:sjyoun prof ksh
11:cshck07555 student ksh
12:CK08777 student bash
이렇게 나옴
@
grep -l sh grep*.data
grep*.data 하면 grep 이름이 들어간 모든 grep파일이름을 전부 검색

grep -l sh grep.data
grep.data 파일 이름을 검색

grep -v UNIX grep.data
-v는 UNIX 행을 제외한 나머지 행 출력

grep -nv UNIX grep.data
하면 UNIX를 제외한 나머지 행과 번호를 출력

grep -c 123 grep.data
패턴을 포함한 행(줄) 수가 몇개인지
2가 나옴

grep은 파일의 내용을 검색하는 명령어다


-------------------------
@
grep '^root' grep.data
root(문자열)로 시작하는 모든 단어를 찾아라
^ - 이 문자열로 시작하는 모든 행을 찾아라

grep 'sh$' grep.data
sh로 끝나는 모든 단어를 찾아라
$ - 이 문자열로 끝나는 모든 행을 찾아라

grep 'r..t' grep.data
r로 시작하고 t로 끝나는 r . . t 두글자가 들어가는것 아무거나
모든 행 출력

grep '[Pp]attern' grep.data
괄호안의 글자중 하나
Pattern 또는 pattern이 나타나는 라인 검색

grep '[^a~m]att' grep.data
att앞에 a부터 m까지 나오지 않는 라인 검색

grep 'ab*' grep.data
a다음에 b가 없거나 반복적으로 나타나는 라인 검색

--------------------------
@
egrep  [ 옵션 ] 패턴  파일명들
확장된 패턴 표현식 특수 문자 12p

+ 앞의 글자가 하나 이상 나온다.
'[a-z]+ark' - airpark, dark, bark, shark

? 없거나 한번 반복
'unix[0-9]?' - unix1, unix2, unix, unix9

x|y x나y중 하나가 나온다
'apple|orange' - apple 또는 orange

( | ) 문자열 그룹
'(1|2)+' 'search(es|ing)+'
1또는 2가 하나이상 searches 또는 searching


egrep '[78]+' grep.data@
grep.data 에서 7과 8이 하나이상 등장하는 패턴을 검색하는것
시험에 나오면 이런식으로 써야한다

egrep 'csh|bash' grep.data
csh 또는 bash 가 나오는 패턴 (둘다나옴)

---------------------------------

fgrep  [ 옵션 ] 문자열  파일명들 
문자열 내의 모든 문자를 일반 문자로 해석

fgrep 'csh|bash' grep.data
fgrep으로 검색하면 csh또는 bash가 나오는게 아니라 
csh|bash를 문자로 생각해서 저것을 검색하는것

fgrep '[78]+' grep.data
이것도 [78]+ 를 문자로 생각해서 검색한다 패턴이 아니라

-----------------------------------

루트 다른것도 알아두기
. 은 현재 디렉토리에서 찾기 시작
~ 는 홈 디렉토리에서 찾기 시작

fine - 검색 조건도 알아두기 

find . aaa*.txt
aaa로 시작하는 모든 디렉토리를 찾아라

find . -type f
타입이 파일인것만 찾는것

find . -type f
현재 디렉토리에서 파일만

find . -type d
현재 디렉토리에서 디렉토리만

find ~ . -type f
홈 디렉토리에서 모든 파일

find ~ . -type d | more
홈 디렉토리에서 디렉토리를 찾는것

find . -perm 755 | more
755인 파일을 찾는것

find . -perm 664 | more
664인 파일을 찾는것





UNIX 11주차 정리 

유닉스는 키보드, 마우스 등 입력장치들을 파일로 본다

fine - 파일 찾기

find . -type d
현재 디렉토리에서 타입이 디렉토리인 파일 찾기

find ~ -type d
홈 디렉토리에서 타입이 디렉토리인 파일 찾기

find ~ -type d | more
more - 한페이지씩 출력해주기 

find . -type f
파일 찾는것

find . -type b
블록장치 특수파일 찾기

find . -type c
문자장치 특수파일 찾기

find . -type s
소켓파일 찾기

find / -type b
루트에서 타입이 b인 파일찾기

find . -name aaa.txt
현재 디렉토리에서 이름이 aaa.txt 파일 찾기

find ~ -name aaa.txt
홈 디렉토리에서 이름이 aaa.txt 파일 찾기

find / -name aaa.txt
루트 디렉토리에서 이름이 aaa.txt 파일 찾기


fine . -mtime 1

fine . -mtime -1


fine ~ -mtime -1
현재부터 24시간전에 만들어진 파일

fine ~ -mtime 1
24시간 전부터 48전시간까지 만들어진 파일

fine ~ -mtime +1
홈 디렉토리에서 48시간 전 이후로 만들어진 파일

fine / -mtime +1
루트 디렉토리에서 48시간 전 이후로 만들어진 파일

-5면 24x5를 하면 나옴
-5는 5일전까지
5는 5일전부터 10일전까지
+5는 10일전 이후로

fine ~ -mtime -1 -name grep.dat
뭔지 알아두기

-newer : gerp.dat 파일 보다 나중에 수정된 파일 찾기

find ~ -newer grep.dat
최근에 만들어진 grep.dat 찾기

find ~ -perm 755
파일의 접근권한이 rwx r-x r-x 인 파일 찾기

find ~ -perm 644
파일의 접근권한이 rw- r-- r-- 인 파일 찾기


find ~ -perm 755 -a -type d
커미션이 755고 타입은 디렉토리고 -a는  조건이다
a- = and  a이면서 b

find ~ -perm 755 -o -type d
커미션이 755고 타입은 디렉토리고 -o는 OR 조건이다
-o = or  a또는b

find ~ -perm 755 -o -mtime 1


-exec
find ~ -user $LOGNAME -exec rm {} \;
find ~ -user $LOGNAME -exec rm -i {} \;

-i - 물어보는것
-exec {} \;- 실행시켜라
rm - 지워라
$LOGNAME - 나
@@@


which ls
which date
which more

which - 명령어의 위치를 찾아서 실제로 어디있는지 찾아주는것



8장

유닉스는 파일과 프로세스로 구성되어있다
파일은 디스크에 저장된 단위
그 파일이 메모리에 올라온것이 프로세스
실행중인 프로그램이 프로세스 라고 한다

프로세스@@
실행중인 프로그램

종류
- 시스템 프로세스 : 유닉스 운영에 필요한 기능 수행
- 사용자 프로세스 : 사용자들이 실행시킨 프로세스

프로세스의 종류
데몬 - 유닉스 커널에 의해 실행되는 프로레스로 특정 서비스 제공
부모 - 자식 프로세스를 만드는 프로세스
자식 - 부모에 의해 생성된 프로세스
	 실행이 끝나면 부모 프로세스에 결과를 돌려주고 종료
고아 - 실행도중에 부모 프로세스가 종료된 프로세스
	 고아프로세스는 1번 프로세스를 새로운 부모로 가진다
좀비 - 부모프로세스가 종료처리를 하지 않은 프로세스	
	 종료가 되었음에도 할당된 시스템 자원이 회수되지 않은 상태

ps - process satatus(상태)
	
PID - process ID(식별자)

PPID - parent(부모)


ps -e | more

ps -e 
유닉스에 떠 있는 시스템 프로세스

ps -f

@ps -ef
프로세스를 자세하게 확장값으로 보여줌

ps -a 
                     
ps -u

ps -x


-ex
-aux
이 두개를 가장 많이 사용함


ps [ 옵션 ]

process status
프로세스 정보를 출력
- PID, 터미널, CPU 시간, 명령어

옵션
-e : 시스템에 있는 모든 프로세스 정보 출력
-f : 프로세스에 대한 자세한 정보 출력
-u UID : 특정 사용자에 대한 모든 프로세스 출력

pgrep 필요없음 솔라리스 전용


프로세스 종료 시키기
kill
pkill

sleep 100
100초간 자기

sleep 100 &
sleep 200 &

& 터미널

kill 숫자
PID 숫자를 쓰면 그 프로세스가 죽음
ps를 쓰면 PID가 보임

kill -9 숫자
자식 프로세스까지 동시에 다 죽이는것

PID(부모) 를 죽이면
자식들은 다 죽어버린다
ps -f 를 쳐서 보면 PID, PPID 가 있음
PID가 본래 ID인데 PPID가 PID를 가지고있는 아이들은 부모가 따로있다

- PID로 지정한 프로세스에게 시그널을 보냄
- 시그널을 받은 프로세스는 지정된 동작을 수행
- 시그널을 지정하지 않으면 프로세스를 종료시키는 15 번 시그널(SIGTERM) 을 보냄
- 사용자의 프로세스만 종료시킬 수 있음
- 관리자(root)는 모든 프로세스를 종료시킬 수 있음

prstat, top 솔라리스




UNIX 12주차 정리


6~10장까지 시험 범위


ps -ef | more  시험에 나옴@@@
프로세스 상황을 자세하게, 시스템 상태까지
한 페이지씩

ps -ef | grep bash@@@
grep 문서를 bash라는 문자열 또는 패턴으로 찾는것


시그널
프로세스에게 보내는 신호

시그널 번호 2 - SIGINT - 보통 Ctrl-c에 의해 발생

sleep 100
명령어를 입력할수없는 상태

sleep 100 &

& - 백 그라운드

jobs - 시스템이 실행중인지 알수있음

  빈칸은 옛날것
- 는 가장 이전에 
+ 는 가장 최근   -- sleep 100 & 를 치면 알수있음

find / -name passwd@@
찾아라 현재에서 패스워드를

포그라운드 백그라운드 시험에 나옴

kill 을 하면
Terminated 는 일부러 죽인것, 종료
Done 은 자동적으로 종료된것

sleep 600을 하고 컨+z 를 하면 포그라운드 작업을 중지시킨다
			종료가 아닌 정지 상태@@@

bg %번호 - 직업 번호가 지시하는 작업을 백그라운드 작업으로 전환시킨다
이렇게하면 sleep 600이 멈춰있던게 sleep 600 & 로 변환되면서 백그라운드로 다시 전환되서 실행됨

bg - 최근의 백그라운드 1개를 보여줌

fg %번호 - 포그라운드로 돌아감 다시 슬립상태로

nohup fine / -name passwd &    @@
nohup - 시간이 오래걸리는 프로세스를 로그아웃해도 계속 백그라운드로 프로세스를 진행시켜라

users - 사용자명 출력

who - 사용자의 정보를 출력

w - 사용자 정보, 현재 작업 정보를 출력

whoami - 자신이 누군지 출력해줌


root - 최고 관리자

su root - root의 디렉토리로 가는것
su - root = 홈 디렉토리를 변경하는것

su - 그냥 su만 치면 root로 전환됨
	다른 사용자로 전환하기


ch 9

tar - 아카이브- 저장소, 보관소 - 압축파일
	파일을 묶어 하나로 만든 것 @@@

tar cvf txt.tar *.txt - 모든 txt파일을 txt.tar로 압축(아카이브)(저장소)(관리소)

tar cvf txt.tar . - 현재 디렉토리까지도 파일압축

tar tvf txt.tar - t는 보는것 , txt.tar의 파일에 어떤게 압축되어있는지 보는것

tar xvf txt.tar - 압축을 다시 푸는것

tar uvf aaa2.txt - aaa2를 터치로 시간 업데이트를 한 뒤
			 aaa2가 과거와 최신것 2개가 들어가있음
			 아카이브 업데이트 하기

tar rvf txt. s.txt - rvf는 새로 넣는것 s.txt를 추가 느낌


tvf - 아카이브의 생성확인, 목록 보기
cvf - 아카이브 파일 생성 
xvf - 아카이브 파일 압축풀기

rm *.txt - 모든 txt 파일 지우기

c - tar 파일 생성
t - tar 파일 목록 보기
x - tar 파일 풀기
f - 아카이브 파일이나 tape 장치 등 지정
v - 표준 출력으로 실행 내용 출력

jar 가 압축효율이 좋다 - 나중에 나오기도함
jar도 시험에 나올수도있지만 tar보다는 덜 중요함

compress 1.txt - 1.txt.Z 로 압축  @@@ 어떤 압축 파일명인지@
uncompress 1.txt - 원래 1.txt 파일명으로 돌아오고 압축풀기

zcat aaa2.txt.Z - 파일 내용보기




UNIX 13주차 정리

6장이 시험범위중 제일 많이 차지할듯
6~11장 시험범위

tar - jar - compress - gzip - zip - bzip2
bzip2 - gzip, zip에 비해 압축률은 높지만 속도는 약간 느림

jar
tar c0vf - 아카이브만 생성하기



10장


write 사용자명 [ 단말기명 ]
- 로그인한 사용자에게 메시지를 보낸다
- 전송 : Ctrl + D


wall [ 파일명 ]
- 시스템에 로그인하고 있는 모든 사용자에게 메시지를 보낸다
- 전체 사용자에게 긴급하게 전달할 메시지가 있을 경우에 사용


talk 사용자 주소 [ 단말기명 ]
- 다른 사용자와 1:1로 대화
- 같은 시스템 뿐 아니라 다른 시스템의 사용자와도 대화가 가능


mesg [ n｜y ] @@@
옵션 
- y : 메시지 수신을 허용
- n : 메시지 수신을 거부
ex) mesg n or y


이메일 보내기 : mailx
메일서버
- 메일 서비스를 제공하는 프로그램 또는 그 프로그램이 실행중인 시스템
- POP3, SMTP


mailx [ 옵션 ] [ 이메일 주소 ]
기능
- 명령어 라인에서 메일 전송
- 메일 수신과 읽기, 저장, 삭제, 출력
- 메일 알리아스 생성과 사용


내부 명령
d [메일번호] - 지정한 메일 삭제. 번호를 지정하지 않으면 마지막 읽은 메일 삭제
r - 답장 보내기
x - 읽은 메일을 저장하지 않고 종료

hostname
현재 시스템의 호스트 명을 출력

hostname - 서버이름을 출력(호스트명?)


nslookup [ 도메인명 ]
DNS 서버와 대화식으로 도메인 명이나 IP 주소를 질의하고 응답을 받는다


ping hostname 또는 IP 주소
시스템이 네트워크를 통해 연결되는지 확인
- 주의 ! 최근에는 보안상 이유로 ping 명령의 응답을 제한하는 호스트나 네트워크 장비들이 많음!!
ex)
ping www.hanbit.co.kr
www.hanbit.ac.kr is alive - 서버가 살아있다? 라는 뜻


finger [ 사용자명｜사용자명@호스트명｜@호스트명 ]
로그인한 사용자 정보 출력
- who의 결과에 덧붙여 사용자의 완전한 이름(/etc/passwd), 호스트명 등 추가 정보를 출력


ftp 호스트명
file transfer protocol
- 인터넷을 통해 다른 서버에 파일을 업로드/다운로드 할 때 사용하는 명령

Anonymous ftp
- 해당 서버에 계정이 없어도 파일을 송수신 할 수 있도록 한 ftp 서버
Anonymous - 이름이 없는



11장


wc [ 옵션 ] 파일명 (워드카운트) 글자 수를 카운트하는것 @@@
파일의 라인수, 단어수, 문자수 출력
옵션
@ -c : 바이트 수 (글자 수)
@ -m : 문자수
-C : -m과 동일
-l : 라인 수
-w : 화이트 스페이스나 새로운 행으로 구분된 단어의 수


sort [ 옵션 ] 파일명
텍스트 파일의 내용을 지정한 방법으로 정렬하여 화면에 출력
사용 예 - 외울필요 없음
-d - 사전식
-r - 역순

sort +1 -2 test_sort2 다음시간에 중요@




UNIX 14주차 정리

기호모드, 2진모드 많이나옴


wc

-c - 바이트 수
-l - 라인 수


sort (정렬)

test_sort1
아스키코드 기준

sort -k 2 test_sort2
2번째 필드 기준 내림차순으로 정렬

sort -k 2 test_sort2
4번째 필드 기준 내림차순으로 정렬
점수에 100점이 있는데 49점보다 상위에있는 이유는 49보다 1이 더 작게 인식하기 떄문

sort -n -k 4 test_sort2
4번쨰 필드 기준 100점이 맨 밑으로 감

sort -n -k 4 -o sort.out test_sort2
-o = 원래 파일을 정렬의 결과를 따로 저장하는것

-k 2 = +1 같은 의미
-n = 숫자의 크기로 정렬

-f
-k
-r 
-o
-n
알아두기

2차 정렬x

sort -t : /etc/passwd | more
필드 구분자를 : 로 지정 
패스워드를 구분하는 파일


split [ 옵션 ] [ 파일명 ] @@
큰 파일을 일정한 크기의 여러 개 작은 파일로 분할
-b n : 크기가 n 바이트인 파일로 분할
-n : n줄씩 분할
옵션을 지정하지 않으면 1000줄씩 분할

cp etc/services test_split
test_split으로 복사

split -30 test_split @@
30줄씩 잘라서 저장
큰 파일을 줄로 자르는것

wc -l x*
x로 시작한 모든 파일을 보여주기

split -b 512 test_split
test_split 파일을 512바이트씩 잘라서 저장


uniq (중복 삭제)
파일 또는 표준입력으로 입력된 내용 중 중복된 내용의 줄이 연속으로 있으면 하나만 남기고 삭제


uniq test_uniq
중복되는 내용은 하나를 없애고 하나만 나옴
2개중 1개 / 중복 삭제

-u : 중복되지 않는 행만 출력
-c : 각 행의 처음에 중복 횟수를 출력
-d : 중복된 행 중 한 행만 출력, 원래 유일한 행은 출력 안 함

sort test_uniq | uniq @@@
정렬을 한뒤에 중복 삭제
sort test_uniq 의 결과값이 오른쪽에 있는것에 입력값을 주는것 - 파이프

uniq -u test_uniq - 중복없는 행 보기
aaaaa
ccc 이렇게 나옴

uniq -d test_uniq - 중복된 것만 보기


cut
파일의 각 열에서 선택된 필드를 잘라냄

-c 리스트 : 각 열에서 잘라낼 문자 위치 지정
-f 필드번호 : 지정한 필드 잘라냄
-d 문자 : 필드 구분자 (델리미터)


cut -c 5-8 test_cut
5-8 - 왼쪽부터 5~8비트를 오려내는것

cut -f 2,3 test_cut
2,3번째 열 필드 출력

cut -d: -f1 /etc/passwd | more

cut -d' ' -f 2 test_cut
2번째 필드 ' '로 구분하는것


paste
지정한 파일의 내용을 붙임

-s : 파일 수평 붙이기
-d문자 : 필드 구분자


paste test_paste1 test_paste2
paste1 과 paste2 를 붙이는것
반대로도 가능

paste -s test_paste1
수평으로 바뀜

paste -d: test_paste1 test_paste2
붙일때 : 가 중간에 붙음


dd는 시험범위 아님x
