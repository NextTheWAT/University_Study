데이터베이스 2주차


DBMS - 데이터베이스 관리 시스템


파일 시스템
- 전통적인 파일 중심의 정보 처리 시스템
- 응용 프로그램별로 필요한 데이터를 별도의 파일로 관리
- 응용 프로그래머가 파일의 논리적인 구조 뿐만 아니라 물리적인 구조까지 정확히 파악해야 함


파일 시스템의 문제점 : 데이터 중복성
- Data redundancy
- 같은 데이터가 여러 파일에 중복 저장됨
	- 저장 공간의 낭비
	- 데이터 일관성 저해
	- 데이터 무결성 저해


데이터 일관성 저해
- @데이터 일관성(data consistency)
	- @여러 데이터가 동일 사실을 나타낸다면 그 내용이 모두 똑같아야 함
- @데이터가 중복되면 일관성 유지가 어려움
	-> 데이터 불일치(data inconsistency)


데이터 무결성 저해
- @데이터 무결성(data integrity)
	- @DB에 저장된 데이터 값과 현실 세계의 실제값이 일치하는 @정확성(accuracy)
- @데이터가 중복되면 데이터에 대한 제어가 분산되어 데이터의 정확성을 유지하기 어려워짐

@일관성은 유지될 수 있어도 무결성은 유지되지 못 할수도 있다.


데이터 종속성
- Data dependency
- 응용 프로그램과 데이터 간의 상호 의존관계
- 데이터의 구성 방법이나 접근 방법이 변경되면 관련 응용 프로그램도 동시에 변경해야 됨
- 응용 프로그램 관리가 곤란해짐

Ex) 10년전 시스템을 만들었던 회사를 찾아가서 만든사람한테 부탁해야함
	이런 특징을 종속성이라고 한다
	시스템 관리가 어려움


동시 공용, 보완, 회복 기능 부족
- 동시 공용 불가
	- 응용 프로그램 하나가 사용 중인 파일을 다른 응용 프로그램이 접근하여 사용할 수 없음
- 보안성(security) 저해
	- 파일 단위 권한 부여 및 접근 통제
	- 중복된 파일의 보안을 같은 수준으로 유지하기 어려움 
- 회복 어려움
	- 응용 프로그램이 파일을 사용하는 도중 장애 발생 시 데이터를 일관된 상태로 회복 어려움
Ex) 은행에서 돈을 보냈는데 정전(장애)가 발생하여 돈은 빠지고 보내지지 않음
	이런 장애가 발생했을때도 문제가 있으면 안됨
	DBMS에서는 가능한데 파일시스템에서는 가능하지않음


응용 프로그램 개발의 어려움
- 파일 접근 및 데이터 관리의 모든 작업을 응용 프로그램이 담당해야 함
	- 데이터 읽기, 삽입, 삭제...


DBMS
데이터베이스 관리 시스템


DBMS
- 데이터베이스 관리 시스템
	- Database Management System
- 응용 프로그램과 데이터 사이의 중재자로서 모든 응용 프로그램(사용자)들이 데이터베이스를
  공용할 수 있게 관리해주는 범용 소프트웨어 시스템
	- 데이터 베이스의 구성, 접근방법, 관리유지

DBMS
- 데이터베이스 관리 시스템(Database Management System)
- 파일 시스템의 문제(중복성, 종속성)를 해결하기 위해 제시된 소프트웨어
- 조직에 필요한 데이터를 데이터베이스에 통합하여 저장하고 관리함
- 응용 프로그램과 데이터 사이의 중재자로서 모든 응용 프로그램(사용자)들이
  데이터베이스를 공용할 수 있게 관리해주는 범용 소프트웨어 시스템
	- 데이터베이스의 구성, 접근방법, 관리유지

DBMS가 중간에서 @중재자 역할을 해서 DB를 관리


DBMS와 응용 프로그램
- 응용 프로그램
	- 원하는 데이터와 처리 작업을 명세하여 DBMS에 요청
- DBMS
	- DB를 종합적으로 조직해서 접근하고 전체적으로 통제
	- 응용 프로그램의 요구를 책임지고 실행시킴


DBMS의 필수 기능
- 정의(definition) 기능
	- 하나의 저장 구조로 여러 사용자의 요구를 지원 할 수 있도록
	  데이터를 조직하는 기능
- 조작(manipulation) 기능
	- 사용자와 데이터베이스 간의 인터페이스를 위한 수단;
	  체계적 데이터베이스 접근 및 조작
		- 삽입, 삭제, 수정, 검색
- 제어(control) 기능
	- 데이터의 정확성과 보안성을 유지하는 기능
		- 무결성 유지, 보안, 권한 검사, 병행수행 제어, 회복

@정의, @조작, @제어
조작에서는 - 삽입, 삭제, 수정, 검색
		- 이 중 검색이 제일 많이 사용됨


DBMS의 장점
- 데이터 중복(redundancy)의 최소화
	- DB는 데이터를 통합해서 구성함으로써 중복을 통제함 : controlled redundancy
- 데이터의 동시 공용(sharing)
	- 같은 내용의 데이터를 여러 가지 구조로 지원해줌
- 데이터 일관성(consistency) 유지
	- 데이터 중복을 제어하고 통제함으로써 일관성 유지
- 데이터 무결성(integrity) 유지
	- DB가 접근 처리될 때마다 제어 기능을 통해 유효성 검사
- 데이터 보안(security) 보장
	- 정당한 사용자, 허용된 데이터 및 연산 등을 확인 검사 
- 표준화(standardization) 용이
	- 제어 기능을 통해 데이터의 형식, 내용, 처리 방식, 문서화 양식 등 표준화
- 장애 발생 시 회복 가능
	- 데이터 일관성과 무결성을 유지하면서 장애발생 이전 상태로 복구
- 응용 프로그램 개발 비용 감소
	- 데이터에 대한 모든 관리를 DBMS가 담당 -> 개발비용 ↓
	- DB구조가 변경되어도 응용 프로그램 변경할 필요 없음 -> 유지보수 비용 ↓


DBMS의 단점
- 운영비 증대
	- DBMS 가격, 메모리, CPU...
- 복잡한 백업(backUp)과 회복(recovery)
	- 장애 발생 시 저확한 이유 및 상태 파악 어려움
- 시스템의 취약성
	- 데이터의 중앙 집중 관리로 읺애 DB나 DBMS에 장애가 발생하면 전체 시스템의 업무 처리중단
		-> 시스템 신뢰성 및 가용성 저해


데이터베이스 시스템
- 데이터를 데이터베이스로 저장 관리하여 조직에 필요한 정보를 생성해주는 시스템
- 구성요소
	- 데이터베이스
	- 데이터 언어
	- 사용자
	- 데이터베이스 관리자
	- DBMS
	- 데이터베이스 컴퓨터(하드웨어)


데이터베이스의 개념적 구성요소
- 데이터베이스 = {개체, 관계}


개체(Entity)
- 데이터베이스에 표현하려는 유/무형의 객체(object)
- 개념이나 정보의 단위
	- 예 : 학생, 교수, 학과
- 하나 이상의 속성(attribute)으로 구성
	- 속성 : 개체의 특성이나 상태를 기술
	- 예1 : 학생(학번, 이름, 학과)
	- 예2 : 교수(교수번호, 이름, 학과)

Ex) 학생 - 개체
	(학번, 이름, 학과) - 속성


관계(Relationship)
- 개체 집합과 개체 집합 사이의 관계
	- 예 : 학생과 고수 사이의 지도 관계
- 데이터베이스를 접근할 때 사용하는 중요한 도구
	- "학번이 1234인 학생의 지도교수를 검색하라."

데이터베이스를 정의한다는 - @개체, @속성, @관계 이렇게 구성된다.


@스키마(schema)
- 데이터베이스의 논리적 정의
	- 데이터 구조와 제약조건을 정의한 것
	- @개체, @속성, @관계, @제약조건 등 포함
제약조건
	Ex) 나이는 0~200사이의 값을 가져야함
		이 밖의 값은 입력할 수 없게 만들어야함
- @인스턴스(instance)
	- 정의된 스키마에 따라 DB에 실제로 저장된 값
스키마는 논리적인 구조에 대한 정의 다


3단계 데이터베이스 구조
- DB를 쉽게 이해하고 이용할 수 있도록, 하나의 DB를 관점에 따라 세 단계로 나누어
  정의하고 이들 간의 관계를 정립합
	- 외부 단계(external level)
		- 데이터를 이용하는 개별 사용자의 관점; @외부 스키마
	- 개념 단게(conceptual level)
		- 개별 사용자의 관점이 종합된 기관 전체의 관점; @개념 스키마
	- 내부 단계(internal level)
		- 물리적 저장장치의 관점; @내부 스키마


외부 스키마
- 개별 사용자 관점에서 정의한 데이터베이스 스키마
- 개별 사용자나 응용 프로그램에 관련된 개체와 관계만을 포함
- 하나의 데이터베이스 시스템에는 여러 개의 외부 스키마가 존재
- 전체 데이터베이스의 한 논리적인 부분 : 서브 스키마(sub schema)


개념 스키마 = 스키마
- 조직 전체의 관점에서 정의한 데이터베이스 스키마
- 모든 응용이나 사용자들이 필요로 하는 데이터를 통합한 조직 전체의 스키마
- 개체, 관계, 제약조건 포함
- 관리에 필수적인 DB접근 권한, 보안정책, 무결성, 규칙에 대한 정의도 포함
- 하나의 DB 시스템에는 하나의 개념 스키마
- 이 개념 스키마를 단순히 @스키마(schema)라고도 함


내부 스키마
- 저장장치 관점에서 정의한 데이터베이스 스키마
- 개념 스키마에 대한 저장구조를 정의
- 레코드의 구조, 필드 크기, 인덱스 유무, 레코드의 물리적 순서 등 
- 하나의 DB 시스템에는 하나의 내부 스키마


3단계 데이터베이스 구조 - 예
외부 단계(사용자 관점) - 고객번호
개념 단계(조직 전체 관점) - 번호(나머지 속성들도 보임)
					실제 저장장치에 어떻게 저장되는지 모름(몰라도 됨)
내부 단계(저장 장치 관점) - 번호(필드이름, 필드 크기, OFFSET, 인덱스 등)
					실제 저장장치에 어떻게 저장할 것 인지.


스키마 간의 매핑
- 실제 데이터는 물리적 저장 장치에 저장된 데이터베이스에 존재
- 사용자가 자신의 외부 스키마를 통해 원하는 데이터를 얻으려면
  내부 스키마에 따라 저장된 데이터베이스에 접근해야 함
- 3가지 스키마 사이에는 유기적인 대응 관계(매핑; mapping; 사상)가 성립해야 함
- DBMS는 3단계 스키마가 있는 모든 개체, 속성 간의 대응 관계를 알아야만
  응용 프로그램의 DB접근을 지원할 수 있음


데이터 독립성
- Data Independency
- 데이터의 논리적/물리적 구조가 변경되더라도
  응용 프로그램에 영향을 미치지 않는 특성
	- 하위 스키마를 변경하더라도 상위 스키마가 영향을 받지 않는 특성 
스키마끼리 맵핑관계를 유지하기 때문에 하위 스키마가 바뀌어도 상관없다
맵핑관계를 바꿔주기 떄문에?
- 데이터베이스를 3단계 구조로 나누고 단계별로 스키마를 유지하며 스키마 사이의
  대응 관계를 정의하는 궁극적인 목적
- 논리적(logical) 데이터 독립성
- 물리적(physical) 데이터 독립성


데이터 독립성 : 스키마 간의 매핑

외부 단계 (사용자 관점)		외부 스키마1, 외부 스키마2...
						↓		↙
					외부/개념 사상(논리적 데이터 독립성)		
						↓
개념 단계 (조직 전체 관점)	개념 스키마	
						↓
					개념/내부 사상(물리적 데이터 독립성)
						↓
내부 단계 (저장 장치 관점)	내부 스키마


시스템 데이터베이스
- 일반 사용자가 아닌 시스템이 사용하는 DB <-> 사용자 데이터베이스
- 데이터 사전(data dictionary)
	- 시스템 카탈로그(catalog)
	- DB에 저장되는 데이터에 관한 정보를 저장
		- 메타 데이터(metadata): 데이터에 대한 데이터
메타 데이터 - Ex) 사진의 데이터파일에서
			- 메인 데이터는 이미지 자체
			- 며칠, 몇시, 해상도, 카메라의 이름, 위치 등등 이 메타 데이터
			- 메인이 아니지만 부가적으로 존재하는 데이터
		- 3가지 스키마, 스키마 간의 매핑 정보
	- DBMS가 스스로 생성/유지; 일반 사용자는 검색만 가능
- 데이터 디렉토리(data directory)
	- DB의 데이터를 실제 접근하는데 필요한 위치 정보 관리; 시스템만 접근 가능


데이터베이스 사용자
- 사용자
	- 데이터베이스 관리자
		- 데이터베이스 시스템을 운영하고 관리한다.
	- 최종 사용자 = 일반 사용자
		- 데이터베이스에 접근하여 데이터를 조작한다.
	- 응용 프로그래머
		- 데이터 언어를 삽입하여 응용 프로그램을 작성한다.


사용자
- 일반 사용자(최종 사용자; end user)
	- 주로 DML을 통해서 DB에 접근
	- 데이터의 삽입, 삭제, 수정, 검색
- 응용 프로그래머(application programmer)
	- 응용 프로그램(프로그래밍 언어 + DML)을 통해서 DB에 접근
- DB 관리자(database administrator; DBA)
	- DDL과 DCL을 통해 DB를 정의하고 제어하는 사람; DB 시스템을 운영/관리


DBA 업무 (중요x)
- DB 설계와 운영
	- DB의 구성요소를 결정: 개체, 속성, 관계 선정
	- DB 스키마 정의
	- 물리적 저장 구조와 접근 방법 결정
	- 보안 및 권한부여 정책, 유효성 검사 방법 수립
	- 백업(backup), 회복(recovery) 절차의 수립
	- DB의 무결성 유지 대책 수립
	- 성능 향상과 새로운 요구에 대응한 DB의 재구성
	- 시스템 데이터베이스 관리
- 시스템 감시(monitoring) 및 성능 분석
	- 자원의 이용도, 병목현상(bottleneck), 장비 및 시스템 성능 감시
	- 사용자 요구의 변화, 데이터 이용 추세, 각종 통계의 종합 분석
	- DB 재구성
- 행정 및 불평 해결
	- 데이터의 표현과 시스템의 문서화에 표준 설정; 사용자의 요구 및 불평
	  해결


데이터 언어


데이터 언어
- Data Language
- 데이터베이스를 정의, 조작, 제어하기 위한 DBMS와의 통신 수단
	- 데이터 정의어(DDL : Data Definition Language)
		- 스키마를 정의하거나, 수정 또는 삭제하기 위해서 사용한다.
	- 데이터 조작어(DML : Data Manipulation Language)
		- 데이터의 삽입, 삭제, 수정, 검색등의 처리를 요구하기 위해서 사용한다.
	- 데이터 제어어(DCL : Data Control Language)
		- 내부적으로 필요한 규칙이나 기법을 정의하기 위해서 사용한다.


데이터 제어어 
• 사용 목적
	– 무결성(integrity): 정확하고 유효한 데이터만 유지
	– 보안(security)
▪ 허가 받지 않은 사용자: 데이터 접근 차단
▪ 허가된 사용자: 권한이 있는 데이터에만 접근 허용
	– 회복(recovery): 장애가 발생해도 데이터 일관성 유지
	– 병행 수행(concurrency; 동시성 제어): 데이터 동시 공
	   용 지원


DBMS


DBMS의 구성

데이터베이스 관리자		최종 사용자		응용 프로그래머
		|				|				   |
	데이터 정의어		데이터 조작어		응용 프로그램
		|				|				| -------------------
	DDL 컴파일러		DML 컴파일러	<-----DML 프리 컴파일러	|
		|				|							|
		|			런타임 데이터베이스 처리기				| 질의 처리기
		|				|							|
		|				|	<------트랜잭션 관리자			|
		|				|------------------------------------------------
		|---------------> 저장 데이터 관리자						|
						|------------------------------------------------	데이터베이스 관리 시스템
					데이터 사전, 데이터베이스

트랜잭션 Ex) 은행의 입출금의 수행한 작업의 단위

질의 처리기
- 사용자의 데이터를 처리 요구를 해석/처리
- DDL 컴파일러
	- DDL로 작성된 스키마 정의 해석
	- 저장 데이터 관리자의 도움을 받아 새로운 DB 구축
	- 스키자 정의를 데이터 사전에 저장
- DML 컴파일러
	- DML로 작성된 데이터 처리 요구를 분석하여 런타임 DB 처리기가 이해할 수 있도록 해석


질의 처리기
• DML 프리 컴파일러
	– 응용 프로그램에 삽입된 DML을 추출하여
	   DML 컴파일러에 전달
• 런타임 DB 처리기
	– 저장 데이터 관리자를 통해 DB에 접근
	– DML 컴파일러로부터 전달받은 데이터 처리
	   요구를 DB에서 실제로 실행
• 트랜잭션 관리자
	– 사용자의 접근 권한의 유효성 검사, 무결성
	   제약조건 위반 여부 확인, 회복/병행 수행


저장 데이터 관리자
• 디스크에 저장된 DB와 데이터 사전 관리, 
   실제로 접근하는 역할
• 운영체제의 도움을 받아 접근 수행


정리
- DBMS란 무엇인가?
	- 왜 필요한가?
	- 필수기능은?
- 데이터베이스 시스템은 어떻게 구성되는가?
	- 스키마(schema)란 무엇인가?
		- 외부 / 개념 / 내부
	- 데이터 독립성이란 무엇인가?



