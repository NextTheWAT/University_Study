운영체제 중간고사 정리

스케줄링
스케줄링은 여러 프로세스가 번갈아가며 사용하는 자원을 어떤 시점에 어떤 프로세스에게 자원을 할당할 지 결정하는 것이다.

스케줄링의 목적
- 단위시간당 처리량 최대화(극대화)
- 적절한 반환시간 보장
- 예측 가능성 보장
- 오버헤드 최소화
- 자원 사용의 균형 유지
- 서비스 사용 기회 확대
- 실행 대기 방지
- 우선순위


선입선처리 FCFS, 선입선출 FIFO
- 선입선출 스케줄링은 비선점 방법으로 프로세서 스케줄링 알고리즘 중 가장 단순.
- 프로세서를 요청하는 순서대로 프로세서를 할당하며, 선입선출 큐로 구현
장점
- 스케줄링의 이해와 구현이 단순
- 준비 큐에 있는 모든 프로세스가 결국 실행되므로 기아 없는 공정한 정책이다.
- 프로세서가 지속적으로 유용한 프로세스를 수행하여 처리율이 높다.
단점
- 비선점식이므로 대화식 프로세스(작업)에는 부적합하다.
- 장기 실행 프로세스가 뒤의 프로세스를 모두 지연시켜 평균 대기시간이 길어져 최악의 대기시간이 된다.
- 긴 프로세스가 실행되는 동안 짧은 프로세스가 긴 대기시간으로 호위 효과가 발생할 수 있다.


최소작업 우선 스케줄링 SJF
- 최소작업 우선 스케줄링은 각 작업의 프로세서 실행 시간을 이용하여 프로세서가
  사용 가능할 때 실행 시간이 가장 짧은 작업에 할당하는 방법이다.
장점
- 항상 실행 시간이 짧은 작업을 신속하게 실행하므로 평균 대기시간이 가장 짧다.
단점
- 큰 작업이 실행이 안될수도 있다.
- 초기의 긴 작업을 짧은 작업을 종료할 때까지 대기시켜 기아가 발생한다.
- 실행 시간을 예측하기가 어려워 실용적이지 못하다.


라운드 로빈 스케줄링 round-robin
- 라운드 로빈 스케줄링은 특별히 시분할 시스템을 위해 설계했다.
- 이 스케줄링은 작은 단위의 시간인 규정 시간량 또는 시간 할당량을 정의한다.
장점
- 모든 프로세스가 프로세서의 동일한 점유율과 제한된 대기시간으로 공정하며 기아가 발생하지 않는다.
- 실행 큐에 프로세스 수를 알고 있을 때 구현이 용이하다.
- 강한 상호작용과 프로세스의 짧은 응답시간, 특히 프로세스 최악의 응답시간을 알 수 있다.
- 작업 길이가 다양할 때는 이전 작업을 마친 후보다 규정 시간량을 마치고 다음 작업으로 이동하기 때문에 평균
	대기시간이 선입선처리와 최소작업 우선 스케줄링보다 적다.
단점
- 성능은 규정 시간량의 길이에 따라 달라지므로 작업이 비슷한 길이가 좋다. 너무 길면 선입선처리로 변하고,
	너무 짧으면 많은 문맥 교환으로 비용 부담이 크다.
- 하드웨어 타이머가 필요하다.
- 미완성 작업은 각 규정 시간량을 마친 후 프로세서를 기다리므로 평균 처리 시간이 높다(오랜시간)
- 데이터를 주고받는 쓸데없는 시간이 많다.


HRN 스케줄링 (핸슨)
최소작업 우선(SJF) 스케줄링의 약점이었던 긴 작업과 짧은 작업 간의 지나친 불평 등을 어느정도 보완한
HRN스케줄링을 개발.
HRN은 비선점 스케줄링이며 우선순위 스케줄링의 또 다른 예로, 선입선처리 스케줄링과 최소작업 우선 스케줄링의 약점을
해결하려고 했다.
계산식 - 우선순위 = (서비스를 받을 시간 + 대기한 시간) / 서비스를 받을 시간
장점
- 자원을 효율적으로 활용하낟
- 기아가 발생하지 않는다
단점
- 오버헤드가 높을 수 있다(메모리와 프로세서 낭비).

HRN 스케줄링의 시스템 응답시간
시스템 응답시간 = 대기시간 + 서비스를 받을 시간


하드웨어의 구성요소(4대 기본장치)
- 중앙처리장치
- 주기억장치
- 입력장치
- 출력장치
보조기억장치 x


인터럽트@@@
인터럽트는 현재 실행 중인 프로그램을 중단하고 다른 프로그램의 실행을 요구하는 명령어이다.
시스템의 처리 효율을 향상시키며, 프로그램이 실행 순서를 바꿔 가면서 처리하여 다중프로그래밍에 사용
왜 사용하는가
- 불법적 명령이나 비정상적 행위발생시 인터럽트 신호 발생@
- 실행중인것을 중지시키고 해결한뒤 다시 돌아옴@
CPU가 프로그램을 실행하고 있을 때, 입출력 하드웨어 등의 장치에 예외상황이 발생하여 처리가 필요할 경우에 
CPU에게 알려 처리할 수 있도록 하는 것 우선적으로 처리해야할 일이 발생하였을 때 그것을 처리하고 원래 동작으로 돌아옴


운영체제
운영체제는 여기서 사용자가 하드웨어에 접근할 수 있는 유일한 수단.
운영체제는 사용자가 응용 프로그램을 실행할 수 있는 기반 환경을 제공하여 컴퓨터를 편리하게 사용할 수 있도록 도와주고,
하드웨어를 효율적으로 사용할 수 있도록 다양한 기능을 제공하는 소프트웨어이다.

운영체제의 기능@@
자원 관리
- 메모리 관리
- 프로세스 관리
- 주변장치 관리
- 파일 관리
시스템 관리
- 시스템 보호
- 네트워킹
- 명령 해석기


버퍼링
버퍼링은 프로세서와 입출력장치의 속도 차이로 생긴 유휴시간이 없도록 입출력장치별로 입출력 버퍼를 두어, 프로세서에서
연산을 할 때 동시에 다른 작업을 입출력하는 아주 간단한 방법
간단설명 - 장치의 속도 차이때문에 사용한다


시분할 시스템
시분할 시스템은 다중 프로그래밍을 논리적으로 확장한 개념으로, 프로세서가 다중 작업을 교대로 수행한다.
다수의 사용자가 동시에 컴퓨터의 자원을 공유할 수 있는 기술
즉, 다양한 터미널에 위치한 많은 사용자가 특정 컴퓨터 시스템을 동시에 사용할 수 있게 한다.

장점
- 빠른 응답 제공
- 소프트웨어의 중복 회피 가능
- 프로세서 유휴시간 감소
단점
- 신뢰성 문제
- 보안 의문 및 사용자 프로그램과 데이터의 무결성
- 데이터 통신의 문제


프로세스의 개념
가장 일반적인 프로세스 정의는 '실행 중인 프로그램' 이다.
프로세스 - 프로그램의 최소 단위

프로세스를 생성하거나 실행할 때 자원을 할당.
그리고 프로세스는 현재의 활동 상태를 나타내는 프로그램 카운터, 프로세서의 현재활동(레지스터 내용)도 포함.


단일 스레드와 다중(멀티) 스레드
단일 스레드
- 프로세스 하나에 스레드 한 개를 실행하는 전통적인 방법.
다중 스레드
- 프로그램 하나를 여러 실행 단위로 쪼개어 실행한다는 측면에서 다중 처리와 의미가 비슷하다.
	하지만 동일 프로세스의 스레드는 자원을 공유하므로 자원 생성과 관리의 중복성을 최소화하여 실행 능력을
	향상 시킬 수 있다.


프로세스 문맥교환
- 프로세스 문맥 교환은 인터럽트나 시스템 호출 등으로 실행 중인 프로세스의 제어를 다른 프로세스에
	넘겨 실행 상태가 되도록 하는 것이다.


교착상태의 개념
다중 프로그래밍 시스템에서는 프로세스가 결코 일어나지 않을 사건을 기다리는 상태가 되면 교착 상태에 빠졌다고 말한다.
한 개 이상의 프로세스가 교착 상태에 빠지면 작업이 정지되어 더는 명령을 진행하지 못한다.
시스템 운영자나 사용자는 작업을 교체하거나 종료하는 외부 간섭으로 이것을 해결해야 한다.
교착 상태는 하나 이상의 작업에 영향을 주기 때문에 무한 대기나 기아 상태보다 더 심각한 문제를 일으킨다.
간단 설명
발생 조건 : 프로세스들이 서로 사용할 자원을 기다리기만하고 보내주지 않는상태
상호배제, 점유와 대기, 비선점의 문제

교창 상태 예방
- 자원의 상호배제 조건 방지
- 점유와 대기 조건 방지
- 비선점 조건 방지
- 순환(환형) 대기 조건 방지


기아 상태
교착 상태가 자원을 자유롭게 할당한 결과(자원 부족)라면, 반대로 기아 상태는 작업이 결코 사용할 수 없는 자원을 계속
기다리는 결과(교착 상태)를 예방하려고 자원을 할당할 때 발생(기다림)하는 결과이다.

기아상태 - 아예 해결못함
교착상태 - 해결 가능하지만 대기







