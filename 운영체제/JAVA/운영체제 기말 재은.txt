운영체제 기말 재은

다른 운영체제 기말

메모리관리
운영체제의 기능
프로세스
인터럽트의 장점
커널
빅데이터 활용예시
코드 FIFO


저번 운영체제 중간고사

프로세스
스케줄링
인터럽트
운영체제


메모리 관리는 c가 좋다





프로세스의 자원 사용 순서
1. 자원 요청 : 프로세스가 필요한 자원 요청
			해당 자원 다른 프로세스가 사용 중이면 요청을 수락 떄까지 대기
2. 자원 사용 : 프로세스가 요청한 자원 흭득하여 사용
3. 자원 해제 : 프로세스가 자원 사용 마친 후 해당 자원 되돌려(해제) 줌


프로세스의 정의(1960년대 멀틱스 운영체제에서 처음 사용)
- IBM 운영체제에서의 작업
- 실행 중인 프로그램 (가장 일반적인 정의)
- 비동기적 행위
- 실행 중인 프로시저
- 실행 중인 프로시저의 제어 추적
- 운영체제에 들어 있는 프로세스 제어 블록
- 프로세서에 할당하여 실행할 수 있는 개체 디스패치가 가능한 대상

독립 프로세스
- 다른 프로세스의 영향을 주거나 받지 않는 프로세스

협력 프로세스
- 다른 프로세스와 서로 영향을 주는 프로세스


레지스터(고속장치이다)@@
- cpu에 명령어를 저장 
데이터 레지스터, 주소 레지스터가 있다
주소 레지스터 - 데이터의 주소를 기억하는것

프로세스의 레지스터

사용자 가시 레지스터
- 사용자가 운영체제와 사용자 프로그램을 이용해 정보 변경 가능
- 사용자 가시 레지스터
	- 데이터 레지스터
	- 주소 레지스터

사용자 불가시 레지스터
- 사용자가 정보를 변경할 수 없는 레지스터
- 프로세서의 상태와 제어를 관리
- 사용자 불가시 레지스터
	- 프로그램 카운터
	- 명령어 레지스터
	- 누산기
	- 메모리 주소 레지스터
	- 메모리 버퍼 레지스터
- PC
- IR
- MAR
- MBR


인터럽트@@@
인터럽트는 현재 실행 중인 프로그램을 중단하고 다른 프로그램의 실행을 요구하는 명령어이다.
시스템의 처리 효율을 향상시키며, 프로그램이 실행 순서를 바꿔 가면서 처리하여 다중프로그래밍에 사용
왜 사용하는가
- 불법적 명령이나 비정상적 행위발생시 인터럽트 신호 발생@
- 실행중인것을 중지시키고 해결한뒤 다시 돌아옴@
CPU가 프로그램을 실행하고 있을 때, 입출력 하드웨어 등의 장치에 예외상황이 발생하여 처리가 필요할 경우에 
CPU에게 알려 처리할 수 있도록 하는 것 우선적으로 처리해야할 일이 발생하였을 때 그것을 처리하고 원래 동작으로 돌아옴

인터럽트 장점
- 요청이 들어올 때만 처리하기 때문에 CPU효율이 떨어지지 않는다.
- 입출력 장치에서의 인터럽트가 발생하는 정확한 타이밍을 알 수 있기 때문에 즉각 반응할 수 있다.


커널
- 명령 실행 후 결과 전송
- 사용권한부여
- 컴퓨터 자원 관리
- 프로세스 관리, 메모리 관리
- 파일 시스템 관리, 장치 관리


쉘이 커널을 보호한다
쉘
- 명령어 해석 기능
- 사용자 인터페이스 제공
- 사용자의 명령을 입력
- 결과를 출력
해석한뒤에 동작을 커널에 부탁
하는 구조로 되어있다
사실 쉘은 큰 의미는 없다 커널의 보호정도만 목적이다


스레드
단일 스레드 : 스레드 용어가 탄생하기 전이라 개념 불확(도스)
다중 스레드 : 프로그램 하나를 여러 실행 단위로 쪼개어 실행한다는 측면에서
			다중 처리(다중 프로세싱)와 의미 비슷
- 프로세스의 실질적인 실행 단위


프로세스 문맥교환
- 프로세스 문맥 교환은 인터럽트나 시스템 호출 등으로 실행 중인 프로세스의 제어를 다른 프로세스에
	넘겨 실행 상태가 되도록 하는 것이다.


교착 상태 예방
- 자원의 상호배제 조건 방지
- 점유와 대기 조건 방지
- 비선점 조건 방지
- 순환(환형) 대기 조건 방지

교착 상태의 개념
- 다중 프로그램이 시스템에서 프로세스가 결코 일어나지 않을 사건을 기다리는 상태
- 프로세스가 교착 상태에 빠지면 작업 정지되어 명령 진행 불가
- 운영체제가 교착 상태 해결 못하면, 시스템 운영자나 사용자는 작업 교체, 종료하는 외부
	간섭으로 해결해야함
- 하나 이상의 작업에 영항을 주어 무한 대기, 기아 상태보다 더 심각한 문제 야기
- 두 프로세스가 사용하는 자원(비공유) 서로 기다리고 있을 때 발생
- 자원 해제 요청 받아들일 때까지 프로세스들은 작업 진행 불가
- 자원 해제 수신 때까지 현재 보유 자원도 해제 불가


기아 상태
교착 상태가 자원을 자유롭게 할당한 결과(자원 부족)라면, 반대로 기아 상태는 작업이 결코 사용할 수 없는 자원을 계속
기다리는 결과(교착 상태)를 예방하려고 자원을 할당할 때 발생(기다림)하는 결과이다.


컴퓨터 시스템에서 교착 상태의 발생 예
- 스풀링 시스템에서 발생하는 교착 상태
	- 스풀링 시스템 쉽게 교착 상태에 빠짐. 디스크에 할당된 스풀 공간의 출력 완료하지 않은 상태에서
		다른 작업이 스풀 공간 모두 차지하면 교착 상태 발생.
	- 스풀링 처리부에 공간 넉넉하면 교착 상태 발생률 감소하나 비용 많이 듬. 이때는 스풀링 일의 일정
		포화 -임계치- 설정하여 교착 상태 예방 가능.
- 디스크를 공유할 때 발생하는 교착 상태
	- 디스크 사용에 제어가 없으면 프로세스들이 서로 충돌하는 명령 요청할 때 교창 상태 발생


스케줄링의 개념
- 여러 프로세스가 번갈아 사용하는 자원을 어떤 시점에 어떤 프로세스에 할당할지 결정
- 자원이 프로세서인 경우를 프로세서 스케줄링, 대부분의 스케줄링이 프로세서 스케줄링의미
- 스케줄링 방법에 따라 프로세서를 할당받을 프로세스 결정하므로 스케줄링이 시스템의 성능에 영향 미침
- 좋은 스케줄링은 프로세서 효율성 높이고, 작업(프로세스)의 응답시간 최소화하여 시스템의 작업 처리 능력 향상
- 스케줄링이 필요없는 프로세스(인터럽트 처리, 오류 처리, 사용자의 시스템 호출 등)의 사전 처리가 대표적
- 반면에 스케줄링이 필요한 프로세스에는 사용자 프로세스와 시스템 호출로 발생하는 시스템 프로세스가 있음


  1) 버퍼링

- 버퍼링은 빠른 CPU와 상대적으로 속도가 느린 입출력장치 사이에 효율을 높이기 위해서 사용
- CPU와 입출력 장치를 항상 활용하고자 함
- 주기억장치 내에 버퍼를 둠으로써 입력시에는 CPU가 버퍼의 내용을 가져다 쓰고 입력장치가 버퍼에 내용을 기록
- 출력시에는 CPU가 연산된 결과를 버퍼에 저장하고, 출력장치는 버퍼의 내용을 꺼내서 출력
- 한 레코드가 읽혀 CPU가 그것에 대해 연산을 시작함과 동시에 입출력 장치는 곧 다음에 필요한 레코드를 미리 읽어서 주기억장치에 저장함으로써 CPU가 필요로하는 레코드를 기다림 없이 전달해 줄 수 있음
- 주기억 장치를 버퍼로 사용
- 버퍼 : 파일로부터 데이터 전송을 하여 저장하기 위한 주기억장치 공간으로 비교적 빠른 CPU과 느린 보조기억장치 사이의 완충역할

버퍼링(내부장치) = 스풀링(외부장치) 의미는 비슷함
둘다 두 장치의 속도차이때문에 그렇다

스풀링 - 두 장치간의 속도 차이때문에 나온 것@@

운영체제 정의
- 하드웨어 자원 관리
- 프로그램 실행 환경 제공
운영체제
운영체제는 여기서 사용자가 하드웨어에 접근할 수 있는 유일한 수단.
운영체제는 사용자가 응용 프로그램을 실행할 수 있는 기반 환경을 제공하여 컴퓨터를 편리하게 사용할 수 있도록 도와주고,
하드웨어를 효율적으로 사용할 수 있도록 다양한 기능을 제공하는 소프트웨어이다.

운영체제의 기능@@
자원 관리
- 메모리 관리
- 프로세스 관리
- 주변장치 관리
- 파일 관리
시스템 관리
- 시스템 보호
- 네트워킹
- 명령 해석기

커널
- 운영체제의 핵심
- 컴퓨터 자원 관리
- 프로세스 관리, 메모리 관리
- 파일 시스템 관리, 장치 관리

쉘
- 사용자 인터페이스 제공
- 사용자 명령을 입력
- 결과를 출력


기아상태 
사용할수없는상태 계속 기다림 - 아예 해결못함
교착상태와 다름 - 해결가능하지만 대기


스케줄링 목적 - 처리량최대화


스케줄링
스케줄링은 여러 프로세스가 번갈아가며 사용하는 자원을 어떤 시점에 어떤 프로세스에게 자원을 할당할 지장
스케줄링의 목적
- 단위시간당 처리량 최대화(극대화)
- 적절한 반환시간 보장
- 예측 가능성 보장
- 오버헤드 최소화
- 자원 사용의 균형 유지
- 서비스 사용 기회 확대
- 실행 대기 방지
- 우선순위


버퍼
데이터를 한 곳에서 다른 한 곳으로 전송하는 동안 일시적으로 그 데이터를 보관하는 메모리의 영역이다. 

버퍼링
버퍼링은 프로세서와 입출력장치의 속도 차이로 생긴 유휴시간이 없도록 입출력장치별로 입출력 버퍼를 두어, 프로세서에서
연산을 할 때 동시에 다른 작업을 입출력하는 아주 간단한 방법
간단설명 - 장치의 속도 차이때문에 사용한다

캐시
- 처리 속도가 빠른 프로세서와 상대적으로 느린 메인 메모리의 속도 차이 보완
	- 메인 메모리에서 데이터를 가져와 프로세서에 전달
	- 데이터가 이동하는 통로(대역폭)를 확대하여 프로세서와 메모리의 속도 차이를 줄임
컴퓨터 과학에서 데이터나 값을 미리 복사해 놓는 임시 장소

캐싱: 명령어와 데이터를 캐시에 일시적으로 저장하여 프로세서와 메모리 간의 액세스 속도 차이를 줄여 컴퓨터 성능을 향상시키는 방법이다. 
이때 캐시는 버퍼와 달리 자주 사용할 자료를 미리 복사하여 저장하는 빠른 메모리 영역이다.


메모리 관리의 개념
- 메모리 관리는 프로세스들을 위해 메모리 할당, 제거, 보호하는 활동
- 디스크에 있는 프로그램을 실행하려면 먼저 메모리에 적재 후 메모리 관리자가 예약된 메모리 할당해 주는 것
- 다중 프로그래밍 시스템에서 여러 프로세스가 메모리에 상주할 수 있도록 운영체제가 동적으로 메모리 세분화


메모리 관리 정책
- 적재 정책 : 디스크에서 메모리로 프로세스 반입 시기 결정하는 것
	- 요구 적재 : 운영체제나 시스템 프로그램, 사용자 프로그램 등 참조 요청에 따라 다음에 실행 할 프로세스를
				메모리에 적재하는 오래된 방법 
	- 예상 적재 : 시스템의 요청을 미리 예측하여 메모리에 적재하는 방법
- 배치 정책 : 디스크에서 반입한 프로세스를 메모리 어느 위치에 저장할 것인지 결정
- 대치 정책 : 메모리가 충분하지 않을 때 현재 메모리에 적재된 프로세스 중 제거할 프로세스를 결정하는 교체 방법


빅데이터 개념과 속성
속성
	규모 - 데이터의 크기
	다양성 - 다양한 종류의 데이터를 수용하는 속성
	속도 - 데이터를 빠르게 처리하고 분석할 수 있는 속성
	정확성 - 데이터에 부여할 수 있는 신뢰 수준
	가치 - 빅데이터를 저장하려고 IT 인프라 구조 시스템을 구현하는 비용

운영체제와 빅데이터의 관계
- 대용량 데이터 처리
- 분산시스템
- 신속한 데이터 처리

빅데이터 분석 기술
- 텍스트 마이닝
- 웹마이닝
- 오피니언마이닝
- 리얼리티마이닝
- 분류
- 군집화
- 기계학습 (인공지능의 원천)
- 감성분석

활용분야
- 공공분야
- 과학분야
- 의료분야


