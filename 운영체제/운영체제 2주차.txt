운영체제 2주차

javac Add.java -encoding utf-8

LACTUREDATAOS@gmail.com

실습1 자바 연산자
실습2 자바 입력



public class Hello
{
   public static void main(String~~)
   {
	System.out.println("Hello");
   }
}

 - static을 사용하는 이유 정적인 메모리를 사용하기 위해서
 - 블록 단위로 묶여진 차트가 (NS차트)
=====================================================================================================  
- 프로그램을 나눈다면 (1) 데이터, (2) 데이터 처리

 <절차지향> 
  - portran ,cobol (flow 차트가 나오기 시작) 
  - 절차지향은 스파게티 코드가 발생하는 경우가 있음
  - 구조화 되지 않았기 때문에 
  - goto가 문제가 된다.
 
 <구조적> 
  - c언어, pascal (ns차트가 나오기 시작) 
  - 선언부, 몸체부(선언부는 전처리가 관여하고 몸체부는 컴파일러가 관여한다.)
  - 조립화가 되지 않는 것이 특징
  - 이식(10% 내외로 진행해야함)으로 진행해야함
  - c언어는 변수, 함수

 <객체지향> 
 - c++, java  
 - c#은 jvm 
 - 따로따로 분리 되어 있음(a따로 b따로 c따로 등등)
 - 눈을 분리해서 따로 있을 수 있다. (그게 객체이다.)
 - 클래스는 객체랑 비슷한 의미이다.
 - c++에서는 멤버 변수, 멤버 함수  || java는 필드,메서드이다.
 - 하나의 프로그램을 단일화 할 수 있다 (클래스임 그게)
 - 데이터와 액션파트로 나누어짐


 - 함수는 집합에서부터 나온 것이다.
   f(x^2)
  a에는 1 2     b에는 1 4
  a가 입력이고 b가 출력이다.

========================================================================================================
<키워드>
 - 데이터 타입: byte, int, char, float, double, boolean, etc 등등)
 - 접근 한정자: public, protected, private //접근한정자를 사용하는 이유는 누구나 사용하는 것을 막기 위해서 접근 한정자가 필요하다. (ex 나의 눈을 도둑맞아서 사용)
                                                        // 상속의 문제가 발생하는 것을 막는 것이 가장 크다.

 - 제어문: if, else, for, while, switch, do, break, continue, etc
 - 기타: class, interface, new, try, catch, etc
========================================================================================================



객체를 만들어서 사용하는걸 인스턴스? 라고 한다
객체를 만들어서 메모리에 넣지않으면 의미가 없다

데이터 타입
byte, char, chort, int, float, double, Boolean, etc

접근 한정자 @
private, protected, public

제어문
if, else, for, while, switch, do, break, dontinue, etc

기타
class, interface, new, try, catch, etc


CMD
c.. - 전 디렉토리
cd JAVA - 디렉토리명으로 들어가기
mkdir JV - 디렉토리 생성
rmdir JV - 디렉토리 삭제
del filename.txt - 파일삭제
dir - 현재 디렉토리 목록보기



























