운영체제 5주차

프로세스의 정의(1960년대 멀틱스 운영체제에서 처음 사용)
- IBM 운영체제에서의 작업
- 실행 중인 프로그램 (가장 일반적인 정의)
- 비동기적 행위
- 실행 중인 프로시저
- 실행 중인 프로시저의 제어 추적
- 운영체제에 들어 있는 프로세스 제어 블록
- 프로세서에 할당하여 실행할 수 있는 개체 디스패치가 가능한 대상


중앙처리장치@@
레지스터(고속장치이다)@@
- cpu에 명령어를 저장 
DRAM - 을 주로 많이 사용


레지스터의 기능만 알면 된다@@
데이터 레지스터, 주소 레지스터가 있다
주소 레지스터 - 데이터의 주소를 기억하는것
데이터 레지스터 - 


마이크로 오퍼레이션@@
패치 - 명령을 가지고 오는것(인출)
해독 - 디코드
실행 - 익스큐트
---기본단계---(마이크로 오퍼레이션의)
저장 - (시험에 잘 안나옴) 다시 실행할때 저장되어있는것을 불러와서
명령처리

명령을 가지고있는게 레지스터
명령들의 행동들을 마이크로 오퍼레이션 이라고 한다


인터럽트 - 내가 진행하는것을 중단시키는것
인터럽트가 발생이되면 인터럽트 처리가 진행된다고 생각하자
인터럽트가 발생되는 이유는 - 불법적인 명령이 수행 or 해킹 등등
해킹처럼 의도하지않고 실수, 접근을 잘못했을때
인터럽트에는 순서 변환이 있다


커널
- 명령어 해석
- 장치 관리
- 사용권한부여

쉘이 커널을 보호한다
쉘
- 명령어 해석 기능
해석한뒤에 동작을 커널에 부탁
하는 구조로 되어있다
사실 쉘은 큰 의미는 없다 커널의 보호정도만 목적이다


장치를 사용하는것 - 드라이버


운영체제의 발전과정 - 안나옴x

분산

실제 이력 실행단위 - 쓰레드

그 다음은 프로세스 - 실행단위


프로그램과 프로세스 - 프로그램이 메모리로 적재되면 프로세스가 됨

프로세스의 종류
- 시스템(커널)프로세스
- 사용자 프로세스

- 독립 프로세스
- 협력 프로세스


프로세스의 상태 변화와 상태 정보
- 프로세스의 상태 변화는 운영체제가 프로세서 스케줄러 이용하여 관리
- 작업 스케줄러는 스풀러가 디스크에 저장한 작업 중 실행할 작업 선정하고 준비 리스트에
	삽입하여 다중 프로그래밍의 정도 결정
- 프로세스 스케줄러는 선정한 작업의 상태를 변화시키며 프로세스의 생성에서 종료까지 과정 수행


프로세스 제어 블록@
- 운영체제가 프로세스 제어 시 필요한 프로세스 상태 정보 저장
- 특정 프로세스 정보 저장하는 데이터 블록이나 레코드
- 프로세스가 생성되면 메모리에 프로세스 제어 블록 생성, 프로세스가 실행 종료하면 해당
	프로세스 제어 블록도 삭제


스레드
단일 스레드 : 스레드 용어가 탄생하기 전이라 개념 불확(도스)
다중 스레드 : 프로그램 하나를 여러 실행 단위로 쪼개어 실행한다는 측면에서
			다중 처리(다중 프로세싱)와 의미 비슷
- 프로세스의 실질적인 실행 단위


스레드 제어 블록 (TCB, Thread Control Block) (T CB가 더 중요 스레드 제어 블록보다)
- 정보 저장
- 프로세서 제어 블록은 스레드 제어 블록의 리스트
- 스레드 간에 보호 하지 않음

T CB의 내용~
실행 상태 : 프로세서 레지스터, 프로그램 카운터, 스택 포인터
스케줄링 정보 : 상태(실행,준비,대기), 우선순위, 프로세서 시간
계정 정보
스케줄링 큐용 다양한 포인터
프로세스 제어 블록PCB을 포함하는 포인터


컴퓨터 기본 4대장치
중앙처리장치 (cpu)		(중요)
- 명령처리(셋중 중요) - 레지스터가 여기에 들어가있다
	레지스터 안에? < 플리플롭 많이 비쌈 - 0과 1 구별?
- 연산
- 장치관리
- 한 번에 두 가지를 실행하지 못 한다 1개씩만 실행

주기억장치(메인 메모리)	(그나마 중요)
주기억장치보다 캐시가 더 중요함 (셀룰러)
- 주기억장치가 좋지않으니 프로세스 단위로 작게 쪼개서 올리라고 하는것
- 프로세스의-> 교체(언제 처리할까 정하는 느낌) -> 스케쥴링 (기사 실기시험으로 솔트가 많이 나온다 데이터를 빨리 처리하기 위해서)
- 저장
- DRAM을 여기에 사용 가격도 싸고 중요하지 않아서
- 단점보완 - 용량이부족하고 느리니 가상메모리 개념도 알면 좋다

입력장치	(그다지 중요하지않음)

출력장치	(마찬가지)
(하드디스크는 포함이 안된다)
이 4가지를 사용할수있는건 운영체제(OS)이다.

하드웨어를 사용할수있게 만들어주는건 응용프로그램(어플리케이션)
	,유틸리티, 드라이브


마이크로 오퍼레이션 (명령어가 어떻게 실행될것이냐)@
인출
해독
실행
-----
저장 - 다시 똑같은걸 실행할때 불러와서 사용

인터럽트@
OS, 컴퓨터구조 둘다 나옴 중요
인터럽트 신호선 - IRQ(장치)(모든 장치는 다 가지고 있다 ex) 마우스,키보드,Hdd, USB 등등)
여기서 더 이상 인식을 못 할때 더 사용하는게 있다 - Nas 시스템 - IRQ를 뭉쳐서 받음(레이드 시스템)


실행준비 -> 실행 (인터럽트가 발생하면) -> 대기


FIFO - 선입선출


주기억장치 - 속도가 느리고 용량이 적다
해결책 - 분산
- 단점 : 제어가 어렵고 비용이 많이 든다
	: 보안문제 해킹의 위험성
운영 규칙같은거는 몰라도 된다

메모리 관리 문제 - 분산 메모리
이래도 해결이 안된다면 - 가상 메모리

페이지 교체 알고리즘 @

솔트 알고리즘은 교체, 가상메모리, HDD에등등 에서 쓰인다.
 

프로세스가 동작되는곳 - 중앙처리장치, 주기억장치

1. FIFO
2. 입력FIFO

