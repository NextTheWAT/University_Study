JAVA실무 6주차

객체의 개념
소프트웨어 객체는 현실 세계의 객체를 필드와 메서드로 모델링한 것
소프트웨어 객체는 상태를 필드(Field)로 정의하고, 동작을 메서드(Method)로 정의. 
필드는 객체 내부에 선언된 변수를 의미하고, 메서드는 객체 내부에 정의된 동작


절차 지향 프로그래밍
일련의 동작을 순서에 맞추어 단계적으로 실행하도록 명령어를 나열
데이터를 정의하는 방법보다는 명령어의 순서와 흐름에 중점
수행할 작업을 예상할 수 있어 직관적인데, 규모가 작을 때는 프로그래밍과 이해하기가 용이
소프트웨어는 계산 위주이므로 절차 지향 프로그래밍이 적합


객체 지향 프로그래밍
소프트웨어의 규모가 커지면서 동작과 분리되어 전 과정에서 서로 복잡하게 얽혀 있는 데이터를 사용했기 때문에 절차 지향 프로그래밍 방식의 한계
절차 지향 프로그램은 추후 변경하거나 확장하기도 어려움
현실 세계를 객체 단위로 프로그래밍하며, 객체는 필드(데이터)와 메서드(코드)를 하나로 묶어 표현

특징
캡슐화(정보 은닉) : 관련된 필드와 메서드를 하나의 캡슐처럼 포장해 세부 내용을 외부에서 알 수 없도록 감추는 것
상속 : 자녀가 부모 재산을 상속받아 사용하듯이 상위 객체를 상속받은 하위 객체가 상위 객체의 메서드와 필드를 사용하는 것
상속은 개발된 객체를 재사용하는 방법 중 하나
다형성 : 대입되는 객체에 따라서 메서드를 다르게 동작하도록 구현하는 기술.  실행 도중 동일한 이름의 다양한 구현체 중에서 메서드를 선택 가능


클래스 선언과 객체 선언
추상화
현실 세계의 객체는 수많은 상태가 있고 다양한 동작을 하지만, 클래스에 모두 포함하기는 어렵기에 추상화(Abstraction)하는 과정이 필요
추상화는 현실 세계의 객체에서 불필요한 속성을 제거하고 중요한 정보만 클래스로 표현하는 일종의 모델링 기법
따라서 사람마다 추상화하는 기법이 같지 않으므로 각 개발자는 클래스를 다르게 정의 가능


클래스 선언과 객체 생성
클래스 선언
형식
class 클래스이름{		//class - 클래스를 선언하기 위한 키워드
	//필드			//객체의 속성을 나타낸다.
	//메서드			//객체의 동작을 나타낸다.
}

ex)
public class Ball{
	double radius = 2.0;
	double getVolume(){
	retunr 4 / 3 * 3.14 * radius * radius * radius;
	}
	
}


클래스 선언과 파일
보통 소스 파일마다 하나의 클래스를 선언하지만, 2개 이상의 클래스를 하나의 파일로 선언 가능
하나의 파일에 클래스가 둘 이상 있다면 하나만 public으로 선언할 수 있고, 해당 클래스 이름은 소스 파일 이름과 동일해야 함


객체 생성과 참조 변수
클래스이름 변수;		//클래스이름 - 변수의 타입이다. //변수 - 클래스는 참조 타입이므로 참조 변수 또는 참조 타입 변수라고한다.

	변수 = new 클래스이름(); 		// 클래스이름() - 생성자라고 한다.

한 문장으로 변수 선언과 객체 생성
클래스이름 변수 = new 클래스이름();


기초 타입과 참조 타입
int ten = 10;
Ball myBall = new Ball();


클래스의 구성 요소
멤버 : 필드, 메서드
생성자
참고 : 지역 변수는 메서드 내부에 선언된 변수. 매개 변수도 일종의 지역 변수임


필드와 지역 변수의 차이
필드는 기본 값이 있지만, 지역 변수는 기본 값이 없어 반드시 초기화
필드는 클래스 전체에서 사용할 수 있지만, 지역 변수는 선언된 블록 내부의 선언된 후에서만 사용 가능
필드와 달리 지역 변수는 final로만 지정 가능


필드와 메서드 접근
객체참조변수.멤버


클래스 내부에서 자신의 멤버에 접근하려면  참조 변수 this 혹은 참조 변수 없이 그냥 멤버 이름 그대로 사용하면 된다.
예를 들어, 외부 클래스 Circle의 객체 myCircle이 있다면 myCircle 객체의 radius와 findArea( )는 다음과 같은 방식으로 접근


필드와 메서드 접근
예를 들어, 클래스가 radius 필드와 findArea( ) 메서드를 포함한다면 클래스 내부에서는 다음과 같이 그대로 사용하면 된다.

radius 혹은 this.radius			//필드 이름
findArea() 혹은 this.findArea	//메서드 이름


접근자와 설정자
필요성
- 클래스 내부에 캡슐화된 멤버를 외부에서 사용할 필요

접근자와 설정자
- private으로 지정된 필드에 값을 반환하는 접근자와 값을 변경하는 설정자는 공개된 메서드
- 일반적으로 접근자는 get, 설정자는 set으로 시작하는 이름을 사용
- 필드 이름을 외부와 차단해서 독립시키기 때문에 필드 이름 변경이나 데이터 검증도 가능


생성자

생성자의 의미와 선언
생성자의 역할 : 객체를 생성하는 시점에서 필드를 다양하게 초기화
생성자의 선언 방식
클래스이름 (---) {---}

생성자 사용
클래스이름 변수 = new 클래스이름(...);

- 생성자 이름은 클래스 이름과 같다.
- 생성자의 반환 타입은 없다.
- 생성자는 new 연산자와 함께 사용하며, 객체를 생성할 때 호출한다.
- 생성자도 오버로딩할 수 있다.

1번문제
삼각형을 나타내는 트라이앵글 클래스를 작성하시오. 삼각형 속성 : 실숫값의 빝변, 높이 동작 : 넓이 구하기, 접근자, 생성자 포함 get,set 사용
밑변 - base
높이 - height
넓이 - findArea

밑변 x 넓이 *1(/2)
