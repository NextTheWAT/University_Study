중간고사 문제
윈도우즈 프로그래밍이란
윈도우 운영체제 기반에서 구동되는 응용 프로그램으로 이벤트에 의해 실행이 된다.
윈도우는 GUI 기반의 운영체제로 사용자가 아이콘 즉 그래픽을 통해 컴퓨터와 정보를 교환하는 작업환경을 가지고 있다. 
또한 메시지 구동 구조로 프로그래머가 정한 순서대로 실행되는 것이 아닌 사용자가 어떠한 이벤트를 발생시켰을 때 실행시키는 구조를 가진다. 
또한 CPU 시간을 적절히 분할하여 각 프로그램에 할당하여 서로 다른 프로그램이 동시에 실행되는 것처럼 보이는 멀티태스킹이 가능 특징으로는 운영체제가 제공하는, 
즉 API 함수를 제공하며 API는 DDL(동적 연결 라이브러리) 형태로 제공된다.

함수에 대하여
함수란 특정한 단위 작업을 수행하는 것으로 독립적으로 설계된 프로그램 코드의 집합이다.
라이브러리 함수, 사용자 정의 함수가 있음
프로그램에서 함수를 사용하여 작성하면 코드의 가독성을 높일 수 있다
또한 반복적인 프로그래밍을 피할 수 있다. 즉 여러 번의 같은 작업이 필요하다면
함수로 작성하는 것이 효율적이다. 유지 보수에 있어서 손쉽게 가능함, 구조화에 유리
함수를 선언 파트에 선언해두면 운영체제가 해당 함수의 사용을 예측하여 메모리에 미리 할당시켜두기 때문에 호출 속도에 있어서 빨라지며 오류 발생의 확률도 낮아진다.

클래스와 객체
클래스란 data part, action part로 구성되며 action part는 함수를 의미한다.
객체의 틀을 제공하며 함수는 활동성을 가지고 있으며(자료가 있다면) 이로 인해 스스로 활동이 가능하다. 따라서 접근 한정자를 사용해 불법적 접근 등을 막아주어야 한다. 
객체는 클래스가 제공해주는 틀로 생성된 것으로 즉 클래스의 자료형과 같으며 그 자체로는 값을 저장할 수 없다. 객체가 실질적으로 메모리에 할당되면 인스턴스라 하며 객체 선언 시에는 생성자가 호출된다. 
생성자는 자동으로 호출되는 특수한 멤버 함수이며 역할은 대부분 객체의 초기화를 담당한다. 리턴 자료형이 없으며 이름은 클래스의 이름과 동일하고 오버로딩이 가능

객체지향언어
객체를 만들고 사용하는 프로그래밍 언어로 프로그램을 다수의 객체를 만들어 이들이 상호작용하는 방식을 사용한다. 
즉 프로그램이 부분 단위로 실행이 가능하며 이에 따라 적절한 접근한정자를 사용해주는 것이 중요하다. 
특징으로는 먼저 캡슐화는 함수와 변수를 하나의 단위로 묶는 것으로 class를 사용하여 구현되며 접근 한정자를 사용하여 정보은닉이 가능하다. 유지 보수성을 높이게 된다. 상속은 클래스의 재사용, 
즉 하위 클래스가 상위 클래스의 성질을 이어받을 수 있게 하는 기술로 코드의 간결화를 가져온다는 장점이 있다. 다형성은 객체가 다른 상태로 재구성 될 수 있다는 것으로 오버로딩과 오버라이딩이 있다. 
오버라이딩은 상위 클래스의 메소드를 하위 클래스의 메소드에서 재정의 하는 것이며 오버로딩은 같은 이름의 메소드를 가지며 매개 변수의 타입이나 개수를 다르게 하는 것이다. 
즉 객체지향언어는 코드의 재사용성을 높이고 생산성을 향상 시키며 유지 보수에 있어서 우수하다 하지만 개발 속도가 느리며 코딩 난이도가 어려움




기말 예상
인터프리터 언어(java,basic등 고급언어)
대화형 언어이며 라인 단위의 해석을 하기 때문에 속도가 느리다
하지만 쉬운 문법을 사용함
프로그램을 인터프리터가 번역 이후 바로 실행된다.

컴파일러 언어(c,c++등 고급언어)
컴파일 시 목적프로그램을 생성하며 이후 링커를 통해 실행 프로그램으로 변환
이후 실행되며 빠른 속도를 가지고 있다
문법이 엄격한 편
소스 프로그램을 컴파일 하기 전 수행되는 것으로 전처리가 있으며 이것은 전처리기가 담당

컴파일러의 특성
컴파일러란 고급 언어로 작성된 원시 프로그램을 기계어로 된 목적프로그램으로
출력하기 위해 사용하는 언어 번역 프로그램으로 프로그램의 모든 부분을 담당하지는 않는다.
기계어로 컴파일된 실행파일을 실행하기 때문에 실행속도가 빠르다.
한번에 모든 코드를 컴파일 하기 때문에 오류가 있다면 실행 자체가 불가능
코드를 수정하게 되면 다시 컴파일 과정을 거쳐야 한다.

연산자란
연산을 수행하기 위해 사용되는 문자, 계산을 할 때 사용되는 기호로
연산이란 프로그램에서 데이터를 처리하여 결과를 산출하는 것

제어문이란
동작의 흐름을 제어하는 명령
반복문이란
제어문 중 하나로 프로그램 소스 코드 내에서 특정 부분의 코드가
반복적으로 수행될 수 있도록 하는 구문

<iostream>은 입출력 스트림 헤더파일로 전처리기에 의해 미리 처리된다. 컴파일러 x7

확률에 대하여
확률이란 어떠한 일이 일어날 가능성을 측량하는 단위로 즉, 사건이 발생할 수 있는 비율을 의미한다. 
확률은 과거의 수많은 데이터를 사용하여 미래를 예측하기 위해서 사용하며 이것에 대한 증명은 불가능하다. 
결국 확률은 컴퓨터를 사용하여 예측을 수행하고자 사용하는 것이고 이 예측이 얼마나 올바른 예측인지에 대한 가능성을 수치로 표현한 것이라 할 수 있다.

순열이 중요한 이유는 재귀적 용법에 사용되기 때문(특수한 경우)

데이터를 분석하는데 있어 데이터의 사실성, 무가치성, 정보은닉, 다양성 등 여러 가지를 고려해야한다. 
데이터 분석은 정보화, 가치화, 통계화 등의 방법이 있는데 데이터 통계 관점으로 평균, 편차, 분산 등의 속성을 사용하여 데이터 통계를 나타낸다. 평균이란 집단의 대표성을 나타내며 신뢰성이 높지 않을 가능성도 충분한 값이다. 
따라서 편차와 분산 등의 개념을 더 사용하는 것이다. 편차는 평균과의 거리를 의미하며 평균에 상대적인 데이터 분포를 알 수 있다. 분산은 편차의 집약이며 흩어진 상태를 알 수 있다. 
표준편차는 분산에 루트를 씌워 값을 알 수 있는 것으로 편차의 정량화라고 할 수 있다. 
이러한 통계는 시각화하여 분석이 더 용이하다. 윈도우도 데이터를 시각화 한 것이다.

프로그래밍 언어의 종류
스크립트 언어:코드 작성이 쉬움, 컴파일 수행 없이 바로 실행, 데이터 타입이 자유로움
java script, visual basic script, R 등
인터프리터 언어:대화형 언어, 라인 단위 해석, 속도가 느림, 쉬운 문법
java, basic 등
컴파일러 언어:컴파일 시 목적 프로그램이 생성된다, 빠른 속도, 엄격한 문법
c, c++ pascal 등






