컴퓨터 네트워크 4주차 정리

인터넷

인터넷은 여러개의 LAN+WAN 이다
인터넷은 그 구조를 알지못해도 사용자 데이터를 주고받을 수 있는 블랙박스와도 같다

라우터는 특정링크로 오는 데이터를 또 다른 링크로 교체해주는 그런 기능이 있다
네트워크에서 경로제어를 통해서 최적의 경로를 선택한 이후에 데이터를 스위칭해주는 장비

4.2 교환 ( Switching )

- 회선 교환(Circuit Switching)
	- 메세지 전달 전에 발신지와 목적지 사이에 물리회선(링크)
	  생성 후 메세지 전달
	- 메시지 전달 완료 후 네트워크에 통보 -> 연결해제
	- 대부분 물리계층에서 구현(네트워크 계층에서는 구현 안됨)
	- 회선교환망의 좋은 예: 초기 전화시스템-
전화기가 두 대가 있다고 해보자 그 사이에는 교환기들이 있다 그러면 각 링크마다 사용자 A와 B간의 실제 통화가 일어나기 전에
링크마다 일정 대역폭 대역폭은 타임슬롯 이 일어난다 이 연결을 위해서 물리적으로 할당을 하는 시간
그래서 처음 링크마다 물리적인 타임슬롯을 할당해 송신자와 수신자간의 전체적인 타임슬롯 대역폭을 할당하는데 걸리는 시간이 필요한 것
그래서 설킷 스위칭은 상대적으로 실제 통화하기 전에 접속을 하기위한 시간, 딜레이가 필요해서 상대적으로 접속지원이 크다 라고 설명가능

- 패킷 교환(Packet Switching)
	- 오늘날 인터넷의 네트워크 계층: 패킷 교환  cf. X25
	- 상위층으로부터 받은 메시지 패킷 단위로 분할
	- 발신지에서 목적지까지 패킷 단위로 전달
	- 패킷교환망은 패킷을 최종 목적지까지 전달 결정 -> 재조립
	- 사용방법: 연결형=데이터그램(gatagram), 비연결형=가상회선(virtual circuit)
오늘날의 인터넷을 패킷스위칭이다 라고 이해하면 될듯
두가지가 있는데 일반적으로는 송수신 양단간에 물리적인 회선 연결이 필요한게 아니라 패킷이라는 데이터를 보낸다
그러면 연결 과정없이 패킷이라고 하는 데이터를 보내면 이 중간 교환기 혹은 라우터 단에서 패킷을 축적 즉 저장하고 보내고 저장하고 보내고
이런 방식으로 간다 그래서 상대방의 수신 상태여부와 상관없이 송신자는 바로 데이터를 보낼수가 있게 되는 겁니다
따라서 패킷 스위칭은 서킷 스위칭에비해서 접속지연에 비해서는 상대적으로 적다
그렇지만 일단 한번 접속이 되고 나서는 데이터를 보내는데 걸리는 딜레이 즉, 전송지연이라는 관점에서 보면 서킷스위칭이 상대적으로 적다
왜냐하면 연결과정을 통해서 물리적인 타임슬롯을 확보해놨기 때문이다 그래서 그 다음에 보내는데이터는 큰 전송지연 없이 실시간으로 보낼수있는 장점이있다
그렇지만 패킷스위칭은 보내는 데이터마다 교환기, 라우터단에서 저장했다가 보내고 저장했다가 보내고 매번 타임슬롯을 새롭게 Bandwidth를 확보해서 보내는 과정이 일어나기 때문에
상대적으로 전송지연은 크다라고 얘기할수있다.

-----------------------------------------------------------------------------------
	C-S(설킷 스위칭)		P-S(패킷 스위칭)
접속지연		大			小
전송지연		小			大
회선사용효율	小			大
서킷 스위칭은 대역폭을 고정으로 할당해둠 물리적으로 송신자와 수신자간의 타임슬롯을 고정적으로 할당해두기 때문에
실제로 데이터를 보내지 않더라도 그 대역폭은 할당이 되어있음 그러니까 데이터를 보내지 않더라도 물리적인 타임슬롯을 할당하기 때문에 회선사용 효율관점에서는 떨어짐
패킷 스위칭은 실제로 데이터를 보낼때만 타임슬롯을 할당해서 보내기 때문에 불필요한 타임슬롯,대역폭을 할당할 필요가 없는것 그래서 회선사용효율은 서킷스위칭보다 크다

과금방식	    시간x거리에 비례	    데이터량에 비례
서킷스위칭은 오래쓰면 그만큼 비용이 많이 나옴 시간에비례, 또한 시내 통화보다는 시외 전화가 요금이 비싸게 나옴 그래서 시간과거리에 비례한 과금방식
패킷스위칭은 실제 데이터량에 비례함 보이스톡은 시간과 거리에 상관없이 인터넷을통해서 통화를 하는거니까 실제 데이터량에만 비례하는것
집에서는 렌 상황에서는 비용이 들지않지만 그래서 이런면에서 차이가 있다

중간 교환기에서 	X(하지않음)		O
속도,코드,프로토콜 변환	       (필요하면 필요한 요소를 변환)
	길고,연속적으로 대량의 	상대적으로 짧고 간헐적인
	데이터를 전송할때 유리함	데이터 전송에 유리함
또 예를 들자면 중간 교환기 단에서 속도를 변환한다거나 혹은 코드를 변환한다거나 데이터코드 형태가 있겠죠 만약에 텍스트를 보낸다 하더라도 아스키나,여러 코드를 사용 한다거나
전체적인 프로토콜을 변화시킬거냐 그래서 이런 중간 교환기에서 속도나 코드나 프로토콜의 변환 기능이 있느냐 없느냐 라는 항목을 비교해본다면
서킷스위칭은 전체적으로 고정 대역폭을 이미 할당해둔 상태이기 때문에 중간 교환기에서 별도로 데이터 변환처리 속도나 코드와 프로토콜 변환처리를 하지 않는다
패킷 스위칭은 데이터를 먼저 저장한 이후에 처리해서 보내기 때문에 만약 네트워크 망을 관리하는 쪽이나 서비스에서 원한다면 중간 교환단에서 속도나 코드나 프로토콜 변환이 가능하게 되는것
반드시 변환한다는 뜻이아니라 필요하다면 이러한 요소들을 변환하는게 가능하다는 말

	물리적, 연결형		         비연결형
				      연결형도 있음
서킷스위칭에 적합한 서비스는 길고 연속적인 대량의 데이터를 보낼때 유리함
패킷스위칭에 적합한 서비스는 상대적으로 짧고 간헐적인 데이터 전송의 서킷스위칭보다는 유리할수있다
하지만 워낙 이제는 소프트웨어나 교환에서의 처리방식이 하드웨어의 발전으로 인해서 교환기에서 고프트웨어적 처리속도가 뛰어나다 보니까 이제
패킷스위칭이라고해서 서킷스위칭에비해서 전송지연이 많이커서 실시간 서비스를 하지 못하느냐 그런건 아니다 최근에는 웬만한 실시간성 데이터도 패킷스위칭을 통해서 보내고있다.
ex) 화상통화, 실시간방송등


연결,비연결의 차이 = 실제 데이터를 보낼때 연결을 먼저 하고 데이터를 보내느냐
		  송수신간 데이터를 먼저 보내느냐 에 다름

이 두개는 전통적인 방식을 얘기한것
패킷 스위칭이 요즘에는 길고 연속적인 대량 데이터도 가능
-----------------------------------------------------------------------------------
4.3 패킷 교환 (Packet Switching)

- 비연결형(Connectionless) 서비스 = 데이터그램 서비스(방식)라고도 부름
= 목적지 주소 기반의 포워딩
목적지 주소를 가지고 라우팅 테이블로 검색하는 방법
	- @각 패킷을 상호 독립적으로 처리
		- @패킷마다 주소 필요, 독립된 전송 경로
패킷들 마다 목적지까지 도달하는 경로가 다를 수 있다는 얘기
패킷마다 전송되는것이 독립적으로 되기때문에 속도가 다를 수 있음
패킷의 순서가 보장이 되지않음
송신 순서와 수신 순서가 반드시 일치한다라고 할수없다. 하지만 일치 할수도있다
- 라우터(Router)가 교환기 역할
	- 목적지 주소를 기반으로 포워딩(Forwarding)
- 패킷 포워딩
패킷에는 송,수신 주소가 있음 네트워크 계층의 IP주소가 될 것
목적지마다 최적의 경로를 저장해둔 것을 라우팅테이블 이라고 한다
- 지연(Delay)

4.3 패킷 교환(Packet Switching)
- 연결 지향(Connection-oriented) 서비스
	- 연결 설정(Setup) -> 데이터 전송 -> 연결 해제(Teardown)
	- 메시지에 속한 모든 패킷 간에 상호 관계성 가짐
	- 가상회선(Virtual Circuit)@
		- 가상회선 식별자(Virtual circuit identifiier) : 흐름 레이블(Flow label)
	- 라우터 : 각 패킷의 Flow label에 기반하여 포워딩@
특정 송신자에서 특정 목적지까지 동일한 경로를 따라 흐르는 패킷의 흐름, 데이터의 흐름을 플로우라고 부르고,..레이블이라고 부른다 30분
동일한 경로이기 때문에 송신순서와 수신순서가 보장된다(먼저간게 먼저 도착)
라우터에서 패킷 포워딩을 결정할때 목적지 기반으로 사용하는 비연결형과 다르게
연결지향에서는 목적지 주소 기반이아닌 플로우를 정의한 레이블, 플로우 레이블을 기반으로
라우팅 테이블을 검색하는게 아니라 엑세스 한다
동일한 레이블이 있는 레이블을 바로 찾아간다
그래서 포워딩을 빠르게 찾아간다

- 연결 설정 단계(Setup phase)
	- 요청 패킷 (Request packtet)
송신자인 a와 목적지인 b간에 데이터를 전송하기전
a가 b한테 연결요청 패킷을 보냄
b는 확인 응답 패킷을 보냄
a가 목적지를 b로하는 연결요청 패킷을 보냄
r1은 입력 방향에 대해서 플로우 여부를 결정함
///라우터가 인커밍 포트를 확인하고 레이블을 결정하고
	아웃고잉 포트로 내보냄

-연결 설정 단계 (Setup phase)
	- 확인 응답 패킷
목적지가 확인 응답 패킷을 보냄
r4가 그제서야 아웃고잉 레이블을 결정하게 된다
왜냐하면 받는쪽에서 아이디 값을 77로 결정함
그래야 받는쪽에서 인지함
r4가 r3에게 다시 포워딩을 하게된다
이때 아웃고잉 레이블을 r3에게 알려주게 된다
r3가 그제서야 아웃고잉 플로우 레이블을 22번을 결정하게 된다
역시 r1에게도 같다 인커밍 레이블이 66번이라는 것을 알려줌
a에게도 같다
마지막은 인커밍 아웃고잉 레이블

- 데이터 전송 단계
플로우 레이블이라는 것을 보내는 패킷 헤더에 보낼수도있고
별도의 헤더정보를 가지는 프로토콜로 인캡슐레이션으로 할수도있다
IPv4는 비연결형으로 서비스가 되어있다
그 이후는 연결형으로 점차 바뀌어감

a는 목적지 b로가는 데이터에다가 ipv4헤더를 붙인다
인커밍 레이블을 받고 아웃고잉 레이블을 결정하고 나가게됨
지금처럼 플로우 레이블 기반으로 라우터가 포워딩을 결정하니까
포워딩 속도가 복잡하고 많이걸린다.
그래서 ipv4로 연결형으로 보내기위해서 별도의 프로토콜이 필요하다
그것이 MPLS 이다

4.3 패킷 교환(Packet Switching)
- 연결 해제 과정(Teardown phase)
	- 해제(Teardown) 패킷, 확인(Confirmation) 패킷
	- 모든 라우터들은 자신의 테이블에서 해당 엔트리 삭제
- 연결 지향 네트워크에서의 지연 (Delay)
(회색)라우터간에 딜레이가 발생한다, 플로우레이블을 결정하거나 포워딩떄문이다
각 라우터단에서도 잠깐의 딜레이는 발생할수있다

4.4 네트워크 계층 서비스
- 인터넷의 가상 부분(Exmaple)

- 논리 주소 체계(Logical addressing)
	- 인터넷 공통의 주소체계: IPv4, IPv6
- 발신지 컴퓨터에서 제공되는 서비스
상위계층에서 네트워크 계층으로 내려온다
기본적으로 트렌스포트 계층에서 내려옴
이 데이터의 네트워크 계층 ip프로토콜 헤더를 인캡 과정이 일어남
상위계층에서 받은 데이터의 네트워크계층의 헤더를 붙이고나면 그게 패킷이 되는것
인캡을통해서 패킷을 만드는과정을 패킷타이즈 라고한다
다음 노드의 주소를 어떻게 알 수 있을까?
소스는 데스티네이션에게 보내기위해서는
일단 r1에게 보내야함 패킷을
라우팅 테이블 형태로 저장되어있다
r1의 게이트웨이 주소를 A라고 하자
ip주소 10번에 해당하는 맥 주소를 어떻게 찾느냐
ap라는 프로토콜의 도움을 받아서 찾아온다
ARP 캐시테이블, 주소를 사용하지않으면 자동으로 삭제된다

- 각 라우터(Router)에서 제공되는 서비스
라우터는 링크 계층으로부터 데이터를 받아서 다시 또 다른 링크 계층으로 내보내는 장비
상위계층으로 데이터를 받는 송신자 컴퓨터와 달리
1. 라우터는 다르다 디캡으로 데이터를 받아 올림
네트워크 헤더정보를 보게되면 목적지 주소를 데스티네이션 어드레스에 해당하는
라우터 라우팅테이블을 통해서 주소를 찾는것
2. ip주소에 해당하는 맥 주소를 arp캐시 테이블을 통해 찾아온다
링크마다 mtu값이 다를 수 있음 그래서 해당되는 mtu값을보고 결정, 프레그멘테이션
1. 넥스트옵에 아이피주소를 찾는것
2. 그 아이주소에 해당하는 맵 주소를 ARP 캐시테이블로 찾는 과정
3. 네 스토어까지 전송하기 위한 그 링크에서 MTU값을보고 프레그맨테이션 과정을 하는것

- 목적지 컴퓨터에서 제공되는 서비스
링크 계층으로부터 데이터를 받아서 상위계층으로 올리는것
ip헤더를 디캡
패킷이란 ip헤더를 인캡되어있는 상태가 패킷
데이터 전송과정에서 프레그맨테이션이 여러가지로 나뉘어질수있다
각각의 단편들이 포워딩이 되어서 오니
그것들을 조합해서 상위계층으로 보내야함
그래서 모든 패킷이 도착할때까지 네트워크계층에서 기다려야함
모든 단편들이 도착하면 리어셈블(재조립)과정을 거쳐야함
원래의 하나의 패킷이 됨 그 다음 상위 계층으로 올리는 서비스를 하게 된다
리어셈블을 하기전에 이 정보들을 동일한 패킷에서 단편들이 된 것들을 모아둬야한다
그리고 기록해야함 도착한 단편들을 저장하는 곳이 리어셈블 테이블이라고 한다 
마지막 정리 27분50초 

4.5 기타 네트워크 계층 이슈들
- 오류 제어(Error Control)
	- 훼손, 손실, 중복 데이터 그램 탐지 메커니즘
	- 네트워크 계층에는 오류제어 제공 안함 -> IP패킷 헤더 훼손만 검사
- 흐름 제어(Flow Control)
	- 수신자의 수신 능력을 초과하지 않도록 발신지에서 데이터 전송 양
  	  조절 -> 현, 네트워크 계층은 제공 안함
흐름제어란 송신자가 수신자에 데이터 수신능력을 초과하지않도록 송신량을 조절하는것
그렇지않다면 오버플로우 현상이 발생 데이터전체를 저장하지 못함

- 혼잡 제어(Congestion Control)
	- 혼잡 : 발신지 컴퓨터들이 송신한 데이터그램 수가 라우터 용량초과
	- 우선순위(Priority) cf.ICMP
실제로는 중간에 라우터단이 있는데 수신측에 버퍼가 여유가있어도
라우터에서 오버플로우가 발생한다면 오류가 발생
중간 노드에 버퍼 오버플로우 발생을 막기위해 송신량을 조절하는것

- 서비스 품질(Qos : Quality of Service)
	- 멀티미디어(오디오, 비디오, 실시간통신) 통신 제공
- 라우팅(Routing) : 라우팅 테이블 생성 문제
- 보안(Security)
지금은 이러한 기술적인 이슈들이 있구나 하고 듣고 지나가면 될듯













