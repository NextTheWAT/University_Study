컴퓨터 네트워크 10주차 정리


- IP프로토콜의 문제점
	- 오류 보고 및 오류 수정 메커니즘 무
	- 호스트와 관리 질의를 위한 메커니즘 무
	 -> IP의 문제점을 보완하기 위해 -ICMP- 설계
- ICMP (Internet Control Message Protocol)
IP의 문제점을 보완하기위해 ICMP를 설계했다
네트워크 계층의 프로토콜이다
IP의 상위 계층
그렇지만 ICMP는 트랜스포트 계층이 아닌 네트워크 계층이다
IGMP도 마찬가지

에러 메세지와 쿼리 메세지가 있다
쿼리 메세지는 다른 호스트로부터 특정 정보를 흭득하기위해 사용되는것
에러 메세지는 오류가 났을때 사용되는것
IP프로토콜에서 에러에대한 보고 기능이 없음 그러니 ICMP가 동작
송신자에게 보내는 메세지가 에러리포팅 메세지 즉 오류 메세지

ICMP 메세지
타입필드 3, 4 값에 의해서 나눠진다
3은 목적지에 도달할수없다 라는 얘기
목적지까지 도달할수없는 구체적인 이유에 대해서 코드로 정의해둔다
3에 1,2,3,4 와같은 코드가 있다
3에서 1이 의미하는건 호스트 레벨에서 목적지까지 도달할수없다는 의미
3에서 2가 의미하는건 호스트 레벨에서는 도달했을지 모르지만
목적지에 데이터그램을 처리할수있는 프로토콜이 존재하지 않는이유
3에서 3이 의미하는건 IP데이터그램을 상위 계층으로 전달하고자할때
포트가 열려있어야하는데 포트 언리쳐블이 된다
3에서 4는 프레그멘테이션 모듈이 MTU값보다 큰 값인경우에도
프레그멘테이션을 할수없는 경우가 있는데 데이터카드를 디스카드하고
코드 4로 표기해서 송신 호스트에게 보낸다 데스티네이션 언리쳐블
3의 	1 - HOST
	2 - Protocol
	3 - Port
	4 - Fragmentation
11는 시간이 초과되었다는 이유다
코드가 0일경우에는 타임이 초과되었다 TTL 이 0이 되었을경우
1은 리어셈블리 모듈에서 발생하는것

12는 파라미터 프라블럼
5는 리다이렉션 방향 제지정 메세지, 어떤 패킷을 받았을때 호스트가 해당되는 데이터그램을
R1을 통해 보냈다 R1이 판단할때 이 데이터그램에 대한 디폴트 게이트웨이가 자기를 지정해서 보냈는데
그것이 잘못뙜다고 판단되었다고 되었을때 R2를 통해서 패킷을 보내라 라는 의미로 방향
재지정 리다이렉션 ICMP에러 리포팅 메세지를 송신 호스트에게 보내게된다

쿼리 메세지 
8 or 0 Echo request or reply
예를들어 ICMP 리퀘스트를 윈도우에 4개를 보냈는데 4개가 다 온다면 통신에 전혀 문제가 전혀 없다는 뜻
만약 4개를 보냈는데 2개만 왔다면 링크가 불안정하다는 뜻이고 안왔다면 통신이 불가능하다는것
보안상의 이유로 ICMP 리퀘스트를 설정해서 응답이 안올수있는 경우가 있다 그건 호스트가 해킹위험을 위해 막아둔것
13 or 14 Timestamp or reply
시간정보를 요청할때 그리고 현재 시간정보를 입력해서 14번을 입력해서 응답을 하게 된다


- 오류 보고 메세지
	- ICMP의 주 임미 중 하나 cf. 오류 수정은 상위 층에 맡김
	- 항상 최초의 발신지로 오류 메세지를 보고

- 오류 보고 메세지에 대한 주요 사항
	- ICMP 오류 메세지를 전달하는 데이터그램에 대해서는 ICMP오류 메세지가 생성되지 않는다
	- 단편화된 데이터그램은 첫 번째 단편만 오류 메세지가 생성--
	  (첫 번째 단편이 아닐 경우 ICMP 오류 메세지가 생성되지 않는다)
단편이 만약 5개로 나누어져있다면 5개의 각각에대해 오류 보고 메세지를 보낼 필요가 없다는것
그래서 최초 첫 번쨰 단편만 보낸다
	- 멀티캐스트 주소를 가진 데이터그램은 오류 메세지가 생성되지 않음
	- 127.0.0.0이나 0.0.0.0 같은 특수 주소를 가진 데이터그램은 오류 메세지가 생성되지 않음 


- 오류 메세지를 위한 데이터 필드 내용
	- 처음 8 바이트 : TCP와 UCP의 포트 번호와 순서 번호
IP	ICMP	IP	IP	   8		IP
헤더	헤더		헤더	바이트	헤더
오류 보고를 할때 IP 전체와 IP 데이터의 앞쪽 8바이트 까지
왜냐하면 순서번호와 같은 주요한 트랜스포트 계층의 필드가 포함되어..


- 질의 (Query) 메세지
	- 네트워크 문제 진단
Echo - request and reply 8, 0....


- 검사합 (Checksum)
	- 헤더와 데이터를 포함한 전체 메세지에 대해 계산
	- 검사합 계산 예
책섬필드 계산할때는 16비트씩 끊어서


- Ping
	- 특정 호스트 또는 라우터가 정상적으로 동작하는 지를 점검
	- ICMP echo request / reply 메세지 이용

호스트 A에서 호스트 B까지
호스트 A는 ICMP 에코 첫 번쨰 리퀘스트 메세지를 보낸다
TTL 필드를 처음에 1로 세팅해서 보내게된다
R1에 도착하면 TTL 필드 값을 1을 감소시킨다 그러면 0이된다
그러면 ICMP time 메세지가 발생되어야하는데 R1이 자신의 왼쪽 인터페이스 이 주소를 송신자 주소로하고
원래 호스트 A를 목적지 주소로하는 IP데이터그램을 형성하는데 그 IP데이터그램은 에러데이터그램을 형성?
타입 필드는 타임 익시디드 라는 에러메세지 타입과 TTL 0이되는경우와 타임아웃이 되는 경우
이 코드는 바로 0번 즉 TTL 필드가 0번이 발생했다는것
이것을받은 호스트 A는 TTL 필드를 1로 셋팅했는데 타임 익시디드 된게 R1이구나를 알게될수있다
그리고 R1 왼쪽 인터페이스 주소를 입력해놓음

다시 이번에는 2로 설정해서 B로 보낸다 ICMP 에코 리퀘스트 메세지를
R1을 만날떄 1이 될것이고 TTL 이 R2로가면 다시 0가 된다
R2는 호스트에게 ICMP 에러 리포팅 메세지를 보낸다 이것도 타임 익시디드 고 TTL 0 로 보낸다
호스트 A는 TTL 2로 보냈을때 다시 0이되어...

다시 3으로 보내면 최종 목적지까지 도달하게 되는데 호스트B가 에코 리플라이 메세지를 보낸다
이런 과정을 거쳐서 송신자에서 목저지까지 지나가는 노드들의 정보들을 쭉 확인할수 있게된다

- Traceroute
	- 패킷이 발신지에서 목적지까지 전달되는 경로 추적
트레이스루트 라는 명령어는 cmd에서 하면 명령어가 tracert 라고 써야한다
이걸 주의해야함


ICMP 패키지
구체적인 내용은 생략







제 13장 전송 계층 개요


Protocol-to-Process 통신
	- Process : 전송 계층의 서비스를 이용하는 응용 계층 엔터티
		  (즉, 구동 중인 프로그램)
종단간 신뢰성 있는 데이터 전송을 지원하기 위해서 여러 가지 전송제어 기능을 담당한다

호스트 간의 통신을 담당하는 것이 네트워크 계층의 기능이다 라고 하면 
트랜스포트 계층 즉 전송계층은 프로세스와 프로세스간의 통신을 담당한다
우리가 통신을 한다는 것은 프로그램을 구동해서 통신을 하는것

우리가 어떤 통신을 한다라고 하는것은 구동되고 있는 여러가지 프로그램을 통해서
통신을 한다는것이고 이 말은 데이터가 프로세스 단위로 송수신이 이루어져야 통신을 원활하게 할수있다


주소 체계 : 포트 번호
- Process 통신을 위해 필요한 사항
	- 로컬 호스트(local host) -> Local IP address
	- 로컬 프로세스(local process) -> Local port number
이 두 조합을 로컬쪽의 소켓 주소
	- 원격 호스트(remote host) -> remote IP address
	- 원격 프로세스(remote process) -> remote port number
이 두 조합을 리모트쪽의 소켓 주소

- 포트 번호
	- 서버 프로세스 -> 잘 알려진 포트 번호(Well-known port number)
서버측이라해서 반드시 사용하는 것은 아니다
총 16비트를 사용할수있는데 그 중에 1023번까지 웰노운포트번호라고 한다
주로 서버측 프로세스의 포트번호로 사용된다
서버측 프로세스를 사용하는 포트번호다 라고 이해하자 
	- 클라이언트 프로세스 -> 임시 포트 번호(Ephemeral prot number)
클라이언트는 임시 포트번호를 사용한다고 이해하자

어떤 컴퓨터에서 프로세스를 구별하기 위해 사용되는 번호가 포트번호 이다.
네트워크에서 궁극지검을 표기할 때 IP주소와 포트번호의 조합으로 궁극적인 엔드지점을 지정한다.
이 두개의 요소를 소캣이라는 구성체로 정의해서 사용한다 이것을 @소켓 주소@ 라고 얘기한다.


- 주소 체계 : 포트 번호(계속)
클라이언트가 서버측에 접속해서 현재의 시간 정보를 요청하는 경우인데
요청을 받은 서버는 자기 자신의 시간 정보를 클라이언트에게 제공한다
클라이언트의 포트번호는 52000번이라는 임시번호를 사용했고
포트번호 13번은 미리 약속을 했다 그래서
클라이언트는 서비스를 원할때 자신의 운영체제가 할당한 52000번이라는 로컬 포트번호와
미리 약속되어있는 13번이라는 리모트쪽 원격지에 포트번호에 조합을 트랜스포트계층의 헤더에
기록해서 전송하게 되는것이다
클라이언트 쪽에서 응답을 할때 로컬 포트번호(자신의) 포트번호는 13번이고 리모트측 포트번호는 52000번이다
클라이언트가 원격지 쪽에 포트번호 13번이라고 하는것은 미리 약속을했기때문에 기록이 가능한것이고
서버 측이 클라이언트쪽에 보낼 때 52000번 원격지 포트번호를 기록할수있는 이유는 약속이 되어있기 때문이 아니라
클라이언트가 먼저 요청을할때 52000번을 기록했기때문에 사용해서 서버측이 응답을 하게되는것이다

- 주소체계 : 포트 번호(계속)
	- IP주소 vs 포트 번호
IP주소를 가지고 컴퓨터 호스트 레벨까지 IP데이터그램을 전송 하고
그 이후에 떠있는 구동중인 프로세스를 구별하기위해서 포트번호를 사용한다는것

- 주소체계 : 포트 번호(계속)
	- ICANN 범위 	cf. ICANN: Internet Corporation for
				  Assigned Names and Numbers
	- 잘 알려준 포트(Well-known prots) : 0~ 1023
ICANN에서 약속해놓은 포트번호이기때문에 임의로 서버 프로세스 포트번호를 할당할수없다
	- 등록된 포트(Registered prots) : 1024~ 49151
동일한 포트번호를 여러개의 프로그램이 중복해서 사용할경우 포트번호 충돌이 일어나기 때문에
충돌을 막기 위해 포트번호를 등록을해서 다른 프로그램이 동일한 포트번호를 사용할수없도록 관리해야한다
개인 프로그램은 사용할필요는 없지만 상용목적으로 사용하는 프로그램은 등록할 필요가 있다
	- 동적 포트(Dynamic port) : 49152~65535
사용자가 임의로 할당 가능한 포트


- 소켓 주소(Socket Address)
	- 각 종단 점에서 연결을 만들기 위해 필요한 주소
	- IP주소와 포트번호의 조합
특정 호스트의 특정 프로세스의 엔드지점을 표기하기 위해서는 아이피 주소와 포트번호 모두 필요한
소켓 주소가 정의되야 한다


- 캡슐화(Encapsulation) 와 역캡슐화(Decapsulation)


- 다중화(Multiplexing) 와 역다중화(Demultiplexing)
여러개의 응용계층 프로토콜이 하나의 트랜스포트계층 레이어를 사용한다는 의미에서 다중화 라고 얘기하고

수신하는쪽에서 하나의 트랜스포트 레이어에서 여러개의 응용계층 프로세스 쪽으로 데이터를 보낼수있게 되는것
이 과정을 역다중화 라고 얘기한다

여러개의 엔터티에서 하나의 엔터티로 합쳐지는것이 다중화
하나의 엔터티가 여러개의 엔터티로 퍼지는것이 역다중화


- 흐름제어 (Flow control)
	- 정보 생성 엔터티와 소비 엔터티 간에 생성율과 소비율의 균형 중요
	- 정보를 생산자로부터 소비자로 배달하는 방법
		- 밀기(Pushing) : 소비자 요구 없이 생산자가 전달
		- 끌기(Pulling) : 소비자가 요구한 경우만 전달 -> 흐름제어 필요 없음
송신측이 송신량을 조절할 필요가 있다 이것을 흐름제어라고 얘기한다
흐름제어에는 푸싱과 풀링이 있다
푸싱은 소비자의 요구없이 생산자가 전달한다 일단 보내는거다
전송을 하고나서 피드백을 받는것 만야겡 버퍼에 오버플로우가 생긴다거나
버퍼 용량에 대한 정보를 송신측에게 알려주는것 그래서 피드백을해서 송신자가 송신량을 조절할수있도록
푸싱상황에서의 플로우 컨트롤이 되는것

풀링은 더 안전하다 송신자가 항상 먼저 전송하는것이 아니라 수신측이 데이터를 달라고 요청할때만
데이터를 전송하는 과정이다 이 경우에는 수신측이 요청할때만 데이터를 보내게되므로 버퍼 오버플로우의 확률이 적다

전체적인 버퍼 오버플로우의 문제가 없다면 푸싱 서비스가 풀링방법에 비해서 더 전체적인 성능은 높다


- 흐름 제어(Flow control)
	- 전송 계층에서의 흐름제어
		- 송신 프로세스, 송신 전송 계층, 수신 전송 계층, 수신 프로세스
송신측 - 트랜스포트계층 - 트랜스포트계층 - 수신측
모드 플로우 컨트롤이 필요
전송계층에서의 프름제어는 송신측의 프로세스와 송신측의 트랜스포트레이어간에 있어야하고
송수신측 트랜스포트레이어간에 플로어 컨트롤이 필요
이것이 가장 중요한 플로우 컨트롤이 되겠다
버퍼에 의해서 흐름제어를 구현하게 된다















