컴퓨터 구조 3주차 정리

메모리 반도체
비메모리 반도체

8진수보다는 16진수를 사용하는 경우가 더 많은데 실제로 컴퓨터 구조나 
어셈블리어에서는 16진수를 많이 쓴다. 자릿수를 더 짧게 표현할 수 있기 때문이다.

- 패리티 비트
	- 짝수패리티(even parity) : 데이터에서 @1의 개수@를 짝수 개로 맞춤
	- 홀수패리티(odd parity) : 1의 개수를 홀수 개로 맞춤
	- 패리티 비트는 데이터 전송과정에서 에러 검사를 위한 추가비트
	- @패리티는 단지 에러 검출만 가능하며@, 여러 비트에 에러가 발생할 경우에는 검출이 안될 수도 있음

에러 검출 코드 
패리티 비트 1-17p 예제

해밍 코드 (2비트의 에러 검출 및 1비트의 에러 교정)
- @에러를 검출 및 정정(=교정) 할@ 수 있는 코드 , 다른 코드는 에러를 찾아주는 역할!
- 추가적으로 많은 비트가 필요하므로 많은 양의 데이터 전달이 필요  
- 데이터 비트와 패리티 비트와의 관계

- 예를 들어 d = 8이면 2p≥8+p+1을 만족하는 p를 계산하면 4가 된다.
- 해밍코드에서는 짝수 패리티를 사용 
 예제 1-21p
 예제 1-23p


순환 중복 검사(CRC)
- 높은 신뢰도를 확보하며 에러 검출을 위한 오버헤드가 적고, 
   랜덤 에러나 버스트 에러를 포함한 에러 검출에 매우 좋은 성능을 갖는다.

CRC 발생기 및 검출기
- 수신 측에서는 수신된 d + k비트의 데이터를 키 값으로 나누었을 때 나머지가 0이면 에러가 없는 것이지만, 
   0이 아니면 에러가 발생한 것으로 판단한다.

@- 미리 정해진 다항식을 적용해서 오류 검출 
@- 송신 (데이터 프레임에 FCS 추가해서 전송) 
@         ->수신 (프레임에 추가된 FCS 검사  에러 발생 확인    


CRC 계산에 사용되는 모듈로-2 연산
- 사칙 연산에서 캐리는 고려하지 않는다. 
- 덧셈 연산은 뺄셈 연산과 결과가 같으며 XOR 연산과도 같다.
- 데이터가 100100이고, 키 값이 1101인 경우 FCS를 계산하는 예 1-25p

CRC 테이블 기법 1-27p
- [그림 2-10]과 같이 비트 단위로 CRC를 계산하면 회로는 간단하지만 처리 속도에 문제가 있다.
- 이를 위해 미리 CRC를 계산하여 메모리에 저장해 놓고 사용한다.

생성 다항식
- 생성 다항식은 에러 검출 능력을 고려하여 결정되는데, 현재 다음 유형이 사용된다
**@블록합 검사 BSC = 패리티 검사의 단점을 보완, 
   프레임 모든 문자 동일 위치에 패리티를 추가 계산  


2번째 파트

논리 게이트의 개념과 종류 2-3p
- TTL과 CMOS 논리 레벨 정의영역

NOT 게이트 2-4p
- 한 개의 입력과 한 개의 출력을 갖는 게이트로 논리 부정을 나타낸다. 
- NOT 게이트를 @인버터@(inverter)라고도 한다.

버퍼 게이트 2-5p
- 버퍼 buffer는 입력 신호를 그대로 출력하여 
   단순 전송을 표현하는 게이트다. 
   입력이 0이면 0을 출력하고, 입력이 1이면 1을 출력한다.

3상태 버퍼(tri-state buffer)
- 출력이 3개 레벨(High, Low, 하이 임피던스) 중의 하나를 갖는 논리소자

AND 게이트 2-6p
- 입력이 모두 1인 경우에만 출력이 1이고, 입력 중 0이 하나라도 있으면 출력은 0이 되는 @논리곱@이다.

OR 게이트 2-7p
입력이 모두 0인 경우에만 출력이 0이고, 입력 중 1이 하나라도 있으면 출력은 1이 되는 @논리합@이다. 

NAND 게이트 2-8p
입력이 모두 1인 경우에만 출력이 0이고, 입력에 0이 하나라도 있는 경우는 모두 출력이 1이다.
AND 게이트와 반대로 동작하여 NOT-AND의 의미로 NAND 게이트라고 한다. 

NOR 게이트 2-9p
입력이 모두 0인 경우에만 출력이 1이고, 입력에 1이 하나라도 있는 경우는 모두 출력이 0이다. 
OR 게이트와 반대로 동작하여 NOT-OR의 의미로 NOR 게이트라고 한다. 

XOR 게이트 (eXclusive OR gate) 2-10p
입력에 1이 홀수 개이면 출력이 1이고, 짝수 개이면 출력이 0이다.
2입력 XOR 게이트는 두 입력 중 하나가 1이면 출력이 1이고, 두 입력 모두 0이거나 1인 경우에만 출력이 0이 되는 것이다. 

XNOR 게이트 (eXclusive NOR gate) 2-11p
입력에 1이 짝수 개이면 출력이 1이고, 홀수 개이면 출력이 0이다. 
XOR 게이트에 NOT 게이트를 연결한 것과 출력이 같으므로 XOR 게이트와 반대다. 
2입력 XNOR 게이트는 두 입력이 다르면 출력이 0이고, 두 입력이 같으면 출력이 1이라고 생각하면 쉽다. 


유니버설 게이트 2-12p
- NAND와 NOR 게이트만으로도 모든 회로를 만들 수 있으므로 
   이 둘을 특별히 @유니버설 게이트@ (universal gate) 또는 @범용 게이트@라고 한다.

NOT 게이트 구성
- A = 0이면 입력 2개에 모두 0이 입력되므로 출력 F =1이 된다. 
- A =1이면 입력 2개에 모두 1이 입력되므로 출력 F = 0이 된다.

AND 게이트 구성 2-13p
- AND 게이트의 논리식 "F=AB"를 이중 부정하고 드모르간의 정리를 적용해
	   "F=AB=" ("AB" ) ̿"=" ("A"  ̅"+" "B"  ̅ ) ̅로 변형하여 논리 회로를 구성한다.

OR 게이트 구성 2-13p
- OR 게이트의 논리식 "F=A+B"를 이중 부정하고 드모르간의 정리를 적용해
  	    "F=A+B=" ("A+B" ) ̿"=" ("A"  ̅"B"  ̅ ) ̅로 변형하여 논리 회로를 구성한다.

XOR 게이트 구성 2-14p @@@@ 많이 써보면서 외우기 xor, nand 게이트
- 2입력 XOR 게이트의 논리식은 "F=" "A"  ̅"B+A" "B"  ̅로, 두 입력이 모두 0이거나 1이면 출력이 0이 된다. 
   이 논리식을 불 대수 법칙으로 다음과 같이 정리하여 논리 회로를 구성한다.


와이어드 로직
- 집적 회로(IC)에서는 대부분 NAND나 NOR 게이트 형태로 구성한다. 
- 둘 이상의 NAND 또는 NOR 게이트의 출력을 연결해 특정 논리 함수를 수행하는 형태를 
   @와이어드 로직@(wired logic)이라고 한다.


불 대수 2-16p
- 기본적인 불 대수식은 AND, OR, NOT을 이용하여 표현 
- AND식은 곱셈의 형식으로 표현하고, OR 식은 덧셈의 형식으로 표현
- NOT식은 "A"  ̅ 또는 Aˊ 로 표현
- 완전한 논리식은 입력 항목들의 상태에 따른 출력을 결정하는 식

불 대수 법칙 2-17p
- 불 대수의 모든 항은 0 또는 1을 갖는다. 
- [표 3-1]은 증명 없이 사용하기로 한 AND와 OR의 불 대수 공리다

@@ 불 대수의 기본 법칙 @@ 2-18p
@@드모르간의 정리@@ 2-19p
@@흡수 법칙@@ 2-19p
@@합의의정리@@ 2-19p

- 진리표를 이용한 분배법칙 A + BC = (A+B)(A+C)의 증명 2-20p
- 진리표를 이용한 드모르간의 정리 증명 2-21p
- 드모르간의 정리는 논리 게이트로 표현할 수 있고 2-22p
 항이 많아도 동일하게 적용할 수 있다.

불 대수식의 표현 형태
- 곱의 합과 최소항
	- 곱의 합(SOP, Sum Of Product)은 1단계인 입력이 AND항(곱의 항)으로 구성되고, 
 	   2단계인 출력이 OR항(합의 항)으로 만들어진 논리식이다.

최소항
- 최소항(minterm)은 입력 변수를 모두 포함하는 AND항이다. 
	- 최소항은 입력이 0이면 입력 변수의 부정을 쓰고, 
	   입력이 1이면 입력 변수를 그대로 쓴 후 AND로 결합한다. 
	- 예를 들어 입력 변수가 A, B일 때 만들 수 있는 최소항은 
	   "A"  ̅"B"  ̅, "A"  ̅"B" , "A" "B"  ̅, AB 다.

최소항 식
- 최소항 식은 출력이 1이 되는 항의 입력 변수를 AND 연산하고, 
   각 항을 OR 연산하는 식이다.

합의 곱과 최대항
- 합의 곱(POS, Product Of Sum)은 1단계인 입력이 OR항(합의 항)으로 구성되고, 
   2단계인 출력이 AND항(곱의 항)으로 만들어진 논리식이다.

최대항
- 최대항(maxterm)은 입력 변수를 모두 포함하는 OR항이다. 
- 최대항은 입력이 0이면 입력 변수를 그대로 쓰고, 입력이 1이면 입력 변수의 부정을 쓴 후 OR로 결합한다. 
- 예를 들어 논리 변수가 A, B일 때 만들 수 있는 최대항은 (A+B), "(A+" "B"  ̅")", "(" "A"  ̅"+B)", "(" "A"  ̅"+" "B"  ̅")" 다.

최대항 식
- 최대항 식은 출력이 0이 되는 항의 입력 변수를 OR 연산하고, 
   각 항을 AND 연산하는 식이다

최소항과 최대항의 관계
- 최소항 식은 출력이 1인 항을 곱의 합(SOP)으로 나타낸 것이고, 
   최대항 식은 출력이 0인 항을 합의 곱(POS)으로 나타낸 것이다. 
- 따라서 최소항과 최대항은 서로 보수의 성질을 띤다고 할 수 있다.

데이터 형태에 따른 분류 2-30p
- 조합 논리 회로의 개요
	- 조합 논리 회로(combinational logic circuit)는 현재 입력 값으로 
	   출력이 결정되는 회로

조합 논리 회로의 종류 2-31p
- 반가산기
	- 반가산기(Half-Adder, HA)는 1자리 2진수 2개를 입력하여
	   합(S)과 캐리(Carry, C)를 출력하는 조합 논리 회로

- 전가산기 2-32p
	- 전가산기(Full-Adder, FA)는 2진수 입력 A, B와 아랫자리에서 
	   올라온 캐리 Ci를 포함하여 1자리 2진수 3개를 더하는 조합 논리 회로

- 반감산기@@@ 시험에서 자주나온 문제 2-33p
	- 반감산기(Half-Subtractor, HS)는 
	  1비트 2진수 A에서 B를 빼 차(D)와 빌림 수(K)를 계산하는 뺄셈회로

- 전감산기 2-34p
	- 전감산기(Full-Subtractor, FS)는 2진수 입력 A, B와 아랫자리로 
	   빌려주는 수 Ki를 포함하여 A-B-Ki를 계산하는 조합 논리 회로

비교기
- 2진 비교기(comparator)는 두 2진수 값의 크기를 비교하는 회로다


멀티플렉서
- @멀티플렉서@(multiplexer, MUX )는 여러 개의 입력선들 중에서 하나를 선택하여 출력선에 
   연결하는 조합논리회로이다. 선택선들의 값에 따라서 특별한 입력선이 선택된다. 
- 멀티플렉서는 많은 입력들 중 하나를 선택하여 선택된 입력선의 2진 정보를 출력선에 
   넘겨주기 때문에 @데이터 선택기@(data selector)라 부르기도 한다. 
- @디멀티플렉서@(demultiplexer, DEMUX ) 는 정보를 한 선으로 받아 2n 개의 가능한 출력 
   선들 중 하나를 선택하여, 받은 정보를 전송하는 회로다. 

코드 변환기 (2진 코드 → 그레이 코드 변환 (딱히 중요하진 않음)) 2-37p
코드 변환기 (그레이 코드 → 2진 코드 변환) x
코드 변환기 (BCD 코드 → 3초과 코드 변환) x

데이터 전송 시스템 2-40p

ROM을 사용한 조합 논리 회로의 설계
- 다음 불 함수를 ROM을 사용해 구현하는 예 x

순서 논리 회로의 개요 2-42p
- 조합 논리 회로(combinational logic circuit) : 
	이전 입력 값에 관계없이 현재 입력 값에 따라 출력이 결정
- 순서 논리 회로(sequential logic circuit) : 
	현재의 입력 값과 이전 출력 상태에 따라 출력 값이 결정


순서 논리 회로

- 순서 논리 회로의 특징
	- 순서 논리 회로의 출력은 외부에서 들어온 입력과 이전 출력 상태에 따라 결정된다. 
	  이러한 동작은 클록 펄스가 들어올 때마다 반복해서 일어난다.
	- 순서 논리 회로는 기억 기능(플립플롭)이 있다.
	- 대표적인 순서 논리 회로에는 플립플롭, 카운터, 레지스터 등이 있다.

클록 펄스
- @플립플롭@(flip-flop)은 @클록 펄스@(Clock Pulse, CP)라는 제어 입력을 가지며, 
   출력은 클록 펄스에 동기되어 변하고 이러한 변화를 트리거(trigger)되었다고 한다. 







