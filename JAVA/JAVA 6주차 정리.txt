JAVA 6주차 정리

static은 메모리공간이 이미 할당되어있고
멤버변수, 멤버..메소드? 는 메모리공간이 할당이 미리 되어있지않음
		인스턴스 생성할때 메모리공간이 할당됨
메모리공간의 할당이 됐을떄와 안됐을때의 차이

클래스 메소드의 정의와 호출 6-10p
showInt

클래스 메소드로 정의하는 것이 옳은 경우 6-11p

Math.pow(2,20) 2^20 값을 구할수있는 함수
Math.PI 도있음  

클래스 메소드에서 인스턴스 변수에 접근이 가능할까? 6-12p
잘 알아두자 num이 누군지 모름 논리적으로 불가능, 물리적으로도 불가능


10-3. System.out.println 그리고 public static void main()

main은 메모리공간이 무조건 할당이 되어있어야함
그래서 static이 붙는거
public은 main이기때문에 어디서든 사용가능해야함
@@


System.out.println()에서 out과 println의 정체는?
- java.lang.System.out.println(...);
- System은 java.lang 패키지에 묶여 있는 클래스의 이름
- 그러나 컴파일러가 다음 문장을 삽입해 주므로 java.lang을 생략할 수 있다.
	- import java.lang.*;
- System.out.println(...);
- out은 클래스 System의 이름을 통해 접근하므로, 
- 이는 System 클래스의 클래스 변수 이름임을 유추할 수 있다.
out은 클래스 참조변수
- System.out.println(...);
- println은 out이 참조하는 인스턴스의 메소드이다


main 메소드가 public이고 static인 이유는?
- public static void main(String[] args) {...}
- static인 이유! 인스턴스 생성과 관계없이 제일 먼저 호출되는 메소드이다.
- public static void main(String[] args) {...}
- public인 이유! main 메소드의 호출 명령은 외부로부터 시작되는 명령이다.
- 단순히 일종의 약속으로 이해해도 괜찮다

main 메소드를 어디에 위치시킬 것인가? 6-16p
main은 어디에다 놔도 상관이없다 car클래스던 boat 클래스던
하지만 public static은 꼭 지켜줘야함


10-4. 또 다른 용도의 static 선언


static 초기화 블록 6-18p
static은 선언과 동시에 초기화? 흠흠ㅁ...
날짜를 가져오는게 목적
static 블록을 삽입하면됨
솔직히 잘 모르겠다..

static import 선언
System.out.println(Math.PI)  -- 대부분 이렇게 사용@
java.lang.Math.PI 
System.out.println(PI)
import static java.lang.Math.PI;  -- 이렇게는 잘 안씀


11-1. 메소드 오버로딩

메소드 오버로딩
- 호출된 메소드를 찾을 때 참조하게 되는 두 가지 정보
   - 메소드의 이름
   - 메소드의 매개변수 정보
메소드 이름은 같아도 매개변수의 정보가 다르면 됨@
- @따라서 이 둘 중 하나의 형태가 다른 메소드를 정의하는 것이 가능하다. 
class MyHome {
void mySimpleRoom(int n) {...}			- 메소드 오버로딩
void mySimpleRoom(int n1, int n2) {...}		- 메소드 오버로딩
void mySimpleRoom(double d1, double d2) {...}   	- 메소드 오버로딩
}
반환형은 메소드 오버로딩의 값이 아니다


메소드 오버로딩의 예 6-24p

void simpleMethod(int n) {...}
void simpleMethod(int n1, int n2) {...}  -- 매개변수의 수가 다르므로 성립!

void simpleMethod(int n) {...}
void simpleMethod(double d) {...} -- 매개변수의 형이 다르므로 성립!

int simpleMethod() {...}
double simpleMethod() {...} -- 반환형은 메소드 오버로딩의 조건 아님!


오버로딩 관련 피해야할 애매한 상황 6-24p

class AAA {
void simple(int p1, int p2) {...}
void simple(int p1, double p2) {...}
}
다음과 같이 모호한 상황을 연출하지 않는 것이 좋다!
AAA inst = new AAA();
inst. simple(7, 'K'); // 어떤 메소드가 호출될 것인가?
그래도 받긴받는데 위에것으로 받음


생성자의 오버로딩 6-25p
같은 이름의 생성자가 있지만 매개변수가 다름
정수하나넘겨주는거, 두개넘겨주는거 가능

생성자의 오버로딩을 통해 생성되는 인스턴스의
유형을 구분할 수 있다.
- ex) 여권이 있는 사람과 없는 사람
- ex) 운전 면허증을 보유한 사람과 보유하지 않은 사람


키워드 this를 이용한 다른 생성자의 호출 6-26p
this 는 인스턴스 자기 자신 @@@@ 자기자신을 가리키는것
유사한게 super 도 많이쓰임 부모를 사용할때

rnum과 0을 인자로 받는 오버로딩 된 다른 생성자 호출,
중복된 코드를 줄이는 효과!


키워드 this를 이용한 인스턴스 변수의 접근 6-27p 
class SimpleBox {
private int data;
SimpleBox(int data) {
this.data = data;
	}
}
this.data는 어느 위치에서 건 인스턴스 변수 data를 의미함


11-2. String 클래스
String은 클래스다
- String 인스턴스 생성의 두 가지 방법
- String str1 = new String("Simple String");  -- 생성자 호출할때 이게 맞음
- String str2 = "The Best String";  -- 이렇게 생성할수도 있음 보통 이렇게 많이씀
			     변수 선언하는거랑 비슷함 차이를 잘알아야함
두 개의 결과는 똑같다 
문자에 주소값이 들어가는것도 같다
아주 큰 차이점이 있다..음..
- 둘 다 String 인스턴스의 생성으로 이어지고 그 결과 인스턴스의 참조 값이 반환된다.


String 인스턴스와 println 메소드 6-30p
length = 문자열의 길이 구하는것


문자열 생성 방법 두 가지의 차이점 6-31p
str2 가 틀림
str2 는 str1 의 값을 가르키고있음
str1 과 str2는 같은 인스턴스를 가르키고있다
메모리 공간을 효율적으로 쓰기위해 1,2번의 같은 인스턴스를 사용
new는 공간을 무시하고 새로만들어! 다
new를 사용하지않으면 값을 바꿀수없음 새로운 인스턴스를 가르키게 해야함
메모리공간을 서로 다르게 만들게 해야함

String 인스턴스는 Immutable 인스턴스 6-32p
String 인스턴스는 Immutable 인스턴스! 
따라서 생성되는 인스턴스의 수를 최소화 한다.
이후로 두 코드에 어떠한 차이점을 부여할 수 있겠는가? (사실상 차이가 없다는 의미)


String 인스턴스 기반 switch문 구성 6-33p
스위치에는 문자열 인스턴스 기반도 가능


11-3. String 클래스의 메소드

문자열 연결시키기 6-35p
concat 이라는 문자열 두 개를 이어붙일수있음


문자열의 일부 추출 6-36p
substring(2) 인덱스 2번이후의 내용을 추출(반환)
substring(2,4) 2~3에 위치한 내용의 문자열을 반환


문자열의 내용 비교 6-37p
equals - 메소드 문자열의 내용을 비교    @@@
	대소문자 구분함
compareTo - 먼저 나오는놈, 늦게 나오는놈 비교
	    대문자가 먼저 나옴 +, - 로 비교
compareTognoreCase - 대소문자를 무시하고 문자열 비교
ex) 비밀번호 같은지


기본 자료형의 값을 문자열로 바꾸기 6-38p
valueOf - String.valueOf .. 기본자료형을 문자열로 바꿀때


문자열 대상 + 연산과 += 연산 6-39p
"abc" + "def" = abcdef


문자열과 기본 자료형의 + 연산 6-40p
17을 string.valueOf 를 해야함


concat 메소드는 이어서 호출 가능 6-41p


문자열 결합의 최적화를 하지 않을 경우 6-42p


문자열 결합의 최적화를 진행 할 경우 6-43p
위에있는 String birth 를 쓰면
밑에있는 String birth처럼 진행이된다는것
StringBuilder - 한번만 인스턴스를 생성하고 덮는것
append - 메소드
toString - 문자열로 변환한다는 메소드


StringBuilder 6-44p
append - 문자열 덧붙이기
delete(0,2) - 0~1 문자열 일부 삭제
replace(0,3"AB) - 0~2 을 AB로 문자열 일부 교체
reverse() -  문자열 내용 뒤집기


StringBuffer 6-45p
StringBuffer와 StringBuilder는 기능적으로는 완전히 동일하다. 즉 다음 세 가지가 일치한다.
- 생성자를 포함한 메소드의 수
- 메소드의 기능
- 메소드의 이름과 매개변수의 선언
쓰레드 - 반대 프로세스 - 순서대로
쓰레드 - 우선순위로 왔다갔다
프로세스 - ex) 한 사람이 은행 일처리를 하고있으면 다른사람이 못함
	      한 번 시작하면 다른일을 하지 못함
쓰레드 - ex) 할게 없으면 다른 일을 처리하는 느낌
	   할 일을 쪼개서 다양한일을 할수있다는느낌?
BUT! 
- StringBuffer는 쓰레드에 안전하다. 
- 따라서 쓰레드 안전성이 불필요한 상황에서 StringBuffer를 사용하면 성능의 저하만 유발하게 된다.
- 그래서 StringBuilder가 등장하게 되었다.






