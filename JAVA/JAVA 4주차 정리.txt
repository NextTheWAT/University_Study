JAVA 4주차 정리

06-1. 
메소드에 대한 이해와 메소드의 정의


main 메소드에 대해서 우리가 아는 것과 모르는 것

메소드의 이름이 main이고 중괄호 내 문장들이 순차적으로 실행된다는 사실은
안다.
public static void main(String[] args) {
int num1 = 5;
int num2 = 7;
System.out.println("5 + 7 = " + (num1 + num2));
}

public, static, void 선언이 의미하는 바는? 
메소드 이름이 main인 이유는? 
자바에서 정한 규칙: 프로그램의 시작은 main에서부터!
main 옆에 있는 (String[] args)의 의미는?
main : 메소드
void : 반환형이 없다 실행하고 끝낸다 다른곳으로 보내지않음,
        값을 반환하지 않음을 의미
static : 
public : 접근제어 지시자
String[] args: 메인 메소드에 매개변수값을 넣어주는것
ex) int abc(int a)
return 반환값;
메인 메소드 - abc (정수값)
메인 메소드를 실행하면 위에서부터 순차적으로 실행을 한다. 4~5p

메소드의 정의와 호출 5p

메소드의 호출 6p

매개변수0개, 2개인 메소드 7p
꼭 리터럴 상수가아니라 선언된 변수도 가능
실수를 반환하는 메소드도 가능 - 메소드 ()값에 메소드

값을 반환하는 메소드 8p

return의 두가지 의미 9p
return; 을 그냥 쓸수도있다 반환하는 값이 없이
	값의 반환 없이 메소드만 종료


06-2. 변수의 스코프


가시성: 여기서는 저 변수가 보여요. 11p
지역변수 4번째것

지역변수 선언의 예 12p


06-3. 메소드의 재귀 호출


수학적 측면에서의 재귀적인 사고 14p
 재귀 메소드의 정의 
재귀의 함수식 정의 15p

함수식 기반의 메소드 정의 16~17p
잘 보기

메소드의 재귀 호출 흐름 18p@


07-1. 
클래스의 정의와 인스턴스 생성 @@@


프로그램의 기본 구성
- 데이터
	- 프로그램상에서 유지하고 관리해야 할 데이터
- 기 능
	- 데이터를 처리하고 조작하는 기능
21p 은행계좌 프로그램 @

클래스 = 데이터 + 기능
- 인스턴스 변수
	- 클래스 내에 선언된 변수
- 인스턴스 메소드
	- 클래스 내에 정의된 메소드
new BankAccount(); // BankAccount 인스턴스 1
new BankAccount(); // BankAccount 인스턴스 2    22p
new BankAccount(); = 메소드3개, 변수 1개 새로운 인스턴스가 생기는것
찍어낸 붕어빵이 객체의 인스턴스

인스턴스와 참조변수 23p
BankAccount myAcnt1; // 참조변수 myAcnt1 선언 
BankAccount myAcnt2; // 참조변수 myAcnt2 선언 
int 선언과 변수 선언이 똑같음 데이터 타입이 BankAccount 임

myAcnt1 = new BankAccount(); // myAcnt1이 새로 생성되는 인스턴스를 가리킴
myAcnt2 = new BankAccount(); // myAcnt2가 새로 생성되는 인스턴스를 가리킴
BankAccount를 생성자 라고 얘기한다

myAcnt1.deposit(1000); // myAcnt1이 참조하는 인스턴스의 deposit 호출
myAcnt2.deposit(2000); // myAcnt2가 참조하는 인스턴스의 deposit 호출

클래스, 인스턴스 관련 예제 24p

참조변수의 특성 25p
1. BankAccount yoon = new BankAccount();
2. ....
3. yoon = new BankAccount(); // yoon이 새 인스턴스를 참조한다.
4. ....

1. BankAccount ref1 = new BankAccount();
2. BankAccount ref2 = ref1; // 같은 인스턴스 참조 = 카드,통장 같은개념
3. ....

참조변수 관련 예제 26p

참조변수의 매개변수 선언 27p

참조변수에 null 대입 28p
1. BankAccount ref = new BankAccount();
2. ....
3. ref = null; // ref가 참조하는 인스턴스와의 관계를 끊음@

1. BankAccount ref = null;
2. ....
3. if(ref == null) // ref가 참조하는 인스턴스가 없다면
4. .... null 저장 유무에 대한 비교 연산 가능!


07-2. 
생성자와 String 클래스의 소개 @


String 클래스에 대한 첫 소개   30p  @
public static void main(String[] args) {
String str1 = "Happy";
String str2 = "Birthday";
System.out.println(str1 + " " + str2);
printString(str1);
printString(str2);
}
코드상에서의 문자열 표현은
String 인스턴스의 생성으로 이어진다.

public static void printString(String str) {
System.out.print(str);
} : str에 있는 주소값에있는 happy라는 문자열이 출력되는것
문자열을 메소드의 인자로 전달할 수 있다.
매개변수로 String형 참조변수를 선언하여 문자열을 인자로 전달받을 수 있다.
String 타입 형은 기본적으로 주소값을 가지고있고 
거기 안에 문자열을 가지고있는 클래스형이다.


클래스 정의 모델: 인스턴스 구분에 필요한 정보를 갖게 하자.  31p

class BankAccount {
int balance = 0; // 예금 잔액
public int deposit(int amount) {...}
public int withdraw(int amount) {...}
public int checkMyBalance() {...}
}
문제 있는 클래스 정의

class BankAccount {
String accNumber; // 계좌번호
String ssNumber; // 주민번호
int balance = 0; // 예금 잔액
public int deposit(int amount) {...}
public int withdraw(int amount) {...}
public int checkMyBalance() {...}
}
좋은 클래스 정의 후보


좋은 클래스 정의 후보를 위한 초기화 메소드! 32p

class BankAccount {
String accNumber; // 계좌번호
String ssNumber; // 주민번호
int balance = 0; // 예금 잔액

초기화를 위한 메소드
public void initAccount(String acc, String ss, int bal) {
accNumber = acc;
ssNumber = ss;
balance = bal; // 계좌 개설 시 예금액으로 초기화
}
. . . 
}
public static void main(String[] args) {
BankAccount yoon = new BankAccount(); // 계좌 생성
yoon.initAccount("12-34-89", "990990-9090990", 10000); // 초기화
. . .
}


초기화 메소드를 대신하는 생성자 33p

class BankAccount {
String accNumber; // 계좌번호
String ssNumber; // 주민번호
int balance; // 예금 잔액
생성자의 이름은 클래스의 이름과 동일해야 한다.
생성자는 값을 반환하지 않고 반환형도 표시하지 않는다.

public BankAccount(String acc, String ss, int bal) { // 생성자
accNumber = acc;
ssNumber = ss;
balance = bal;
}    = 원래 이렇게 초기화를 위한 생성자가 있어야한다 하지만
	자바에서 자동으로 만들어줌
. . . 
}
초기화를 위한 생성자

public static void main(String[] args) {
BankAccount yoon = new BankAccount("12-34-89", "990990-9090990", 10000);
. . . 
}


디폴트 생성자 34p

class BankAccount {
int balance;
public BankAccount() { // 컴파일러에 의해 자동 삽입되는 '디폴트 생성자’ @
// empty
}
public int deposit(int amount) {...}
public int withdraw(int amount) {...}
public int checkMyBalance() {...}
}
이렇듯 모든 클래스의 인스턴스 생성은 생성자 호출을 동반한다. @


클래스의 이름 규칙

클래스 이름의 첫 문자는 대문자로 시작한다.
둘 이상의 단어가 묶여서 하나의 이름을 이룰 때, 새로 시작하는 단어는 대문자로 한다.
ex)
Circle + Point = CirclePoint
	Camel Case 모델


메소드와 변수의 이름 규칙

메소드 및 변수 이름의 첫 문자는 소문자로 시작한다.
둘 이상의 단어가 묶여서 하나의 이름을 이룰 때, 새로 시작하는 단어는 대문자로 한다.
ex)
Add + Your + Money = addYourMoney
Your + Age = yourAge
	변형된 Camel Case 모델


상수의 이름 규칙

상수의 이름은 모든 문자를 대문자로 구성한다. 
둘 이상의 단어가 묶여서 하나의 이름을 이룰 때 단어 사이를 언더바로 연결한다.
ex)
final int COLOR_RAINBOW = 7;







