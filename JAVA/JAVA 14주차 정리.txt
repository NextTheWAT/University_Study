JAVA 14주차 정리


배열의 정렬: Arrays 클래스의 sort 메소드
- 매개변수 a로 전달된 배열을 오름차순(Ascending Numerical Order)으로 정렬


오름차순 정렬이란?
- 클래스를 정의할 때 오름차순 순서상 크고 작음에 대한 기준을 정의해야 한다.


compareTo 메소드 정의 기준
- 인자로 전달된 o가 작다면 양의 정수 반환
- 인자로 전달된 o가 크다면 음의 정수 반환
- 인자로 전달된 o와 같다면 0을 반환


클래스에 정의하는 오름차순 기준


다음과 같이 구현도 가능!


배열에 저장된 인스턴스들의 정렬의 예


배열의 탐색: 기본 자료형 값 대상
- 이진 탐색을 위해서는 탐색 이전에 데이터들이 오름차순으로 정렬되어 있어야 한다.


배열의 탐색: 기본 자료형 값 대상의 예


배열의 탐색: 인스턴스 대상
- 인스턴스 대상으로 했을때도 오름차순으로 정렬되어 있어야 한다.


배열의 탐색: 인스턴스 대상의 예







최종정리


메모리 공간의 활용을 위해 필요한 변수

▶ 변수(Variable)
- 메모리 공간의 활용을 위한 도구
- 메모리 공간의 할당과 접근을 위해 필요한 도구
- 변수의 선언은 ‘메모리 공간의 할당’으로 이어진다.


메모리 공간 할당의 예

▶ 변수의 선언을 통해 결정하는 것 두 가지!
- 변수의 이름
- 변수의 용도
int num1; ◁ 변수 num1의 선언
int num2; ◁ 변수 num2의 선언


변수의 이름을 짓는데 있어서의 제약사항
01 - 자바는 대소문자를 구분한다.
02 - 변수의 이름은 숫자로 시작할 수 없다.
03 - $와_이외의 특수문자는 벼수의 이름에 사용할 수 없다.
04 - 키워드는 변수의 이름으로 사용할 수 없다.


long형 상수(리터럴)의 표현 방법

실수형 상수(리터럴)
Long, Float 은 L과 F를 붙여줘야함
Double 은 D를 붙여주지 않아도 됨


논리 연산자


논리 연산자 사용시 주의점 : SCE


SCE 동작을 확인하는 예제


증가 감소 연산자


Prefix 증가 감소 연산자 예제


비트 쉬프트 연산자
<< 이면 x2
>> 이면 /2


비트 쉬프트 연산자 예제


f ~ else문과 유사한 성격의 조건 연산자
참이면 앞에, 거짓이면 거짓


while문


do ~ while문


클래스, 인스턴스 관련 예제


정보를 은닉해야 하는 이유
pruvate


정보의 은닉을 위한 private 선언
값을 넣을때는 세터
값을 가져올때는 게터


클래스의 public, default 선언 관련 예


인스턴스 멤버의 public, default 선언 관련 예


클래스 메소드에서 인스턴스 변수에 접근이 가능할까?@
오류가 발생한다 num은 메모리공간이 할당이 되어있지 않고
addNum은 이미 할당이 되어있다


문자열 생성 방법 두 가지의 차이점


2차원 배열의 예 @
인핸스포문은 값에 접근하는것만 가능하고
데이터를 수정하는것은 불가능

상속과 생성자1
상속을 사용하는 이유
상속을 받으면 회사와 직책은 넘겨받는데 이름이 문제다
맨 인스턴스를 생성하면 생성자를 호출
그러면 부모클래스의 생성자를 호출해 줘야한다

만약 비즈니스맨에 아무것도 없다면 super가 자동 생성 된다

디폴트생성자는 이미 정의된 생성자가 없을때
디폴트생성자가 정의된다

비즈니스맨에 String name을 하나 더 받아야한다
super(name);

public BusinessMan(String name, String company, String position) {
super(name):
this.company = company;
this.position = position;
}
이런식으로


상위 클래스의 참조변수가 참조할 수 있는 대상의 범위

가르킬수 있는 범위 중요

깰 수 있는 방법도 있다(상속을)
MobilePhone phone = new SmartPhone();
메소드 오버라이딩 이게 더 중요@

하나더
MobilePhone phone = new SmartPhone();
이걸 형 변환해서 사용하면 된다
스마트폰으로 형변환


참조변수의 참조 가능성 관련 예제

모바일폰 - 스마트폰이 문제
ph2는 모바일폰밖에 안된다 근데 스마트폰의 메소드에 접근하려한다


instanceof 연산자의 활용

public static void wrapBox(Box box) {
if (box instanceof GoldPaperBox) {
((GoldPaperBox)box).goldWrap();
	}
else if (box instanceof PaperBox) {
((PaperBox)box).paperWrap();
	}
else {
box.simpleWrap();
	}
}
최하단에 있는애부터 와야한다 순서를 바꿔야함?

만약에 3개다 Box였다면
Box box1 = new Box();
Box box2 = new PaperBox();
Box box3 = new GoldPaperBox();
box1이 가르키는곳이 어디인지
box2가 가르키는곳이 어딘지
box3가 가르키는곳이 어딘지
instanceof니까 결국 Box를 가르킨다

형변환을 시키면 가능하다

모든 메소드를 warp으로 바꾸고
box1.wrap();
box2.wrap();
box3.wrap();

랩박스 메소드가 없다고 가정하고
이것과 같은 동작을하는 코드를 작성해보시오.
public static void wrapBox(Box box) {
box.wrap();
}
이렇게 적으면 될것같다.


단순한 인맥 관리 프로그램: 관리 대상이 둘!

관리대상이 둘 이다


두 클래스를 대상을 하는 코드


상속 기반의 문제 해결: 두 클래스 상속 관계로 묶기

프렌즈 클래스로 묶어서 사용


상속으로 묶은 결과

















