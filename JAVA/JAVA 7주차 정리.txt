JAVA 7주차 정리


12-1. 콘솔 출력  12장은 별로 나올게 없음

toString 메소드  7-4p
- println 또는 print에 인스턴스의 참조 값이 전달되면 해당 참조 값이 참조하는
  인스턴스의 toString 메소드가 반환하는 문자열 출력!
false 라는 데이터타입이아니라 문자열로 출력을 해주는것
실제로 std만 넘겨줘도 std.toString 이랑 같은것 하지만 굳이 std.toString으로 사용안함
무조건 toString메소드 대상으로 그걸 리턴해서 화면에 출력해준다
명시적으로 호출해도 똑같은 효과를 얻는다

문자열의 조합 printf 메소드 7-5p

printf 메소드 호출의 예 7-6p
%e - 178.2를 1.782x10^2
%o - 8진수
%x - 16진수
%g - 출력의 대상에 따라서 %e 또는 %f 형태로 출력 x


12-2. 콘솔 입력

Scanner 클래스
- Scanner 클래스의 인스턴스 생성은 데이터를 뽑아 올
  대상과의 연결을 의미한다. 연결 후에는 데이터 스캔 가능!
import java.util.Scanner; 해야 오류가 뜨지않음

Scanner 클래스의 키보드 적용  7-9p
- Scanner 인스턴스 생성 이후에 데이터를 스캔하는 방법에
  있어서는 차이가 없다! 즉 연결 대상에 의존적이지 않은 코드의
  작성이 가능하다!

Scanner 클래스의 주요 메소드들 7-10p 
int nextInt()
byte nextByte()
String nextLine()
double nextDouble()
boolean nextBoolean()


13-1. 1차원 배열의 이해와 활용


1차원 배열의 이해와 선언 방법  7-13p
- 1차원 배열이란?
	- 타입이 같은 둘 이상의 데이터를 저장할 수 있는 1차원 구조의 메모리 공간
- 1차원 배열의 선언 방법
	- int[] ref = new int[5]; // 길이가 5인 int형 1차원 배열의 생성문
저기있는 ref는 참조변수 이다. 메모리공간에는 주솟값이 들어가있다.
그냥 int ref는 변수
자바는 배열은 기본적으로 초기화를 하지않아 0이 들어가있다
배열은 수정사용이 용이하다 ex)반복문

배열 선언문에 대한 세세한 이해와 결과 7-14p
참조변수 생성, 인스턴스 생성
배열의 길이를 알고싶으면 ref.length 를 사용하면 된다.

1차원 배열의 예 7-15p

인스턴스 대상 1차원 배열의 예 7-16p
Box[] ar 은 ar에는 주솟값이 들어가있고 그 주솟값을 들어가보면
배열에 NULL값이 들어가있다 그 NULL값에 인스턴스가 또 있다@@@ 잘 알아두자
하지만 int ar이였다면 0값이 들어가있었을것

배열의 활용: 값의 저장과 참조 7-17p
int ar에는 기본적으로 인스턴스 값에는 0이 들어가있음

값의 저장과 참조의 예 7-18p 알아두기@

배열 기반 반복문 활용의 예 7-19p
String sr 주솟값에는 7개의 각각의 sr[0]~sr[6]까지 NULL값이 들어가있음
그 인스터스값에 Java ~Brunch cafe가 들어가있음
sr.length - 메소드
ar[i].length - 배열
배열 요소는 반복문을 통해 순차적 접근이 가능하며,
이것은 배열이 가진 큰 장점 중 하나이다.

배열을 생성과 동시에 초기화 7-20p
- 배열 생성
	int[] arr = new int[3];
- 배열 생성 및 초기화1
	int[] arr = new int[] {1, 2, 3};    보통 이렇게 안씀 new int를 뺌
- 배열 생성 및 초기화2
	int[] arr = {1, 2, 3};    보통 이런식으로 많이 사용함@

배열 대상 참조변수 선언의 두 가지 방법 7-21p
int[] ar = new int[3]; // 조금 더 선호하는 방법 보통 이렇게 사용
int ar[] = new int[3];

배열의 참조 값과 메소드 7-22p
배열의 참조 값 반환 가능

배열의 디폴트 초기화 7-23p
- 기본 자료형 배열은 모든 요소 0으로 초기화 @
	int[] ar = new int[10];
- 인스턴스 배열(참조변수 배열)은 모든 요소 null@로 초기화 @
	String[] ar = new String[10];

배열의 초기화 메소드 7-24p
int[] a, int val
이있는데 첫번째 배열만 a로되고 나머지는 val로 채워짐
java.util.Arrays 클래스에 정의되어 있는 메소드, 원하는 값으로 배열 전부 또는 일부를 채울 때
사용하는 메소드

배열 복사 메소드 7-25p
java.lang.System 클래스에 정의되어 있는 메소드, 한 배열에 저장된 값을 다른 배열에 복사할 때
사용하는 메소드
arraycopy

배열 초기화와 복사의 예 7-26p
arrays.fill(ar1, 7) 전부 7로 채워져있음
System.arraycopy(ar1, 0, ar2, 3, 4)
ar1을0부터? ar2 3번째부터 복사 4칸을

main 메소드의 매개변수 선언 7-27p
여태까지 메인메소드에 NULL값을 넘겨줬던것
String[] args @ 이거를 사용할수있다는것

main의 매개변수로 인자를 전달하는 예 6-28p
args = argument


13-2. enhanced for문

enhanced for문(for-each문) 의 이해 7-30p
- 코드의 특징: 배열 요소의 순차적 접근
- 위 유형의 코드는 for-each문으로 다음과 같이 구성 가능
  코드의 양이 줄고 배열의 길이와 요소에 신경 쓸 필요 없다
enhanced for문의 치명적인 약점은
배열의 값을 바꾸지 못한다! @@
값에 접근해서 넘김을 받아서 배열의 값을 바꿀수없다.

인스턴스 배열 대상 for-each문의 예 7-32p


13-3. 다차원 배열의 이해와 활용


2차원 배열의 생성
2차원 배열의 메모리공간은
arr2 의 arr[0][0~3]
	   arr[1][0~3] 이런식으로 주솟값을 따라서 인스턴스값을 가지게 된다
2차원배열의 enhanced for문을 어떤식으로 쓰냐
for(int[]a : arr2)
	for(int b: a)

2차원 배열의 예 7-36p
위에 for문은 enhanced for문 안됨 값이 변경이 안되기때문
위에 for문을 1번째 for문 arr.lenghth
		   2번쨰 for문 arr[i].length 로 변경가능
		배열의 숫자가 바뀐다면 이런식으로 바꿀수있음
// 배열에 값을 저장
for(int i = 0; i < arr.length; i++) {
for(int j = 0; j < arr[i].length; j++) {
arr[i][j] = num;
num++;
	}
}
아래 for문은 enhanced for문 사용가능
아래 for문을 enhanced for문을 사용한다면  @@@@@
		for(int a[] : arr)
			for(int b : a)
이런식으로 바꿀수 있다

2차원 배열의 실제 구조 7-37p

2차원 배열의 초기화 7-38p
밑에있는 arr에 채워져있지않은 곳은 0으로 채워져있음



