파이썬프로그래밍 3주차


프로그램의 실행
- 프로그램은 기본적으로 외부 시계로부터 데이터를 입력 받고 적절한 실행(프로세싱이라 부른다)
	을 한 후 그 처리 결과를 출력
- 입력 데이터의 다양성 : 숫자, 텍스트, 이미지, 사운드, 동영상과 같은 멀티미디어 데이터,	
	예) CCTV를 통해 들어온 실시간 데이터
- 프로그램의 처리 결과의 다양성 : 단순한 숫자 또는 텍스트, 사운드, 그래픽, 동영상과 멀티미디어 데이터, 때로는
	로봇의 행위 제어나 자동차와 같은 장치의 제어

데이터의 입력과 실행 결과의 출력
- Input 함수 내의 홑따옴표(Sinjle quote)안에 텍스트를 스트링을 통해 입력 데이터를 요청
	- 스트링은 프롬프트 역할을 수행

리터럴 상수 및 변수
- 리터럴(Literal)
	- 리터럴은 숫사 또는 스트링 그 자체를 의미
	- 홑따옴표 또는 겹따옴표를 사용하여 스트링을 둘러싼다
- 숫자 리터럴
	예) 12, -5, -10.5
- 스트릴 리터럴
	예) 'Nuri', 'Hello! Nuri', 'Forever'

변수(Variable)
- 변수는 변할 수 있는 수로 "어떤 값에 배정된 이름"
	>>> n = 5
	>>> sum = 7.75
	>>> name = 'Nuri'
- n, sum, name은 모두 변수이므로 아래와 같이 그 값을 변경할 수 있다.
	>>> n = 7
	>>> sum = n + 2.5
	>>> name = "Merry"

상수
- 값이 변하지 않는 일종의 변수, 예 수학의 Pi
	>>> Pi = 3.14159

표현식
- 사칙연산자 +, -, *, / 등을 사용하여 표현한 식
	>>> 10 + 30
	>>> n - 12
	>>> (a + b + c)/3.0

할당문
- 표현식을 계산하여 변수에 배정하는 명렴문
	>>> average = (a + b)/2.0
	>>> celsi = (fahr - 32) * (5/9)
	>>> sum = a + b + c - 12.3

프로그램의 처리 순서
- 순차적 처리(Sequence)
- 선택문(Selection)
- 반복문(Iteration)

선택문
if 문의 예 : 아래의 선택문은 현재 시간에 따라 각각 달리 출력
	>>> if time <= 12:
		print("오전 시간")
		elif time <= 19:
		print("오후 시간")
		else:
		print("저녁 시간")

반복문 while
sum = 0
n = 1
while n <= 100:
	sum = sum + n
	n = n + 1
print(sum)


주석문
- 명령문이 무엇을 수행하는지 알려주기 위하여 주석(Comment)을 붙이며 주석 앞에 해시# 기호를 사영
- 프로그램을 읽는 사람에게 의미가 있을 뿐 컴퓨터가 실행하지 않음

함수(function)의 정의와 기능
- 재사용을 목적으로 작성된 특정한 기능을 수행하는 코드들의 집합
- 한 번 정의된 함수는 필요에 따라 불러다 사용
- 추상화(Abstraction) 개념

함수를 정의하여 사용하는 이유
- 읽기 쉽고 이애하기 쉬우며 디버그 하기 쉬운 프로그램 구조로 구성한다
- 프로그램의 반복되는 부분을 함수로 정의함으로써 프로그램의 길이가 짧아진다
- 함수를 한 번에 하나씩 수정하여 테스트한 후 나중에 붙여서 전체 프로그램 작성
- 함수를 재사용할 수 있다

함수의 정의
	>>> def triangle(base, heght):
	>>>		return (base * heght)/2.0

함수의 호출
	>>> area = triangle(10,5)
	>>> print(area)
	25.0

내장 함수와 외부 모듈
@@
함수의 유형
- 내장 함수
	예) input, print, abs, max, len
- 사용자 정의 함수
	- 사용자 정의
- 표준 라이브러리
	예) math, random, time, turtle
- 외부 모듈 함수
	예) NumPy, mathplotlib, Pandas, Pillow, TensorFlow

왜 객체지향 언어?
- 객체지향언어 개념을 적용하면 매우 바람직한 경우 존재, 인산이 살아가는 세계는 자연스럽게 객체 위주로 구성
- 파이썬 언어는 절차적 언어와 객체지향 언어의 특성을 동시에 가짐

클래스, 객체, 메소드
- 클래스 : 같은 유형의 성질과 행위를 갖는 템플릿으로 속성과 행위를 갖는다
- 객체 : 어떤 클래스의 구체적 사례

클래스, 객체, 메소드 및 객체으 ㅣ개념
>>> my_Husky = Dog()
>>>my_Bulldog = Dog()
>>>my_Husky.run()
>>>my_Bulldog.run()


함수와 메소드
- 함수와 메소드는 기능적으로 동일
- 함수는 호출하는 프로그램의 외부에 존재, 메소드는 클래스(객체)의 내부에 자체적으로 존재

스트링(String) : 스트링 또는 문자열은 데이터에 홑따옴표 또는 겹따옴표를 사용하여 스트링을 둘러싼다
	>>> a = "Apple"
	>>> b = "Banana is Delicious!"
텍스트 파일 : 스트링을 담고 있는 파일로 메모리에 저장,
	- 예) 텍스트 파일 : hemingway.txt, 텍스트 파일을 열기(Open)위하여
	>>>american_novel = open('hemingway.txt")

컬렉션(Colletion) 데이터형
- 변수가 여러 개의 요소를 가진 데이터 구조
- 파이썬은 리스트, 튜플, 딕셔너리 및 집합과 같은 다양한 컬렉션 데이터를 지원

리스트(List)와 튜플(Tuple)
- 리스트 : 대괄호( [] ) 내에서 다수의 요소를 가짐
	>>>math_score = [1, 2, 3, 4, 5]
	>>>반려동물 = ['개', '고양이', '토끼']
	>>>Happly = [1, 'Health', 'job']
- 튜플 : 소괄호 ( () ) 내에서 다수의 요소를 가짐, 한 번 요소 값을 지정하면 변경하지 않음
	>>>day = ('Sunday', Monday' , 'Tuesday' )
	>>> studen = ('홍길동','2002020','게임개발학과')

딕셔너리(Dictionary)와 집합(Set)
- 딕셔너리
	- 키(Key) 값이 주어졌을 때 이에 대응하는 값을 찾아옴
	- 예) 과일의 이름과 가격을 연결(Asscoiation)
		>>> 과일가격 = {'사과' : 2000, '배' : 2500)
- 집합
	- 수학에서 의미하는 집합과 동일한 개념
	>>> animal = {'dog','cat','cow'}
	>>> insect = {'bee','ant'}
	>>> animal2 = animal - insect
	>>> animal2
	{'dog','cat','cow}

선택문
- 주어진 조건을 만족 여부에 따라 실행하는 명령문이 달라짐

반복문
- 주어진 조건을 만족하면 계속 명령문들을 실행

멤버쉽 연산자 in은 값이 주어진 리스트(튜플)의 멤버에 해당하는지 테스트
멤버쉽 연산자 in(도는 not in)의 적용 예



























